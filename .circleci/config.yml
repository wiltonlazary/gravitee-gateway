version: 2.1

orbs:
    slack: circleci/slack@4.4.4
    keeper: gravitee-io/keeper@0.6.2
    gh: circleci/github-cli@1.0.5
    aws-cli: circleci/aws-cli@2.0.6
    artifactory-orb: jfrog/artifactory-orb@1.0.1
    aws-s3: circleci/aws-s3@3.0

executors:
    node-lts:
        parameters:
            class:
                description: The resource class
                type: enum
                enum: ["small", "medium", "large", "xlarge"]
                default: "medium"
        docker:
            - image: cimg/node:16.10
        resource_class: << parameters.class >>

    azure-cli:
        parameters:
            resource_class:
                description: The resource class
                type: enum
                enum: ["small", "medium", "large", "xlarge"]
                default: "medium"
        docker:
            # Version can be found here https://docs.microsoft.com/en-us/cli/azure/release-notes-azure-cli
            # be careful when updating the version as it looks it is not following semver
            - image: mcr.microsoft.com/azure-cli:2.34.1
        resource_class: <<parameters.resource_class>>

commands:
    prepare-env-var:
        description: Prepare env variables used in [version.properties] files
        steps:
            - run:
                  name: Prepare env variables
                  command: |
                      export BUILD_ID=${CIRCLE_BUILD_NUM}
                      export BUILD_NUMBER=${CIRCLE_BUILD_NUM}
                      export GIT_COMMIT=$(git rev-parse --short HEAD)

                      # Workaround for sharing this variable to the next steps
                      echo "export BUILD_ID=$BUILD_ID" >> $BASH_ENV
                      echo "export BUILD_NUMBER=$BUILD_NUMBER" >> $BASH_ENV
                      echo "export GIT_COMMIT=$GIT_COMMIT" >> $BASH_ENV

    restore-maven-job-cache:
        description: Restore Maven cache for a dedicated job
        parameters:
            jobName:
                description: The job name
                type: string
                default: ""
        steps:
            - restore_cache:
                  keys:
                      - gravitee-api-management-v6-<< parameters.jobName >>-{{ .Branch }}-{{ checksum "pom.xml" }}
                      - gravitee-api-management-v6-<< parameters.jobName >>-{{ .Branch }}-
                      - gravitee-api-management-v6-<< parameters.jobName >>-
                      - gravitee-api-management-v6-
    save-maven-job-cache:
        description: Restore Maven cache for a dedicated job
        parameters:
            jobName:
                description: The job name
                type: string
                default: ""
        steps:
            - save_cache:
                  paths:
                      - ~/.m2
                  key: gravitee-api-management-v6-<< parameters.jobName >>-{{ .Branch }}-{{ checksum "pom.xml" }}
                  when: always

    notify-on-failure:
        steps:
            - slack/notify:
                  branch_pattern: master,[0-9]+\.[0-9]+\.x
                  event: fail
                  template: basic_fail_1

    get-apim-tag:
        steps:
            - run:
                  name: Read tag of Docker images to deploy
                  command: |
                      export TAG=$(cat ./.docker-tag.txt)
                      # Workaround for sharing this variable to the next steps
                      echo "export TAG=$TAG" >> $BASH_ENV

    get-apim-version:
        steps:
            - run:
                  name: Read APIM version
                  command: |
                      export APIM_VERSION=$(cat ./.apim-version.txt)
                      # Workaround for sharing this variable to the next steps
                      echo "export APIM_VERSION=$APIM_VERSION" >> $BASH_ENV

    prepare-gpg:
        description: Prepare GPG command
        steps:
            - keeper/install
            - run:
                  command: |
                      ksm secret notation keeper://riW92t8X4tk4ZmQc8-FZ4Q/custom_field/armor_format_pub_key > pub.key
                      gpg --import pub.key

                      ksm secret notation keeper://riW92t8X4tk4ZmQc8-FZ4Q/custom_field/armor_format_private_key > private.key
                      # Need --batch to be able to import private key
                      gpg --import --batch private.key

    webui-install:
        parameters:
            apim-ui-project:
                type: string
                default: ""
                description: the name of the UI project to build
        steps:
            - restore_cache:
                  name: Restore NPM cache
                  keys:
                      - << parameters.apim-ui-project >>-cache-v1-{{ checksum "<< parameters.apim-ui-project >>/package-lock.json" }}
                      - << parameters.apim-ui-project >>-cache-v1
            - run:
                  name: Install dependencies
                  command: npm install
                  working_directory: << parameters.apim-ui-project >>
            - save_cache:
                  name: Save NPM cache
                  key: << parameters.apim-ui-project >>-cache-v1-{{ checksum "<< parameters.apim-ui-project >>/package-lock.json" }}
                  paths:
                      - ./<< parameters.apim-ui-project >>/node_modules

    build-backend-images:
        steps:
            - run:
                  name: Build rest api and gateway docker images
                  command: |
                      export REST_API_PRIVATE_IMAGE_TAG=graviteeio.azurecr.io/apim-management-api:$APIM_VERSION
                      export GATEWAY_PRIVATE_IMAGE_TAG=graviteeio.azurecr.io/apim-gateway:$APIM_VERSION

                      docker build -f gravitee-apim-rest-api/docker/Dockerfile \
                      --build-arg GRAVITEEIO_VERSION=${APIM_VERSION} \
                      -t ${REST_API_PRIVATE_IMAGE_TAG} \
                      rest-api-docker-context

                      docker build -f gravitee-apim-gateway/docker/Dockerfile \
                      --build-arg GRAVITEEIO_VERSION=${APIM_VERSION} \
                      -t ${GATEWAY_PRIVATE_IMAGE_TAG} \
                      gateway-docker-context

    save-backend-images-in-workspace:
        steps:
            - run:
                  name: Save Image in Docker Cache
                  command: |
                      mkdir -p ./docker-cache
                      export REST_API_PRIVATE_IMAGE_TAG=graviteeio.azurecr.io/apim-management-api:$APIM_VERSION
                      export GATEWAY_PRIVATE_IMAGE_TAG=graviteeio.azurecr.io/apim-gateway:$APIM_VERSION
                      docker save -o ./docker-cache/apim-management-api.tar ${REST_API_PRIVATE_IMAGE_TAG}
                      docker save -o ./docker-cache/apim-gateway.tar ${GATEWAY_PRIVATE_IMAGE_TAG}

    build-ui-image:
        parameters:
            docker-image-name:
                type: string
                default: ""
                description: the name of the image
            apim-ui-project:
                type: string
                default: ""
                description: the name of the UI project to build
        steps:
            - run:
                  name: Build UI docker image
                  command: |
                      cp -fr docker/config .
                      cp -fr docker/run.sh .

                      export PRIVATE_IMAGE_TAG=graviteeio.azurecr.io/<< parameters.docker-image-name >>:$APIM_VERSION
                      docker build -f docker/Dockerfile -t ${PRIVATE_IMAGE_TAG} .
                  working_directory: << parameters.apim-ui-project >>

    save-image-in-workspace:
        parameters:
            docker-image-name:
                type: string
                default: ""
                description: the name of the image
        steps:
            - run:
                  name: Save Image in Docker Cache
                  command: |
                      mkdir -p ./docker-cache
                      export PRIVATE_IMAGE_TAG=graviteeio.azurecr.io/<< parameters.docker-image-name >>:$APIM_VERSION
                      docker save -o ./docker-cache/<< parameters.docker-image-name >>.tar ${PRIVATE_IMAGE_TAG}

    load-image-from-workspace:
        parameters:
            docker-image-name:
                type: string
                default: ""
                description: the name of the image
        steps:
            - run:
                  name: Load Image from Docker Cache
                  command: docker load < ./docker-cache/<< parameters.docker-image-name >>.tar

parameters:
    gio_action:
        type: enum
        enum: [release, package_bundle, nexus_staging, pull_requests, build_rpm_&_docker_images]
        default: pull_requests
    dry_run:
        type: boolean
        default: true
        description: "Run in dry run mode?"
    docker_tag_as_latest:
        default: false
        type: boolean
        description: "Is this version the latest version available ?"
    graviteeio_version:
        default: ""
        type: string
        description: "Version of APIM to be used in docker images"
    license_version:
        default: ""
        type: string
    ae_version:
        default: ""
        type: string
    notifier_email_version:
        default: ""
        type: string
    notifier_slack_version:
        default: ""
        type: string
    notifier_webhook_version:
        default: ""
        type: string

jobs:
    setup:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: small
        steps:
            - checkout
            - keeper/env-export:
                  secret-url: keeper://7CgijuGiFDSLynRJt1Dm9w/custom_field/xml
                  var-name: MAVEN_SETTINGS
            - run:
                  command: echo $MAVEN_SETTINGS > .gravitee.settings.xml
            - restore_cache:
                  name: Restore Maven cache for compute-tag job
                  keys:
                      - gravitee-api-management-compute-tag-{{ .Branch }}-{{ checksum "pom.xml" }}
            - run:
                  name: Compute APIM Version
                  command: |
                      export APIM_VERSION=$(mvn -s .gravitee.settings.xml -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
                      echo "export APIM_VERSION=$APIM_VERSION" >> $BASH_ENV
                      echo "Gravitee APIM version: ${APIM_VERSION}"
                      echo $APIM_VERSION > .apim-version.txt

            - run:
                  name: Compute Tag for Docker images
                  command: |
                      export TAG=${CIRCLE_BRANCH}-latest
                      # Workaround for sharing this variable to the next steps
                      echo "export TAG=$TAG" >> $BASH_ENV
                      echo "Docker images will be tagged with: ${TAG}"
                      echo $TAG > .docker-tag.txt
            - save_cache:
                  name: Save Maven cache for compute-tag job
                  paths:
                      - ~/.m2
                  key: gravitee-api-management-compute-tag-{{ .Branch }}-{{ checksum "pom.xml" }}
                  when: always
            - persist_to_workspace:
                  root: .
                  paths:
                      - .gravitee.settings.xml
                      - .docker-tag.txt
                      - .apim-version.txt

    sonarcloud-analysis:
        description: A job that run Sonarcloud analysis
        parameters:
            working_directory:
                description: "Directory where the Sonarcloud analysis will be run"
                default: "gravitee-apim-rest-api"
                type: string
        docker:
            - image: sonarsource/sonar-scanner-cli
        resource_class: large
        steps:
            - run:
                  name: Add SSH tool
                  command: apk add --no-cache openssh
            - checkout
            - attach_workspace:
                  at: .
            - restore_cache:
                  keys:
                      - gravitee-api-management-v6-sonarcloud-analysis-{{ .Branch }}-{{ checksum "pom.xml" }}
                      - gravitee-api-management-v6-sonarcloud-analysis-{{ .Branch }}-
                      - gravitee-api-management-v6-sonarcloud-analysis-
            - keeper/env-export:
                  secret-url: keeper://9x9YgyU6DWzux4DPoHAzDQ/field/password
                  var-name: SONAR_TOKEN
            - get-apim-version
            - run:
                  name: Run Sonarcloud Analysis
                  command: sonar-scanner -Dsonar.projectVersion=${APIM_VERSION}
                  working_directory: << parameters.working_directory >>
            - notify-on-failure
            - save_cache:
                  paths:
                      - /opt/sonar-scanner/.sonar/cache
                  key: gravitee-api-management-v6-sonarcloud-analysis-{{ .Branch }}-{{ checksum "pom.xml" }}
                  when: always

    validate:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: small
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-job-cache:
                  jobName: validate
            - run:
                  name: "validate project"
                  command: |
                      mvn -s .gravitee.settings.xml validate --no-transfer-progress -T 2C
            - save-maven-job-cache:
                  jobName: validate
            - notify-on-failure

    build:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: large
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-job-cache:
                  jobName: build
            - prepare-env-var
            - run:
                  name: "Build project"
                  command: |
                      mvn -s .gravitee.settings.xml clean install --no-transfer-progress --update-snapshots -DskipTests -Dskip.validation=true -T 2C -P distribution-dev
                      mkdir -p ./rest-api-docker-context/distribution && cp -r ./gravitee-apim-rest-api/gravitee-apim-rest-api-standalone/gravitee-apim-rest-api-standalone-distribution/target/distribution ./rest-api-docker-context/.
                      mkdir -p ./gateway-docker-context/distribution && cp -r ./gravitee-apim-gateway/gravitee-apim-gateway-standalone/gravitee-apim-gateway-standalone-distribution/target/distribution ./gateway-docker-context/.

            - notify-on-failure
            - save_cache:
                  paths:
                      - ~/.m2/repository/io/gravitee/apim
                  key: gravitee-api-management-v6-build-apim-{{ .Environment.CIRCLE_WORKFLOW_WORKSPACE_ID }}
                  when: on_success
            - run:
                  name: "Exclude APIM artefacts from build cache"
                  command: |
                      rm -rf ~/.m2/repository/io/gravitee/apim
            - save-maven-job-cache:
                  jobName: build
            - persist_to_workspace:
                  root: ./
                  paths:
                      - ./gravitee-*/*/target/*
                      - ./rest-api-docker-context
                      - ./gateway-docker-context

    build-images:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: medium
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - prepare-env-var
            - get-apim-version
            - setup_remote_docker
            - build-backend-images
            - save-backend-images-in-workspace
            - persist_to_workspace:
                  root: ./
                  paths:
                      - ./docker-cache

    test:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: medium
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-job-cache:
                  jobName: test
            - restore_cache:
                  keys:
                      - gravitee-api-management-v6-build-apim-{{ .Environment.CIRCLE_WORKFLOW_WORKSPACE_ID }}
            - run:
                  name: Run tests
                  command: |
                      mvn -U -pl 'gravitee-apim-definition, gravitee-apim-rest-api, gravitee-apim-gateway' -amd --fail-fast -s .gravitee.settings.xml test --no-transfer-progress -Dskip.validation=true -T 2C
            - run:
                  name: Save test results
                  command: |
                      mkdir -p ~/test-results/junit/
                      find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
                  when: always
            - notify-on-failure
            - save-maven-job-cache:
                  jobName: test
            - store_test_results:
                  path: ~/test-results
            - persist_to_workspace:
                  root: .
                  paths:
                      - gravitee-apim-gateway/gravitee-apim-gateway-coverage/target/site/jacoco-aggregate/
                      - gravitee-apim-rest-api/gravitee-apim-rest-api-coverage/target/site/jacoco-aggregate/
                      - gravitee-apim-definition/gravitee-apim-definition-coverage/target/site/jacoco-aggregate/

    test-repository:
        machine:
            image: ubuntu-2004:current
        resource_class: large
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-job-cache:
                  jobName: test-repository
            - restore_cache:
                  keys:
                      - gravitee-api-management-v6-build-apim-{{ .Environment.CIRCLE_WORKFLOW_WORKSPACE_ID }}
            - run:
                  name: Run tests
                  command: |
                      # Need to use `verify` phase to get repo-test's jar build and shared to mongodb and jdbc repos 
                      # and then collect and merge all coverage reports
                      cd gravitee-apim-repository
                      mvn -s ../.gravitee.settings.xml verify --no-transfer-progress -Dskip.validation=true -T 2C
            - run:
                  name: Save test results
                  command: |
                      mkdir -p ~/test-results/junit/
                      find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
                  when: always
            - notify-on-failure
            - save-maven-job-cache:
                  jobName: test-repository
            - store_test_results:
                  path: ~/test-results
            - persist_to_workspace:
                  root: .
                  paths:
                      - gravitee-apim-repository/gravitee-apim-repository-coverage/target/site/jacoco-aggregate/

    publish-on-artifactory:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: large
        environment:
            ALT_DEPLOYMENT_REPOSITORY: "artifactory-gravitee::default::https://odbxikk7vo-artifactory.services.clever-cloud.com/gravitee-snapshots"
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-job-cache:
                  jobName: publish-on-artifactory
            - run:
                  name: "Maven Package and deploy to Artifactory ([gravitee-snapshots] repository)"
                  command: |
                      mvn deploy --no-transfer-progress -DskipTests -Dskip.validation=true -T 2C -s .gravitee.settings.xml   -DaltDeploymentRepository=${ALT_DEPLOYMENT_REPOSITORY}
            - notify-on-failure
            - save-maven-job-cache:
                  jobName: publish-on-artifactory

    publish-on-nexus:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: large
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-job-cache:
                  jobName: publish-on-nexus
            - run:
                  name: "Maven Package and deploy to Nexus Snapshots"
                  command: |
                      mvn deploy --no-transfer-progress -DskipTests -Dskip.validation=true -T 2C -s .gravitee.settings.xml
            - notify-on-failure
            - save-maven-job-cache:
                  jobName: publish-on-nexus

    publish-images-azure-registry:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: small
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - setup_remote_docker
            - get-apim-tag
            - get-apim-version
            - keeper/env-export:
                  secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/login
                  var-name: AZURE_DOCKER_REGISTRY_USERNAME
            - keeper/env-export:
                  secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/password
                  var-name: AZURE_DOCKER_REGISTRY_PASSWORD
            - run:
                  name: Build & publish dev docker image
                  command: |
                      export REST_API_PRIVATE_IMAGE_TAG=graviteeio.azurecr.io/apim-management-api:${TAG}
                      export GATEWAY_PRIVATE_IMAGE_TAG=graviteeio.azurecr.io/apim-gateway:${TAG}

                      docker build -f gravitee-apim-rest-api/docker/Dockerfile \
                      --build-arg GRAVITEEIO_VERSION=${APIM_VERSION} \
                      -t ${REST_API_PRIVATE_IMAGE_TAG} \
                      rest-api-docker-context

                      docker build -f gravitee-apim-gateway/docker/Dockerfile \
                      --build-arg GRAVITEEIO_VERSION=${APIM_VERSION} \
                      -t ${GATEWAY_PRIVATE_IMAGE_TAG} \
                      gateway-docker-context

                      echo $AZURE_DOCKER_REGISTRY_PASSWORD | docker login --username $AZURE_DOCKER_REGISTRY_USERNAME --password-stdin graviteeio.azurecr.io
                      docker push ${REST_API_PRIVATE_IMAGE_TAG}
                      docker push ${GATEWAY_PRIVATE_IMAGE_TAG}
                      docker logout graviteeio.azurecr.io
            - notify-on-failure

    e2e-lint-build:
        executor:
            name: node-lts
            class: medium
        steps:
            - checkout
            - webui-install:
                  apim-ui-project: gravitee-apim-e2e
            - attach_workspace:
                  at: .
            - run:
                  name: Check License
                  command: npm run lint:license
                  working_directory: gravitee-apim-e2e
            - run:
                  name: Run Prettier and ESLint
                  command: npm run lint
                  working_directory: gravitee-apim-e2e
            - run:
                  name: Build
                  command: npm run build
                  working_directory: gravitee-apim-e2e
            - notify-on-failure
            - persist_to_workspace:
                  root: .
                  paths:
                      - gravitee-apim-e2e/dist
                      - gravitee-apim-e2e/node_modules

    webui-lint-test:
        parameters:
            apim-ui-project:
                type: string
                default: ""
                description: the name of the UI project to build
            resource-class:
                type: string
                default: medium
        executor:
            name: node-lts
            class: << parameters.resource-class>>
        steps:
            - checkout
            - webui-install:
                  apim-ui-project: << parameters.apim-ui-project >>
            - attach_workspace:
                  at: .
            - run:
                  name: Check License
                  command: npm run lint:license
                  working_directory: << parameters.apim-ui-project >>
            - run:
                  name: Run Prettier and ESLint
                  command: npm run lint
                  working_directory: << parameters.apim-ui-project >>
            - run:
                  name: Run unit tests
                  command: npm run test:coverage
                  working_directory: << parameters.apim-ui-project >>
            - notify-on-failure
            - persist_to_workspace:
                  root: .
                  paths:
                      - << parameters.apim-ui-project >>/coverage
            - store_test_results:
                  path: << parameters.apim-ui-project >>/coverage

    webui-publish-artifactory:
        parameters:
            apim-ui-project:
                type: string
                default: ""
                description: the name of the UI project to build
        executor:
            name: node-lts
            class: small
        steps:
            - attach_workspace:
                  at: .
            - get-apim-version
            - artifactory-orb/install
            - artifactory-orb/configure
            - run:
                  name: Rename and zip dist folder
                  command: mv dist << parameters.apim-ui-project >>-${APIM_VERSION%-SNAPSHOT} && zip -r dist.zip << parameters.apim-ui-project >>-${APIM_VERSION%-SNAPSHOT}
                  working_directory: << parameters.apim-ui-project >>
            - when:
                  condition: << pipeline.parameters.dry_run>>
                  steps:
                      - artifactory-orb/upload:
                            source: << parameters.apim-ui-project >>/dist.zip
                            target: dry-run-releases/io/gravitee/apim/ui/<< parameters.apim-ui-project >>/${APIM_VERSION%-SNAPSHOT}/<< parameters.apim-ui-project >>-${APIM_VERSION%-SNAPSHOT}.zip
            - when:
                  condition:
                      not: << pipeline.parameters.dry_run>>
                  steps:
                      - artifactory-orb/upload:
                            source: << parameters.apim-ui-project >>/dist.zip
                            target: gravitee-releases/io/gravitee/apim/ui/<< parameters.apim-ui-project >>/${APIM_VERSION%-SNAPSHOT}/<< parameters.apim-ui-project >>-${APIM_VERSION%-SNAPSHOT}.zip
            - notify-on-failure

    webui-build:
        parameters:
            apim-ui-project:
                type: string
                default: ""
                description: the name of the UI project to build
            docker-image-name:
                type: string
                default: ""
                description: the name of the image
        executor:
            name: node-lts
            class: large
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - get-apim-version
            - setup_remote_docker
            - webui-install:
                  apim-ui-project: << parameters.apim-ui-project >>
            - run:
                  name: Build
                  command: npm run build:prod
                  environment:
                      NODE_OPTIONS: --max_old_space_size=4086
                      BACKEND_ENV: apim-master
                  working_directory: << parameters.apim-ui-project >>
            - build-ui-image:
                  docker-image-name: << parameters.docker-image-name >>
                  apim-ui-project: << parameters.apim-ui-project >>
            - save-image-in-workspace:
                  docker-image-name: << parameters.docker-image-name >>
            - notify-on-failure
            - persist_to_workspace:
                  root: .
                  paths:
                      - << parameters.apim-ui-project >>/dist
                      - ./docker-cache

    webui-publish-images-azure-registry:
        parameters:
            apim-ui-project:
                type: string
                default: ""
                description: the name of the UI project to build
            docker-image-name:
                type: string
                default: ""
                description: the name of the docker image to create
        docker:
            - image: cimg/openjdk:11.0
        resource_class: small
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - setup_remote_docker
            - get-apim-tag
            - get-apim-version
            - keeper/env-export:
                  secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/login
                  var-name: AZURE_DOCKER_REGISTRY_USERNAME
            - keeper/env-export:
                  secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/password
                  var-name: AZURE_DOCKER_REGISTRY_PASSWORD
            - load-image-from-workspace:
                  docker-image-name: << parameters.docker-image-name >>
            - run:
                  name: Publish Web UI Docker Image to Azure Registry
                  command: |
                      # Add new tag before pushing to Azure
                      export PRIVATE_IMAGE_TAG=graviteeio.azurecr.io/<< parameters.docker-image-name >>:$TAG
                      docker tag graviteeio.azurecr.io/<< parameters.docker-image-name >>:$APIM_VERSION $PRIVATE_IMAGE_TAG

                      echo $AZURE_DOCKER_REGISTRY_PASSWORD | docker login --username $AZURE_DOCKER_REGISTRY_USERNAME --password-stdin graviteeio.azurecr.io
                      docker push ${PRIVATE_IMAGE_TAG}
                      docker logout graviteeio.azurecr.io
                  working_directory: << parameters.apim-ui-project >>
            - notify-on-failure

    console-webui-build-storybook:
        executor:
            name: node-lts
            class: large
        steps:
            - checkout
            - webui-install:
                  apim-ui-project: gravitee-apim-console-webui
            - run:
                  name: Build
                  command: npm run build-storybook
                  working_directory: gravitee-apim-console-webui
                  environment:
                      NODE_OPTIONS: --max_old_space_size=3072
            - notify-on-failure
            - persist_to_workspace:
                  root: .
                  paths:
                      - gravitee-apim-console-webui/storybook-static

    console-webui-chromatic-deployment:
        executor:
            class: small
            name: node-lts
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - webui-install:
                  apim-ui-project: gravitee-apim-console-webui
            - keeper/env-export:
                  secret-url: keeper://TIlcGPFq4rN5GvgnZb9hng/field/password
                  var-name: GITHUB_TOKEN
            - run:
                  name: Running Chromatic
                  # TODO:
                  #  - Handle npx chromatic command failure, make the job fails
                  #  - Create a new project in Chromatic and update the token
                  #  - Move CHROMATIC_PROJECT_TOKEN token in keeper instead of env var
                  command: |
                      SB_URL=$(cd gravitee-apim-console-webui && npx chromatic --project-token=$CHROMATIC_PROJECT_TOKEN --exit-once-uploaded -d=storybook-static | grep -o "View your Storybook at https:\/\/[0-9a-z-]*\.chromatic\.com" | grep -o "https:.*")
                      echo "export SB_URL=$SB_URL" >> $BASH_ENV
            - gh/setup
            - run:
                  name: Edit Pull Request Description
                  command: |
                      # First check there is an associated pull request, otherwise just stop the job here
                      if ! gh pr view --json title;
                      then
                        echo "No PR found for this branch, stopping the job here."
                        exit 0
                      fi

                      # If PR state is different from OPEN
                      if [ "$(gh pr view --json state --jq .state)" != "OPEN" ];
                      then
                        echo "PR is not opened, stopping the job here."
                        exit 0
                      fi

                      export PR_BODY_STORYBOOK_SECTION="
                      <!-- Storybook placeholder -->
                      ---

                      📚&nbsp;&nbsp;View the storybook of this branch [here](${SB_URL})
                      <!-- Storybook placeholder end -->
                      "

                      export CLEAN_BODY=$(gh pr view --json body --jq .body | sed '/Storybook placeholder -->/,/Storybook placeholder end -->/d')

                      gh pr edit --body "$CLEAN_BODY$PR_BODY_STORYBOOK_SECTION"
            - notify-on-failure

    console-webui-deploy-on-azure-storage:
        executor:
            name: azure-cli
            resource_class: small
        steps:
            - attach_workspace:
                  at: .
            - keeper/env-export:
                  secret-url: keeper://UryantA7MvZe8fkWwcUt8g/field/login
                  var-name: AZURE_APPLICATION_ID
            - keeper/env-export:
                  secret-url: keeper://UryantA7MvZe8fkWwcUt8g/custom_field/tenant
                  var-name: AZURE_TENANT
            - keeper/env-export:
                  secret-url: keeper://UryantA7MvZe8fkWwcUt8g/field/password
                  var-name: AZURE_APPLICATION_SECRET
            - run:
                  name: Login into Azure Storage and upload dist
                  # TODO:
                  #  - Update CircleCI env var AZURE_STORAGE_CONNECTION_STRING (one for Console, one for Portal)
                  command: |
                      export BRANCH_ID=$(echo "$CIRCLE_BRANCH" | sed -E 's/[~^]+//g' | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+|-+$//g' | tr "[:upper:]" "[:lower:]" | cut -c -60)
                      az login --service-principal -u $AZURE_APPLICATION_ID --tenant $AZURE_TENANT -p $AZURE_APPLICATION_SECRET
                      sed -i 's#<base href="/" />##' gravitee-apim-console-webui/dist/index.html
                      az storage blob upload-batch --overwrite true -s gravitee-apim-console-webui/dist -d "\$web/$BRANCH_ID"
            - notify-on-failure

    console-webui-comment-pr-after-deployment:
        executor:
            name: node-lts
            class: small
        steps:
            - checkout
            - keeper/env-export:
                  secret-url: keeper://TIlcGPFq4rN5GvgnZb9hng/field/password
                  var-name: GITHUB_TOKEN
            - gh/setup
            - run:
                  name: Edit Pull Request Description
                  command: |
                      # First check there is an associated pull request, otherwise just stop the job here
                      if ! gh pr view --json title;
                      then
                        echo "No PR found for this branch, stopping the job here."
                        exit 0
                      fi

                      # If PR state is different from OPEN
                      if [ "$(gh pr view --json state --jq .state)" != "OPEN" ];
                      then
                        echo "PR is not opened, stopping the job here."
                        exit 0
                      fi
                      export BRANCH_ID=$(echo "$CIRCLE_BRANCH" | sed -E 's/[~^]+//g' | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+|-+$//g' | tr "[:upper:]" "[:lower:]" | cut -c -60)
                      export PR_BODY_UI_SECTION="
                      <!-- UI placeholder -->
                      🚀 CI was able to deploy the build of this PR, so you can now try it directly [here](https://apimnightlywebui24386.z6.web.core.windows.net/${BRANCH_ID}/index.html)
                      _Notes_: The deployed app is linked to the management API of APIM master. (Same login and password as APIM master)
                      <!-- UI placeholder end -->
                      "

                      export CLEAN_BODY=$(gh pr view --json body --jq .body | sed '/UI placeholder -->/,/UI placeholder end -->/d')

                      gh pr edit --body "$CLEAN_BODY$PR_BODY_UI_SECTION"

            - notify-on-failure

    purge-master-azure-registry:
        executor:
            name: azure-cli
            resource_class: small
        steps:
            - run:
                  name: 🗑 Let's purge all master Apim images older than 1d
                  # TODO:
                  #  - Improve purge of other images and branches
                  command: |
                      az login --service-principal -u $AZURE_APPLICATION_ID --tenant $AZURE_TENANT -p $AZURE_APPLICATION_SECRET
                      az acr run --cmd "acr purge --filter 'apim-management-ui:master-.*' --untagged --ago 1d --keep 3" --registry graviteeio /dev/null
            - notify-on-failure

    deploy-on-azure-cluster:
        executor:
            name: azure-cli
            resource_class: small
        steps:
            - attach_workspace:
                  at: .
            - keeper/env-export:
                  secret-url: keeper://UryantA7MvZe8fkWwcUt8g/field/login
                  var-name: AZURE_APPLICATION_ID
            - keeper/env-export:
                  secret-url: keeper://UryantA7MvZe8fkWwcUt8g/custom_field/tenant
                  var-name: AZURE_TENANT
            - keeper/env-export:
                  secret-url: keeper://UryantA7MvZe8fkWwcUt8g/field/password
                  var-name: AZURE_APPLICATION_SECRET
            - run:
                  name: Install Kubectl
                  command: |
                      curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
                      chmod +x ./kubectl
                      mv ./kubectl /usr/local/bin/kubectl
                      kubectl version --client=true
            - run:
                  name: Restart APIM cluster pods
                  command: |
                      export K8S_NAME=apim-${CIRCLE_BRANCH//\./-}
                      export K8S_NAMESPACE=apim-${CIRCLE_BRANCH//\./-}

                      az login --service-principal -u $AZURE_APPLICATION_ID --tenant $AZURE_TENANT -p $AZURE_APPLICATION_SECRET
                      az aks get-credentials --resource-group apim-hprod --name apim-hprod

                      kubectl rollout restart deployment/${K8S_NAME}-apim3-api -n ${K8S_NAMESPACE}
                      kubectl rollout restart deployment/${K8S_NAME}-apim3-portal -n ${K8S_NAMESPACE}
                      kubectl rollout restart deployment/${K8S_NAME}-apim3-ui -n ${K8S_NAMESPACE}
                      kubectl rollout restart deployment/${K8S_NAME}-apim3-gateway -n ${K8S_NAMESPACE}

                      kubectl rollout restart deployment/${K8S_NAME}-jdbc-apim3-api -n ${K8S_NAMESPACE}-jdbc
                      kubectl rollout restart deployment/${K8S_NAME}-jdbc-apim3-portal -n ${K8S_NAMESPACE}-jdbc
                      kubectl rollout restart deployment/${K8S_NAME}-jdbc-apim3-ui -n ${K8S_NAMESPACE}-jdbc
                      kubectl rollout restart deployment/${K8S_NAME}-jdbc-apim3-gateway -n ${K8S_NAMESPACE}-jdbc

            - notify-on-failure

    ## Release Jobs
    backend-build-and-publish-artifactory:
        docker:
            - image: cimg/openjdk:11.0.13
        resource_class: large
        environment:
            DRY_RUN: << pipeline.parameters.dry_run >>
        steps:
            - checkout
            - restore-maven-job-cache:
                  jobName: release
            - attach_workspace:
                  at: .
            - restore-maven-job-cache:
                  jobName: backend-build-and-publish-artifactory
            - run:
                  name: Remove `-SNAPSHOT` from versions
                  command: mvn -B versions:set -DremoveSnapshot=true -DgenerateBackupPoms=false
            - run:
                  name: Update maven dependencies versions from properties
                  command: |
                      mvn versions:update-properties --batch-mode -Dmaven.version.rules.serverId=artifactory-gravitee -Dincludes="io.gravitee.*:*" -DallowMajorUpdates=false -DallowMinorUpdates=false -DallowIncrementalUpdates=true -DgenerateBackupPoms=false -Dexcludes="io.gravitee.policy:*,io.gravitee.connector:*,io.gravitee.resource:*,io.gravitee.service:*,io.gravitee.fetcher:*,io.gravitee.tracer:*,io.gravitee.repository:*,io.gravitee.reporter:*,io.gravitee.cockpit:*,io.gravitee.discovery:*,io.gravitee.notifier:*,com.graviteesource.notifier:*,com.graviteesource.policy:*" --settings .gravitee.settings.xml --update-snapshots -T 2C
            - prepare-gpg
            - prepare-env-var
            - run:
                  name: Maven deploy to Gravitee's private Artifactory
                  command: |
                      mvn -Duser.home=${HOME} --settings .gravitee.settings.xml -B -U -P gio-artifactory-release,gio-release clean deploy -DskipTests=true -Dskip.validation -T 4 --no-transfer-progress
            - save-maven-job-cache:
                  jobName: backend-build-and-publish-artifactory

    release-commit-and-prepare-next-version:
        docker:
            - image: cimg/openjdk:11.0.13
        resource_class: large

        environment:
            DRY_RUN: << pipeline.parameters.dry_run >>
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - add_ssh_keys:
                  fingerprints:
                      - "ac:88:23:8f:c6:0f:7d:f0:fc:df:73:20:34:56:02:6c"
            - keeper/env-export:
                  secret-url: keeper://IZd-yvsMopfQEa_0j1SDvg/field/login
                  var-name: GIT_USER_NAME
            - keeper/env-export:
                  secret-url: keeper://IZd-yvsMopfQEa_0j1SDvg/custom_field/email
                  var-name: GIT_USER_EMAIL
            - run:
                  name: Git config
                  command: |
                      git config --global user.name "${GIT_USER_NAME}"
                      git config --global user.email "${GIT_USER_EMAIL}"

            - run:
                  name: Git release
                  command: |
                      export MVN_PRJ_VERSION=$(mvn exec:exec -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive --quiet --settings .gravitee.settings.xml)
                      export MVN_PRJ_VERSION_MAJOR=$(echo $MVN_PRJ_VERSION | awk -F '.' '{print $1}')
                      export MVN_PRJ_VERSION_MINOR=$(echo $MVN_PRJ_VERSION | awk -F '.' '{print $2}')
                      export MVN_PRJ_VERSION_PATCH=$(echo $MVN_PRJ_VERSION | awk -F '.' '{print $3}')

                      export CURRENT_GIT_BRANCH=$(git branch --show-current)
                      export MAINTENANCE_GIT_BRANCH="${MVN_PRJ_VERSION_MAJOR}.${MVN_PRJ_VERSION_MINOR}.x"
                      export GIT_BRANCH_FILTER=$(git branch -a | grep "${MAINTENANCE_GIT_BRANCH}")

                      git add --update
                      git commit -m "${MVN_PRJ_VERSION}"
                      git tag ${MVN_PRJ_VERSION}

                      # If support branch for this version does not exist, create it, update versions, commit and push
                      if [ "x${GIT_BRANCH_FILTER}" == "x" ]; then
                        git checkout -b ${MAINTENANCE_GIT_BRANCH}
                        # Set the version to the next support version (bump patch version + '-SNAPSHOT')                        
                        mvn versions:set --batch-mode -DnextSnapshot=true -DgenerateBackupPoms=false --settings .gravitee.settings.xml
                        git add --update
                        git commit -m 'chore: prepare next version [skip ci]'
                        if [ "${DRY_RUN}" == "false" ]; then
                          echo "# --->>> NO IT IS NOT A DRY RUN : GIT PUSH"
                          git push -u origin ${MAINTENANCE_GIT_BRANCH}
                          git push --tags origin ${MAINTENANCE_GIT_BRANCH}
                        else
                          echo "# --->>> THIS IS A DRY RUN : SKIPPPING GIT PUSH"
                        fi;
                        git checkout ${CURRENT_GIT_BRANCH}
                      fi;

                      # If releasing a feature version (i.e. patch number == 0) then bump the minor version for the next 
                      if [ "${MVN_PRJ_VERSION_PATCH}" == "0" ]; then
                        export NEXT_MINOR_VERSION=$((${MVN_PRJ_VERSION_MINOR}+1))
                        export NEXT_SNAPSHOT_VERSION="${MVN_PRJ_VERSION_MAJOR}.${NEXT_MINOR_VERSION}.0-SNAPSHOT"
                        mvn -Duser.home=${HOME} -s /tmp/.gravitee.settings.xml -B versions:set -DnewVersion=${NEXT_SNAPSHOT_VERSION} -DgenerateBackupPoms=false
                        mvn versions:set --batch-mode -DnewVersion=${NEXT_SNAPSHOT_VERSION} -DgenerateBackupPoms=false --settings .gravitee.settings.xml
                      else
                        # Else just set the version to the next support version (bump patch version + '-SNAPSHOT')                        
                        mvn -Duser.home=${HOME} -s /tmp/.gravitee.settings.xml -B versions:set -DnextSnapshot=true -DgenerateBackupPoms=false
                        mvn versions:set --batch-mode -DnextSnapshot=true -DgenerateBackupPoms=false --settings .gravitee.settings.xml
                      fi;
                      git add --update
                      git commit -m 'chore: prepare next version [skip ci]'
                      if [ "${DRY_RUN}" == "false" ]; then
                        echo "# --->>> NO IT IS NOT A DRY RUN"
                        echo " so that CURRENT_GIT_BRANCH=MAINTENANCE_GIT_BRANCH"
                        git push -u origin ${CURRENT_GIT_BRANCH}
                        git push --tags origin ${CURRENT_GIT_BRANCH}
                      else
                        echo "# --->>> THIS IS A DRY RUN"
                      fi;

    publish_prod_docker_images:
        parameters:
            dry_run:
                default: true
                type: boolean
            docker_tag_as_latest:
                default: false
                type: boolean
            graviteeio_version:
                default: ""
                type: string
        docker:
            - image: cimg/base:stable
        environment:
            GRAVITEEIO_VERSION: << parameters.graviteeio_version >>
        steps:
            - setup_remote_docker
            - checkout
            - keeper/env-export:
                  secret-url: keeper://cooU9UoXIk8Kj0hsP2rkBw/field/login
                  var-name: DOCKERHUB_BOT_USER_NAME
            - keeper/env-export:
                  secret-url: keeper://cooU9UoXIk8Kj0hsP2rkBw/field/password
                  var-name: DOCKERHUB_BOT_USER_TOKEN
            - run:
                  name: "Parse GRAVITEEIO_VERSION to extract major, minor and patch version"
                  command: |
                      export GRAVITEEIO_VERSION_MAJOR=$(echo "${GRAVITEEIO_VERSION}" | awk -F '.' '{print $1}')
                      echo "export GRAVITEEIO_VERSION_MAJOR=${GRAVITEEIO_VERSION_MAJOR}" >> $BASH_ENV

                      export GRAVITEEIO_VERSION_MINOR=$(echo "${GRAVITEEIO_VERSION}" | awk -F '.' '{print $2}')
                      echo "export GRAVITEEIO_VERSION_MINOR=${GRAVITEEIO_VERSION_MINOR}" >> $BASH_ENV

                      export GRAVITEEIO_VERSION_PATCH=$(echo "${GRAVITEEIO_VERSION}" | awk -F '.' '{print $3}')
                      echo "export GRAVITEEIO_VERSION_PATCH=${GRAVITEEIO_VERSION_PATCH}" >> $BASH_ENV
            - run:
                  name: "Build & Publish Gravitee.io APIM Docker images"
                  command: |
                      export DOCKER_TAG_SUFFIX=""
                      export DOCKER_BUILD_ARGS="--build-arg GRAVITEEIO_VERSION=${GRAVITEEIO_VERSION} --build-arg GRAVITEEIO_DOWNLOAD_URL=https://download.gravitee.io/graviteeio-apim/distributions"

                      # always create x.y, x.y.z, x.y-ee, x.y.z-ee tags
                      export DOCKER_BUILD_GATEWAY_TAG="       -t graviteeio/apim-gateway:${GRAVITEEIO_VERSION_MAJOR}.${GRAVITEEIO_VERSION_MINOR}        -t graviteeio/apim-gateway:${GRAVITEEIO_VERSION}        -t graviteeio/apim-gateway:${GRAVITEEIO_VERSION_MAJOR}.${GRAVITEEIO_VERSION_MINOR}-ee        -t graviteeio/apim-gateway:${GRAVITEEIO_VERSION}-ee"
                      export DOCKER_BUILD_MANAGEMENT_API_TAG="-t graviteeio/apim-management-api:${GRAVITEEIO_VERSION_MAJOR}.${GRAVITEEIO_VERSION_MINOR} -t graviteeio/apim-management-api:${GRAVITEEIO_VERSION} -t graviteeio/apim-management-api:${GRAVITEEIO_VERSION_MAJOR}.${GRAVITEEIO_VERSION_MINOR}-ee -t graviteeio/apim-management-api:${GRAVITEEIO_VERSION}-ee"
                      export DOCKER_BUILD_MANAGEMENT_UI_TAG=" -t graviteeio/apim-management-ui:${GRAVITEEIO_VERSION_MAJOR}.${GRAVITEEIO_VERSION_MINOR}  -t graviteeio/apim-management-ui:${GRAVITEEIO_VERSION}  -t graviteeio/apim-management-ui:${GRAVITEEIO_VERSION_MAJOR}.${GRAVITEEIO_VERSION_MINOR}-ee  -t graviteeio/apim-management-ui:${GRAVITEEIO_VERSION}-ee"
                      export DOCKER_BUILD_PORTAL_UI_TAG="     -t graviteeio/apim-portal-ui:${GRAVITEEIO_VERSION_MAJOR}.${GRAVITEEIO_VERSION_MINOR}      -t graviteeio/apim-portal-ui:${GRAVITEEIO_VERSION}      -t graviteeio/apim-portal-ui:${GRAVITEEIO_VERSION_MAJOR}.${GRAVITEEIO_VERSION_MINOR}-ee      -t graviteeio/apim-portal-ui:${GRAVITEEIO_VERSION}-ee"

                      # only create x, x-ee and latest tags if it's the latest version
                      if [ "<< parameters.docker_tag_as_latest >>" == "true" ]; then
                        DOCKER_BUILD_GATEWAY_TAG+="        -t graviteeio/apim-gateway:${GRAVITEEIO_VERSION_MAJOR}           -t graviteeio/apim-gateway:${GRAVITEEIO_VERSION_MAJOR}-ee           -t graviteeio/apim-gateway:latest"
                        DOCKER_BUILD_MANAGEMENT_API_TAG+=" -t graviteeio/apim-management-api:${GRAVITEEIO_VERSION_MAJOR}    -t graviteeio/apim-management-api:${GRAVITEEIO_VERSION_MAJOR}-ee    -t graviteeio/apim-management-api:latest"
                        DOCKER_BUILD_MANAGEMENT_UI_TAG+="  -t graviteeio/apim-management-ui:${GRAVITEEIO_VERSION_MAJOR}     -t graviteeio/apim-management-ui:${GRAVITEEIO_VERSION_MAJOR}-ee     -t graviteeio/apim-management-ui:latest"
                        DOCKER_BUILD_PORTAL_UI_TAG+="      -t graviteeio/apim-portal-ui:${GRAVITEEIO_VERSION_MAJOR}         -t graviteeio/apim-portal-ui:${GRAVITEEIO_VERSION_MAJOR}-ee         -t graviteeio/apim-portal-ui:latest"
                      fi

                      docker build ${DOCKER_BUILD_ARGS} --quiet ${DOCKER_BUILD_GATEWAY_TAG}         -f ./gravitee-apim-gateway/docker/Dockerfile-from-download ./gravitee-apim-gateway/docker
                      docker build ${DOCKER_BUILD_ARGS} --quiet ${DOCKER_BUILD_MANAGEMENT_API_TAG}  -f ./gravitee-apim-rest-api/docker/Dockerfile-from-download ./gravitee-apim-rest-api/docker
                      docker build ${DOCKER_BUILD_ARGS} --quiet ${DOCKER_BUILD_MANAGEMENT_UI_TAG}   -f ./gravitee-apim-console-webui/docker/Dockerfile-from-download ./gravitee-apim-console-webui/docker
                      docker build ${DOCKER_BUILD_ARGS} --quiet ${DOCKER_BUILD_PORTAL_UI_TAG}       -f ./gravitee-apim-portal-webui/docker/Dockerfile-from-download ./gravitee-apim-portal-webui/docker

                      docker image ls

                      # Login to DockerHub
                      docker login --username="${DOCKERHUB_BOT_USER_NAME}" -p="${DOCKERHUB_BOT_USER_TOKEN}"

                      # Push all tags if not dry-run mode
                      if [ "<< parameters.dry_run >>" == "false" ]; then                    
                        docker push --all-tags graviteeio/apim-management-api
                        docker push --all-tags graviteeio/apim-gateway
                        docker push --all-tags graviteeio/apim-management-ui
                        docker push --all-tags graviteeio/apim-portal-ui
                      fi

                      # Docker logout
                      docker logout

    nexus-staging:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: xlarge
        steps:
            - checkout
            - run:
                  name: Checkout tag << pipeline.parameters.graviteeio_version >>
                  command: |
                      git checkout << pipeline.parameters.graviteeio_version >>
            - run:
                  name: Create .apim-version file for cache
                  command: |
                      # the previous cache key was computed with the SNAPSHOT version of the release. 
                      echo "<< pipeline.parameters.graviteeio_version >>-SNAPSHOT" > .apim-version.txt
            - restore-maven-job-cache:
                  jobName: nexus-staging

            - attach_workspace:
                  at: .
            - prepare-gpg
            - run:
                  name: Release on Nexus
                  command: |
                      mvn clean deploy --activate-profiles gravitee-release --batch-mode -DskipTests -Dskip.validation=true --settings .gravitee.settings.xml --update-snapshots
            - save-maven-job-cache:
                  jobName: nexus-staging

    jdbc-test-container:
        parameters:
            version:
                type: string
                description: type and version of the database to test
                default: ""
        machine:
            image: ubuntu-2004:current
            docker_layer_caching: true
        resource_class: large
        steps:
            - when:
                  condition: << parameters.version >>
                  steps:
                      - checkout
                      - attach_workspace:
                            at: .
                      - restore-maven-job-cache:
                            jobName: jdbc-test-container
                      - run:
                            name: Run tests
                            command: |
                                cd gravitee-apim-repository
                                mvn -pl 'gravitee-apim-repository-jdbc' -am -s ../.gravitee.settings.xml clean package --no-transfer-progress -Dskip.validation=true -DjdbcType=<< parameters.version>> -T 2C
                      - run:
                            name: Save test results
                            command: |
                                mkdir -p ~/test-results/junit/
                                find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
                            when: always
                      - save-maven-job-cache:
                            jobName: jdbc-test-container
                      - store_test_results:
                            path: ~/test-results
                      - notify-on-failure
            - when:
                  condition:
                      not: << parameters.version >>
                  steps:
                      - run:
                            name: Version not set - nothing to run
                            command: exit 0

    mongo-test-container:
        parameters:
            version:
                type: string
                description: version of the database to test
                default: ""
        machine:
            image: ubuntu-2004:current
        resource_class: medium
        steps:
            - when:
                  condition: << parameters.version >>
                  steps:
                      - checkout
                      - attach_workspace:
                            at: .
                      - restore-maven-job-cache:
                            jobName: mongo-test-container
                      - run:
                            name: Run repository tests with MongoDB << parameters.version >>
                            command: |
                                cd gravitee-apim-repository
                                mvn -pl 'gravitee-apim-repository-mongodb' -am -s ../.gravitee.settings.xml clean package --no-transfer-progress -Dskip.validation=true -DmongoVersion=<< parameters.version>> -T 2C
                      - run:
                            name: Save test results
                            command: |
                                mkdir -p ~/test-results/junit/
                                find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
                            when: always
                      - save-maven-job-cache:
                            jobName: mongo-test-container
                      - store_test_results:
                            path: ~/test-results
                      - notify-on-failure
            - when:
                  condition:
                      not: << parameters.version >>
                  steps:
                      - run:
                            name: Version not set - nothing to run
                            command: exit 0

    e2e-test:
        machine:
            image: ubuntu-2004:202101-01
        resource_class: medium
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - get-apim-version
            - load-image-from-workspace:
                  docker-image-name: apim-gateway
            - load-image-from-workspace:
                  docker-image-name: apim-management-api
            - run:
                  name: Run API & e2e tests
                  command: |
                      cd gravitee-apim-e2e
                      APIM_REGISTRY=graviteeio.azurecr.io APIM_TAG=$APIM_VERSION npm run test:api
            - notify-on-failure

    e2e-cypress:
        machine:
            image: ubuntu-2004:202101-01
        resource_class: medium
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - get-apim-version
            - load-image-from-workspace:
                  docker-image-name: apim-gateway
            - load-image-from-workspace:
                  docker-image-name: apim-management-api
            - load-image-from-workspace:
                  docker-image-name: apim-management-ui
            - load-image-from-workspace:
                  docker-image-name: apim-portal-ui
            - webui-install:
                  apim-ui-project: gravitee-apim-e2e
            - run:
                  name: Run UI tests
                  command: |
                      cd gravitee-apim-e2e
                      APIM_REGISTRY=graviteeio.azurecr.io APIM_TAG=$APIM_VERSION npm run test:ui
            - notify-on-failure

    publish_rpm_packages:
        parameters:
            dry_run:
                default: true
                type: boolean
            graviteeio_version:
                type: string
                default: ""
        machine:
            image: ubuntu-2004:202201-01
        resource_class: medium
        steps:
            - keeper/env-export:
                  secret-url: keeper://8CG6HxY5gYsl-85eJKuIoA/field/password
                  var-name: GIO_PACKAGECLOUD_TOKEN
            - run:
                  name: "Building and publishing RPMs"
                  command: |
                      export GIT_GRAVITEE_PACKAGES_REPO=$(mktemp -d)
                      git clone git@github.com:gravitee-io/packages.git ${GIT_GRAVITEE_PACKAGES_REPO}

                      cd ${GIT_GRAVITEE_PACKAGES_REPO}/apim/3.x
                      ./build.sh -v << parameters.graviteeio_version >>

                      if [ "<< parameters.dry_run >>" == "false" ]; then
                          docker run --rm -v "${GIT_GRAVITEE_PACKAGES_REPO}/apim/3.x:/packages" -e PACKAGECLOUD_TOKEN=${GIO_PACKAGECLOUD_TOKEN} digitalocean/packagecloud push --yes --skip-errors --verbose graviteeio/rpms/el/7 /packages/*.rpm
                      else
                          echo "This is just a DRY RUN, no RPMs will be published"
                      fi;

    package-bundle:
        docker:
            - image: cimg/python:3.10
        resource_class: medium
        environment:
            RELEASE_VERSION: << pipeline.parameters.graviteeio_version >>
        steps:
            - keeper/env-export:
                  secret-url: keeper://R7NuqoW0KD-8l-kjx0-PgQ/field/login
                  var-name: ARTIFACTORY_USERNAME
            - keeper/env-export:
                  secret-url: keeper://R7NuqoW0KD-8l-kjx0-PgQ/field/password
                  var-name: ARTIFACTORY_PASSWORD
            - checkout
            - run:
                  name: "Install python libraries"
                  command: |
                      pip install requests

            - run:
                  name: "Building package bundle"
                  command: |
                      python .circleci/package_bundles.py
            - run:
                  name: "Prepare bundles for uploading"
                  command: |
                      workingDir=$(pwd)

                      ####################
                      #Distribution - Full                                            
                      ####################
                      mkdir -p graviteeio-apim/distributions
                      cp ./tmp/${RELEASE_VERSION}/dist/graviteeio-full-${RELEASE_VERSION}.zip graviteeio-apim/distributions/

                      cd graviteeio-apim/distributions

                      md5sum graviteeio-full-${RELEASE_VERSION}.zip > graviteeio-full-${RELEASE_VERSION}.zip.md5
                      sha512sum graviteeio-full-${RELEASE_VERSION}.zip > graviteeio-full-${RELEASE_VERSION}.zip.sha512sum
                      sha1sum graviteeio-full-${RELEASE_VERSION}.zip > graviteeio-full-${RELEASE_VERSION}.zip.sha1

                      cd $workingDir

                      #####################
                      #Components - Gateway
                      #####################
                      mkdir -p graviteeio-apim/components/gravitee-gateway
                      cp ./tmp/${RELEASE_VERSION}/gatewas/gravitee-apim-gateway-standalone-distribution-zip-${RELEASE_VERSION}.zip graviteeio-apim/components/gravitee-gateway/gravitee-apim-gateway-${RELEASE_VERSION}.zip

                      cd graviteeio-apim/components/gravitee-gateway

                      md5sum gravitee-apim-gateway-${RELEASE_VERSION}.zip > gravitee-apim-gateway-${RELEASE_VERSION}.zip.md5
                      sha512sum gravitee-apim-gateway-${RELEASE_VERSION}.zip > gravitee-apim-gateway-${RELEASE_VERSION}.zip.sha512sum
                      sha1sum gravitee-apim-gateway-${RELEASE_VERSION}.zip > gravitee-apim-gateway-${RELEASE_VERSION}.zip.sha1

                      cd $workingDir

                      ######################
                      #Components - Rest API
                      ######################
                      mkdir -p graviteeio-apim/components/gravitee-management-rest-api
                      cp ./tmp/${RELEASE_VERSION}/rests/gravitee-apim-rest-api-standalone-distribution-zip-${RELEASE_VERSION}.zip graviteeio-apim/components/gravitee-management-rest-api/gravitee-apim-rest-api-${RELEASE_VERSION}.zip

                      cd graviteeio-apim/components/gravitee-management-rest-api

                      md5sum gravitee-apim-rest-api-${RELEASE_VERSION}.zip > gravitee-apim-rest-api-${RELEASE_VERSION}.zip.md5
                      sha512sum gravitee-apim-rest-api-${RELEASE_VERSION}.zip > gravitee-apim-rest-api-${RELEASE_VERSION}.zip.sha512sum
                      sha1sum gravitee-apim-rest-api-${RELEASE_VERSION}.zip > gravitee-apim-rest-api-${RELEASE_VERSION}.zip.sha1

                      cd $workingDir

                      #####################
                      #Components - Console
                      #####################
                      mkdir -p graviteeio-apim/components/gravitee-management-webui
                      cp ./tmp/${RELEASE_VERSION}/consoles/gravitee-apim-console-webui-${RELEASE_VERSION}.zip graviteeio-apim/components/gravitee-management-webui/

                      cd graviteeio-apim/components/gravitee-management-webui

                      md5sum gravitee-apim-console-webui-${RELEASE_VERSION}.zip > gravitee-apim-console-webui-${RELEASE_VERSION}.zip.md5
                      sha512sum gravitee-apim-console-webui-${RELEASE_VERSION}.zip > gravitee-apim-console-webui-${RELEASE_VERSION}.zip.sha512sum
                      sha1sum gravitee-apim-console-webui-${RELEASE_VERSION}.zip > gravitee-apim-console-webui-${RELEASE_VERSION}.zip.sha1

                      cd $workingDir

                      ####################
                      #Components - Portal
                      ####################
                      mkdir -p graviteeio-apim/components/gravitee-portal-webui
                      cp ./tmp/${RELEASE_VERSION}/portals/gravitee-apim-portal-webui-${RELEASE_VERSION}.zip graviteeio-apim/components/gravitee-portal-webui/

                      cd graviteeio-apim/components/gravitee-portal-webui

                      md5sum gravitee-apim-portal-webui-${RELEASE_VERSION}.zip > gravitee-apim-portal-webui-${RELEASE_VERSION}.zip.md5
                      sha512sum gravitee-apim-portal-webui-${RELEASE_VERSION}.zip > gravitee-apim-portal-webui-${RELEASE_VERSION}.zip.sha512sum
                      sha1sum gravitee-apim-portal-webui-${RELEASE_VERSION}.zip > gravitee-apim-portal-webui-${RELEASE_VERSION}.zip.sha1

                      cd $workingDir

                      #############
                      #Repositories 
                      #############
                      for repositoryZipFile in $(find ./tmp/${RELEASE_VERSION}/repositories/ -name '*.zip' | sed "s#./tmp/${RELEASE_VERSION}/repositories/##"); do
                        # compute the destination folder on S3 to publish the artefact
                        # e.g. gravitee-my-project-1.14.0.zip => graviteeio-apim/plugins/repositories/gravitee-my-project
                        artefactFolderToSync=graviteeio-apim/plugins/repositories/${repositoryZipFile%-*p}                                               

                        mkdir -p $artefactFolderToSync
                        cp ./tmp/${RELEASE_VERSION}/repositories/$repositoryZipFile $artefactFolderToSync/

                        cd $artefactFolderToSync

                        md5sum $repositoryZipFile > $repositoryZipFile.md5
                        sha512sum $repositoryZipFile > $repositoryZipFile.sha512sum
                        sha1sum $repositoryZipFile > $repositoryZipFile.sha1

                        cd $workingDir
                      done
            - keeper/env-export:
                  secret-url: keeper://Mqmplmfu17bDR5XRLmO1mQ/field/password
                  var-name: AWS_ACCESS_KEY_ID
            - keeper/env-export:
                  secret-url: keeper://3-pU56sIqcyWWw7HxhxjaQ/field/password
                  var-name: AWS_SECRET_ACCESS_KEY
            - aws-s3/sync:
                  arguments: |
                      --endpoint-url https://cellar-c2.services.clever-cloud.com \
                      --acl public-read
                  from: graviteeio-apim
                  to: "s3://gravitee-releases-downloads/graviteeio-apim"

workflows:
    pull_requests:
        when:
            and:
                - equal: [pull_requests, << pipeline.parameters.gio_action >>]
        jobs:
            - setup:
                  context: cicd-orchestrator
            - validate:
                  context: gravitee-qa
                  requires:
                      - setup
            - build:
                  context: gravitee-qa
                  requires:
                      - validate
            - build-images:
                  requires:
                      - build
            - test:
                  requires:
                      - build
            - sonarcloud-analysis:
                  name: Sonar - << matrix.working_directory >>
                  matrix:
                      parameters:
                          working_directory:
                              - gravitee-apim-rest-api
                              - gravitee-apim-gateway
                              - gravitee-apim-definition
                  context: cicd-orchestrator
                  requires:
                      - test
            - test-repository:
                  requires:
                      - build
            - sonarcloud-analysis:
                  name: Sonar - gravitee-apim-repository
                  working_directory: gravitee-apim-repository
                  context: cicd-orchestrator
                  requires:
                      - test-repository
            - publish-on-artifactory:
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
                              - refactor-distribution-build-process
                  requires:
                      - test
                      - test-repository
            - publish-on-nexus:
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
                              - refactor-distribution-build-process
                  requires:
                      - test
                      - test-repository
            - publish-images-azure-registry:
                  name: Publish images on azure registry
                  context: cicd-orchestrator
                  requires:
                      - test
                      - test-repository
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
            - webui-lint-test:
                  name: Lint & test APIM Console
                  apim-ui-project: gravitee-apim-console-webui
                  requires:
                      - setup
            - sonarcloud-analysis:
                  name: Sonar - gravitee-apim-console-webui
                  working_directory: gravitee-apim-console-webui
                  context: cicd-orchestrator
                  requires:
                      - Lint & test APIM Console
            - console-webui-build-storybook:
                  name: Build Console Storybook
                  requires:
                      - setup
            - console-webui-chromatic-deployment:
                  context: cicd-orchestrator
                  requires:
                      - Build Console Storybook
                      - test-repository
                      - test
            - webui-build:
                  name: Build APIM Console
                  apim-ui-project: gravitee-apim-console-webui
                  docker-image-name: apim-management-ui
                  requires:
                      - setup
            - console-webui-deploy-on-azure-storage:
                  context: cicd-orchestrator
                  requires:
                      - Build APIM Console
            - console-webui-comment-pr-after-deployment:
                  context: cicd-orchestrator
                  requires:
                      - console-webui-deploy-on-azure-storage
            - webui-publish-images-azure-registry:
                  name: Build and publish APIM Console docker image
                  apim-ui-project: gravitee-apim-console-webui
                  docker-image-name: apim-management-ui
                  context: cicd-orchestrator
                  requires:
                      - Build APIM Console
                      - setup
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
            - webui-lint-test:
                  name: Lint & test APIM Portal
                  apim-ui-project: gravitee-apim-portal-webui
                  resource-class: large
                  requires:
                      - setup
            - sonarcloud-analysis:
                  name: Sonar - gravitee-apim-portal-webui
                  working_directory: gravitee-apim-portal-webui
                  context: cicd-orchestrator
                  requires:
                      - Lint & test APIM Portal
            - webui-build:
                  name: Build APIM Portal
                  apim-ui-project: gravitee-apim-portal-webui
                  docker-image-name: apim-portal-ui
                  requires:
                      - setup
            - webui-publish-images-azure-registry:
                  name: Build and publish APIM Portal docker image
                  apim-ui-project: gravitee-apim-portal-webui
                  docker-image-name: apim-portal-ui
                  context: cicd-orchestrator
                  requires:
                      - Build APIM Portal
                      - setup
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
            - deploy-on-azure-cluster:
                  context: cicd-orchestrator
                  requires:
                      - Publish images on azure registry
                      - Build and publish APIM Console docker image
                      - Build and publish APIM Portal docker image
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
                  # To be modified when testing strategy will be defined
            - e2e-lint-build:
                  name: Lint & Build APIM e2e
                  requires:
                      - setup
            - e2e-test:
                  name: Test APIM e2e
                  requires:
                      - Lint & Build APIM e2e
                      - build-images
                  filters:
                      branches:
                          only:
                              - master
                              - /.*-run-e2e.*/
            - e2e-cypress:
                  name: Run Cypress UI tests
                  requires:
                      - Build APIM Portal
                      - Build APIM Console
                      - build-images
                  filters:
                      branches:
                          only:
                              - master
                              - /.*-run-e2e.*/

    build_rpm_&_docker_images:
        when:
            equal: [build_rpm_&_docker_images, << pipeline.parameters.gio_action >>]
        jobs:
            - publish_prod_docker_images:
                  graviteeio_version: << pipeline.parameters.graviteeio_version >>
                  docker_tag_as_latest: << pipeline.parameters.docker_tag_as_latest >>
                  dry_run: << pipeline.parameters.dry_run >>
                  context: cicd-orchestrator
                  name: Build and push docker images for APIM << pipeline.parameters.graviteeio_version >><<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>
            - publish_rpm_packages:
                  context: cicd-orchestrator
                  graviteeio_version: << pipeline.parameters.graviteeio_version >>
                  dry_run: << pipeline.parameters.dry_run >>
                  name: Build and push RPM packages for APIM << pipeline.parameters.graviteeio_version >><<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>

    release:
        when:
            equal: [release, << pipeline.parameters.gio_action >>]
        jobs:
            # Prepare
            - setup:
                  context: cicd-orchestrator

            # APIM Portal
            - webui-lint-test:
                  name: Lint & Test APIM Portal
                  apim-ui-project: gravitee-apim-portal-webui
                  resource-class: large
                  requires:
                      - setup
            - webui-build:
                  name: Build APIM Portal
                  apim-ui-project: gravitee-apim-portal-webui
                  requires:
                      - setup
            - webui-publish-artifactory:
                  name: Publish APIM Portal to artifactory
                  apim-ui-project: gravitee-apim-portal-webui
                  requires:
                      - Build APIM Portal
                      - Lint & Test APIM Portal

            # APIM Console
            - webui-lint-test:
                  name: Lint & Test APIM Console
                  apim-ui-project: gravitee-apim-console-webui
                  resource-class: large
                  requires:
                      - setup
            - webui-build:
                  name: Build APIM Console
                  apim-ui-project: gravitee-apim-console-webui
                  requires:
                      - setup
            - webui-publish-artifactory:
                  name: Publish APIM Console to artifactory
                  apim-ui-project: gravitee-apim-console-webui
                  requires:
                      - Build APIM Console
                      - Lint & Test APIM Console

            # APIM Backend
            - backend-build-and-publish-artifactory:
                  name: Backend build and publish to artifactory
                  requires:
                      - setup
                  context: cicd-orchestrator

            # Commit and set next version
            - release-commit-and-prepare-next-version:
                  name: Commit and prepare next version
                  requires:
                      - Backend build and publish to artifactory
                      - Publish APIM Console to artifactory
                      - Publish APIM Portal to artifactory
                  context: cicd-orchestrator

    package_bundle:
        when:
            equal: [package_bundle, << pipeline.parameters.gio_action >>]
        jobs:
            - package-bundle:
                  context: cicd-orchestrator
    # ---
    # Workflow For APIM Orchestrated Nexus Staging
    nexus_staging:
        when:
            equal: [nexus_staging, << pipeline.parameters.gio_action >>]
        jobs:
            - setup:
                  context: cicd-orchestrator
            - nexus-staging:
                  context: cicd-orchestrator
                  requires:
                      - setup

    db_repositories_test_container:
        triggers:
            - schedule:
                  cron: "0 12 * * *"
                  filters:
                      branches:
                          only:
                              - master
        jobs:
            - setup:
                  context: cicd-orchestrator
            - jdbc-test-container:
                  requires:
                      - setup
                  matrix:
                      parameters:
                          version:
                              [
                                  "postgresql~9.6.24",
                                  "postgresql~10.20",
                                  "postgresql~11.15",
                                  "postgresql~12.10",
                                  "postgresql~13.6",
                                  "mariadb~10.1.48",
                                  "mariadb~10.2.43",
                                  "mariadb~10.3.34",
                                  "mariadb~10.4.24",
                                  "mysql~5.7.37",
                                  "mysql~8.0.28",
                                  "sqlserver~2017-CU12",
                              ]
            - mongo-test-container:
                  requires:
                      - setup
                  matrix:
                      parameters:
                          version: ["3", "4", "5"]
