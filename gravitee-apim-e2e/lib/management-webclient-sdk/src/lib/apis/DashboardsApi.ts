/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DashboardEntity,
    DashboardEntityFromJSON,
    DashboardEntityToJSON,
    NewDashboardEntity,
    NewDashboardEntityFromJSON,
    NewDashboardEntityToJSON,
    UpdateDashboardEntity,
    UpdateDashboardEntityFromJSON,
    UpdateDashboardEntityToJSON,
} from '../models';

export interface CreateDashboardRequest {
    envId: string;
    orgId: string;
    newDashboardEntity: NewDashboardEntity;
}

export interface DeleteDashboardRequest {
    dashboardId: string;
    envId: string;
    orgId: string;
}

export interface GetDashboardRequest {
    dashboardId: string;
    envId: string;
    orgId: string;
}

export interface GetDashboardsRequest {
    referenceType?: GetDashboardsReferenceTypeEnum;
    envId: string;
    orgId: string;
}

export interface UpdateDashboardRequest {
    dashboardId: string;
    envId: string;
    orgId: string;
    updateDashboardEntity: UpdateDashboardEntity;
}

/**
 * 
 */
export class DashboardsApi extends runtime.BaseAPI {

    /**
     * User must have the MANAGEMENT_DASHBOARD[CREATE] permission to use this service
     * Create a platform dashboard
     */
    async createDashboardRaw(requestParameters: CreateDashboardRequest): Promise<runtime.ApiResponse<DashboardEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createDashboard.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createDashboard.');
        }

        if (requestParameters.newDashboardEntity === null || requestParameters.newDashboardEntity === undefined) {
            throw new runtime.RequiredError('newDashboardEntity','Required parameter requestParameters.newDashboardEntity was null or undefined when calling createDashboard.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/dashboards`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewDashboardEntityToJSON(requestParameters.newDashboardEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DashboardEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_DASHBOARD[CREATE] permission to use this service
     * Create a platform dashboard
     */
    async createDashboard(requestParameters: CreateDashboardRequest): Promise<DashboardEntity> {
        const response = await this.createDashboardRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_DASHBOARD[DELETE] permission to use this service
     * Delete a platform dashboard
     */
    async deleteDashboardRaw(requestParameters: DeleteDashboardRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.dashboardId === null || requestParameters.dashboardId === undefined) {
            throw new runtime.RequiredError('dashboardId','Required parameter requestParameters.dashboardId was null or undefined when calling deleteDashboard.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteDashboard.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteDashboard.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/dashboards/{dashboardId}`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters.dashboardId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_DASHBOARD[DELETE] permission to use this service
     * Delete a platform dashboard
     */
    async deleteDashboard(requestParameters: DeleteDashboardRequest): Promise<void> {
        await this.deleteDashboardRaw(requestParameters);
    }

    /**
     * User must have the MANAGEMENT_DASHBOARD[READ] permission to use this service
     * Retrieve a platform dashboard
     */
    async getDashboardRaw(requestParameters: GetDashboardRequest): Promise<runtime.ApiResponse<DashboardEntity>> {
        if (requestParameters.dashboardId === null || requestParameters.dashboardId === undefined) {
            throw new runtime.RequiredError('dashboardId','Required parameter requestParameters.dashboardId was null or undefined when calling getDashboard.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getDashboard.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getDashboard.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/dashboards/{dashboardId}`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters.dashboardId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DashboardEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_DASHBOARD[READ] permission to use this service
     * Retrieve a platform dashboard
     */
    async getDashboard(requestParameters: GetDashboardRequest): Promise<DashboardEntity> {
        const response = await this.getDashboardRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve the list of platform dashboards
     */
    async getDashboardsRaw(requestParameters: GetDashboardsRequest): Promise<runtime.ApiResponse<Array<DashboardEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getDashboards.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getDashboards.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.referenceType !== undefined) {
            queryParameters['reference_type'] = requestParameters.referenceType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/dashboards`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DashboardEntityFromJSON));
    }

    /**
     * Retrieve the list of platform dashboards
     */
    async getDashboards(requestParameters: GetDashboardsRequest): Promise<Array<DashboardEntity>> {
        const response = await this.getDashboardsRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_DASHBOARD[UPDATE] permission to use this service
     * Update a platform dashboard
     */
    async updateDashboardRaw(requestParameters: UpdateDashboardRequest): Promise<runtime.ApiResponse<DashboardEntity>> {
        if (requestParameters.dashboardId === null || requestParameters.dashboardId === undefined) {
            throw new runtime.RequiredError('dashboardId','Required parameter requestParameters.dashboardId was null or undefined when calling updateDashboard.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateDashboard.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateDashboard.');
        }

        if (requestParameters.updateDashboardEntity === null || requestParameters.updateDashboardEntity === undefined) {
            throw new runtime.RequiredError('updateDashboardEntity','Required parameter requestParameters.updateDashboardEntity was null or undefined when calling updateDashboard.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/dashboards/{dashboardId}`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters.dashboardId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDashboardEntityToJSON(requestParameters.updateDashboardEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DashboardEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_DASHBOARD[UPDATE] permission to use this service
     * Update a platform dashboard
     */
    async updateDashboard(requestParameters: UpdateDashboardRequest): Promise<DashboardEntity> {
        const response = await this.updateDashboardRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetDashboardsReferenceTypeEnum {
    PLATFORM = 'PLATFORM',
    API = 'API',
    APPLICATION = 'APPLICATION',
    HOME = 'HOME'
}
