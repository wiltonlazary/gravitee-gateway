/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    IdentityProviderEntity,
    IdentityProviderEntityFromJSON,
    IdentityProviderEntityToJSON,
    IdentityProviderListItem,
    IdentityProviderListItemFromJSON,
    IdentityProviderListItemToJSON,
    NewIdentityProviderEntity,
    NewIdentityProviderEntityFromJSON,
    NewIdentityProviderEntityToJSON,
    SocialIdentityProviderEntity,
    SocialIdentityProviderEntityFromJSON,
    SocialIdentityProviderEntityToJSON,
    UpdateIdentityProviderEntity,
    UpdateIdentityProviderEntityFromJSON,
    UpdateIdentityProviderEntityToJSON,
} from '../models';

export interface CreateIdentityProviderRequest {
    orgId: string;
    newIdentityProviderEntity: NewIdentityProviderEntity;
}

export interface CreateIdentityProvider1Request {
    envId: string;
    orgId: string;
    newIdentityProviderEntity: NewIdentityProviderEntity;
}

export interface DeleteIdentityProviderRequest {
    identityProvider: string;
    orgId: string;
}

export interface DeleteIdentityProvider1Request {
    identityProvider: string;
    envId: string;
    orgId: string;
}

export interface GetIdentityProviderRequest {
    identityProvider: string;
    orgId: string;
}

export interface GetIdentityProvider1Request {
    identityProvider: string;
    envId: string;
    orgId: string;
}

export interface GetIdentityProvidersRequest {
    orgId: string;
}

export interface GetIdentityProviders1Request {
    envId: string;
    orgId: string;
}

export interface GetSocialIdentityProvidersRequest {
    envId: string;
    orgId: string;
}

export interface GetSocialIdentityProviders1Request {
    orgId: string;
}

export interface UpdateIdentityProviderRequest {
    identityProvider: string;
    orgId: string;
    updateIdentityProviderEntity: UpdateIdentityProviderEntity;
}

export interface UpdateIdentityProvider1Request {
    identityProvider: string;
    envId: string;
    orgId: string;
    updateIdentityProviderEntity: UpdateIdentityProviderEntity;
}

/**
 * 
 */
export class IdentityProvidersApi extends runtime.BaseAPI {

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[CREATE] permission to use this service
     * Create an identity provider
     */
    async createIdentityProviderRaw(requestParameters: CreateIdentityProviderRequest): Promise<runtime.ApiResponse<IdentityProviderEntity>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createIdentityProvider.');
        }

        if (requestParameters.newIdentityProviderEntity === null || requestParameters.newIdentityProviderEntity === undefined) {
            throw new runtime.RequiredError('newIdentityProviderEntity','Required parameter requestParameters.newIdentityProviderEntity was null or undefined when calling createIdentityProvider.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/identities`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewIdentityProviderEntityToJSON(requestParameters.newIdentityProviderEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[CREATE] permission to use this service
     * Create an identity provider
     */
    async createIdentityProvider(requestParameters: CreateIdentityProviderRequest): Promise<IdentityProviderEntity> {
        const response = await this.createIdentityProviderRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[CREATE] permission to use this service
     * Create an identity provider
     */
    async createIdentityProvider1Raw(requestParameters: CreateIdentityProvider1Request): Promise<runtime.ApiResponse<IdentityProviderEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createIdentityProvider1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createIdentityProvider1.');
        }

        if (requestParameters.newIdentityProviderEntity === null || requestParameters.newIdentityProviderEntity === undefined) {
            throw new runtime.RequiredError('newIdentityProviderEntity','Required parameter requestParameters.newIdentityProviderEntity was null or undefined when calling createIdentityProvider1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/identities`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewIdentityProviderEntityToJSON(requestParameters.newIdentityProviderEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[CREATE] permission to use this service
     * Create an identity provider
     */
    async createIdentityProvider1(requestParameters: CreateIdentityProvider1Request): Promise<IdentityProviderEntity> {
        const response = await this.createIdentityProvider1Raw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[DELETE] permission to use this service
     * Delete an identity provider
     */
    async deleteIdentityProviderRaw(requestParameters: DeleteIdentityProviderRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.identityProvider === null || requestParameters.identityProvider === undefined) {
            throw new runtime.RequiredError('identityProvider','Required parameter requestParameters.identityProvider was null or undefined when calling deleteIdentityProvider.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteIdentityProvider.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/identities/{identityProvider}`.replace(`{${"identityProvider"}}`, encodeURIComponent(String(requestParameters.identityProvider))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[DELETE] permission to use this service
     * Delete an identity provider
     */
    async deleteIdentityProvider(requestParameters: DeleteIdentityProviderRequest): Promise<void> {
        await this.deleteIdentityProviderRaw(requestParameters);
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[DELETE] permission to use this service
     * Delete an identity provider
     */
    async deleteIdentityProvider1Raw(requestParameters: DeleteIdentityProvider1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.identityProvider === null || requestParameters.identityProvider === undefined) {
            throw new runtime.RequiredError('identityProvider','Required parameter requestParameters.identityProvider was null or undefined when calling deleteIdentityProvider1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteIdentityProvider1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteIdentityProvider1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/identities/{identityProvider}`.replace(`{${"identityProvider"}}`, encodeURIComponent(String(requestParameters.identityProvider))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[DELETE] permission to use this service
     * Delete an identity provider
     */
    async deleteIdentityProvider1(requestParameters: DeleteIdentityProvider1Request): Promise<void> {
        await this.deleteIdentityProvider1Raw(requestParameters);
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[READ] permission to use this service
     * Get an identity provider
     */
    async getIdentityProviderRaw(requestParameters: GetIdentityProviderRequest): Promise<runtime.ApiResponse<IdentityProviderEntity>> {
        if (requestParameters.identityProvider === null || requestParameters.identityProvider === undefined) {
            throw new runtime.RequiredError('identityProvider','Required parameter requestParameters.identityProvider was null or undefined when calling getIdentityProvider.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getIdentityProvider.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/identities/{identityProvider}`.replace(`{${"identityProvider"}}`, encodeURIComponent(String(requestParameters.identityProvider))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[READ] permission to use this service
     * Get an identity provider
     */
    async getIdentityProvider(requestParameters: GetIdentityProviderRequest): Promise<IdentityProviderEntity> {
        const response = await this.getIdentityProviderRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[READ] permission to use this service
     * Get an identity provider
     */
    async getIdentityProvider1Raw(requestParameters: GetIdentityProvider1Request): Promise<runtime.ApiResponse<IdentityProviderEntity>> {
        if (requestParameters.identityProvider === null || requestParameters.identityProvider === undefined) {
            throw new runtime.RequiredError('identityProvider','Required parameter requestParameters.identityProvider was null or undefined when calling getIdentityProvider1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getIdentityProvider1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getIdentityProvider1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/identities/{identityProvider}`.replace(`{${"identityProvider"}}`, encodeURIComponent(String(requestParameters.identityProvider))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[READ] permission to use this service
     * Get an identity provider
     */
    async getIdentityProvider1(requestParameters: GetIdentityProvider1Request): Promise<IdentityProviderEntity> {
        const response = await this.getIdentityProvider1Raw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[READ] permission to use this service
     * Get the list of identity providers
     */
    async getIdentityProvidersRaw(requestParameters: GetIdentityProvidersRequest): Promise<runtime.ApiResponse<Array<IdentityProviderListItem>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getIdentityProviders.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/identities`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IdentityProviderListItemFromJSON));
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[READ] permission to use this service
     * Get the list of identity providers
     */
    async getIdentityProviders(requestParameters: GetIdentityProvidersRequest): Promise<Array<IdentityProviderListItem>> {
        const response = await this.getIdentityProvidersRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[READ] permission to use this service
     * Get the list of identity providers
     */
    async getIdentityProviders1Raw(requestParameters: GetIdentityProviders1Request): Promise<runtime.ApiResponse<Array<IdentityProviderListItem>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getIdentityProviders1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getIdentityProviders1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/identities`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IdentityProviderListItemFromJSON));
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[READ] permission to use this service
     * Get the list of identity providers
     */
    async getIdentityProviders1(requestParameters: GetIdentityProviders1Request): Promise<Array<IdentityProviderListItem>> {
        const response = await this.getIdentityProviders1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Get the list of social identity providers
     */
    async getSocialIdentityProvidersRaw(requestParameters: GetSocialIdentityProvidersRequest): Promise<runtime.ApiResponse<Array<SocialIdentityProviderEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getSocialIdentityProviders.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getSocialIdentityProviders.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/portal/identities`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SocialIdentityProviderEntityFromJSON));
    }

    /**
     * Get the list of social identity providers
     */
    async getSocialIdentityProviders(requestParameters: GetSocialIdentityProvidersRequest): Promise<Array<SocialIdentityProviderEntity>> {
        const response = await this.getSocialIdentityProvidersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the list of social identity providers
     */
    async getSocialIdentityProviders1Raw(requestParameters: GetSocialIdentityProviders1Request): Promise<runtime.ApiResponse<Array<SocialIdentityProviderEntity>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getSocialIdentityProviders1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/social-identities`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SocialIdentityProviderEntityFromJSON));
    }

    /**
     * Get the list of social identity providers
     */
    async getSocialIdentityProviders1(requestParameters: GetSocialIdentityProviders1Request): Promise<Array<SocialIdentityProviderEntity>> {
        const response = await this.getSocialIdentityProviders1Raw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[UPDATE] permission to use this service
     * Update an identity provider
     */
    async updateIdentityProviderRaw(requestParameters: UpdateIdentityProviderRequest): Promise<runtime.ApiResponse<IdentityProviderEntity>> {
        if (requestParameters.identityProvider === null || requestParameters.identityProvider === undefined) {
            throw new runtime.RequiredError('identityProvider','Required parameter requestParameters.identityProvider was null or undefined when calling updateIdentityProvider.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateIdentityProvider.');
        }

        if (requestParameters.updateIdentityProviderEntity === null || requestParameters.updateIdentityProviderEntity === undefined) {
            throw new runtime.RequiredError('updateIdentityProviderEntity','Required parameter requestParameters.updateIdentityProviderEntity was null or undefined when calling updateIdentityProvider.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/identities/{identityProvider}`.replace(`{${"identityProvider"}}`, encodeURIComponent(String(requestParameters.identityProvider))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateIdentityProviderEntityToJSON(requestParameters.updateIdentityProviderEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[UPDATE] permission to use this service
     * Update an identity provider
     */
    async updateIdentityProvider(requestParameters: UpdateIdentityProviderRequest): Promise<IdentityProviderEntity> {
        const response = await this.updateIdentityProviderRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[UPDATE] permission to use this service
     * Update an identity provider
     */
    async updateIdentityProvider1Raw(requestParameters: UpdateIdentityProvider1Request): Promise<runtime.ApiResponse<IdentityProviderEntity>> {
        if (requestParameters.identityProvider === null || requestParameters.identityProvider === undefined) {
            throw new runtime.RequiredError('identityProvider','Required parameter requestParameters.identityProvider was null or undefined when calling updateIdentityProvider1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateIdentityProvider1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateIdentityProvider1.');
        }

        if (requestParameters.updateIdentityProviderEntity === null || requestParameters.updateIdentityProviderEntity === undefined) {
            throw new runtime.RequiredError('updateIdentityProviderEntity','Required parameter requestParameters.updateIdentityProviderEntity was null or undefined when calling updateIdentityProvider1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/identities/{identityProvider}`.replace(`{${"identityProvider"}}`, encodeURIComponent(String(requestParameters.identityProvider))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateIdentityProviderEntityToJSON(requestParameters.updateIdentityProviderEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[UPDATE] permission to use this service
     * Update an identity provider
     */
    async updateIdentityProvider1(requestParameters: UpdateIdentityProvider1Request): Promise<IdentityProviderEntity> {
        const response = await this.updateIdentityProvider1Raw(requestParameters);
        return await response.value();
    }

}
