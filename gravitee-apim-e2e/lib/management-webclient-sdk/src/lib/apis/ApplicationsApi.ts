/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AlertStatusEntity,
    AlertStatusEntityFromJSON,
    AlertStatusEntityToJSON,
    AlertTriggerEntity,
    AlertTriggerEntityFromJSON,
    AlertTriggerEntityToJSON,
    Analytics,
    AnalyticsFromJSON,
    AnalyticsToJSON,
    AnalyticsType,
    AnalyticsTypeFromJSON,
    AnalyticsTypeToJSON,
    ApiKeyEntity,
    ApiKeyEntityFromJSON,
    ApiKeyEntityToJSON,
    ApplicationEntity,
    ApplicationEntityFromJSON,
    ApplicationEntityToJSON,
    ApplicationMembership,
    ApplicationMembershipFromJSON,
    ApplicationMembershipToJSON,
    ApplicationMetadataEntity,
    ApplicationMetadataEntityFromJSON,
    ApplicationMetadataEntityToJSON,
    ApplicationRequest,
    ApplicationRequestFromJSON,
    ApplicationRequestToJSON,
    ApplicationRequestItemSearchLogResponse,
    ApplicationRequestItemSearchLogResponseFromJSON,
    ApplicationRequestItemSearchLogResponseToJSON,
    ApplicationTypeEntity,
    ApplicationTypeEntityFromJSON,
    ApplicationTypeEntityToJSON,
    GenericNotificationConfigEntity,
    GenericNotificationConfigEntityFromJSON,
    GenericNotificationConfigEntityToJSON,
    Hook,
    HookFromJSON,
    HookToJSON,
    MemberEntity,
    MemberEntityFromJSON,
    MemberEntityToJSON,
    MembershipListItem,
    MembershipListItemFromJSON,
    MembershipListItemToJSON,
    NewAlertTriggerEntity,
    NewAlertTriggerEntityFromJSON,
    NewAlertTriggerEntityToJSON,
    NewApplicationEntity,
    NewApplicationEntityFromJSON,
    NewApplicationEntityToJSON,
    NewApplicationMetadataEntity,
    NewApplicationMetadataEntityFromJSON,
    NewApplicationMetadataEntityToJSON,
    NewSubscriptionEntity,
    NewSubscriptionEntityFromJSON,
    NewSubscriptionEntityToJSON,
    NotifierEntity,
    NotifierEntityFromJSON,
    NotifierEntityToJSON,
    PortalNotificationConfigEntity,
    PortalNotificationConfigEntityFromJSON,
    PortalNotificationConfigEntityToJSON,
    Subscription,
    SubscriptionFromJSON,
    SubscriptionToJSON,
    SubscriptionEntityPageResult,
    SubscriptionEntityPageResultFromJSON,
    SubscriptionEntityPageResultToJSON,
    SubscriptionStatus,
    SubscriptionStatusFromJSON,
    SubscriptionStatusToJSON,
    TransferOwnership,
    TransferOwnershipFromJSON,
    TransferOwnershipToJSON,
    UpdateAlertTriggerEntity,
    UpdateAlertTriggerEntityFromJSON,
    UpdateAlertTriggerEntityToJSON,
    UpdateApplicationEntity,
    UpdateApplicationEntityFromJSON,
    UpdateApplicationEntityToJSON,
    UpdateApplicationMetadataEntity,
    UpdateApplicationMetadataEntityFromJSON,
    UpdateApplicationMetadataEntityToJSON,
} from '../models';

export interface AddOrUpdateApplicationMemberRequest {
    application: string;
    envId: string;
    orgId: string;
    applicationMembership: ApplicationMembership;
}

export interface CloseApplicationSubscriptionRequest {
    subscription: string;
    application: string;
    envId: string;
    orgId: string;
}

export interface CreateApplicationRequest {
    envId: string;
    orgId: string;
    newApplicationEntity: NewApplicationEntity;
}

export interface CreateApplicationAlertRequest {
    application: string;
    envId: string;
    orgId: string;
    newAlertTriggerEntity: NewAlertTriggerEntity;
}

export interface CreateApplicationMetadataRequest {
    application: string;
    envId: string;
    orgId: string;
    newApplicationMetadataEntity: NewApplicationMetadataEntity;
}

export interface CreateApplicationNotificationSettingsRequest {
    application: string;
    envId: string;
    orgId: string;
    genericNotificationConfigEntity?: GenericNotificationConfigEntity;
}

export interface CreateSubscriptionWithApplicationRequest {
    plan: string;
    application: string;
    envId: string;
    orgId: string;
    newSubscriptionEntity?: NewSubscriptionEntity;
}

export interface DeleteApplicationRequest {
    application: string;
    envId: string;
    orgId: string;
}

export interface DeleteApplicationAlertRequest {
    alert: string;
    application: string;
    envId: string;
    orgId: string;
}

export interface DeleteApplicationMemberRequest {
    user: string;
    application: string;
    envId: string;
    orgId: string;
}

export interface DeleteApplicationMetadataRequest {
    metadata: string;
    application: string;
    envId: string;
    orgId: string;
}

export interface DeleteApplicationNotificationSettingsRequest {
    notificationId: string;
    application: string;
    envId: string;
    orgId: string;
}

export interface ExportApplicationLogsAsCSVRequest {
    from?: number;
    to?: number;
    query?: string;
    size?: number;
    page?: number;
    field?: string;
    order?: boolean;
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApiKeysForApplicationRequest {
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApiKeysForApplicationSubscriptionRequest {
    subscription: string;
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApiSubscribedRequest {
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApplicationRequest {
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApplicationAlertsRequest {
    eventCounts?: boolean;
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApplicationAlertsStatusRequest {
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApplicationAnalyticsHitsRequest {
    from?: number;
    to?: number;
    interval?: number;
    query?: string;
    field?: string;
    size?: number;
    type: AnalyticsType;
    ranges?: Array<string>;
    aggs?: Array<string>;
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApplicationBackgroundRequest {
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApplicationHooksRequest {
    envId: string;
    orgId: string;
}

export interface GetApplicationLogRequest {
    log: string;
    timestamp?: number;
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApplicationLogsRequest {
    from?: number;
    to?: number;
    query?: string;
    size?: number;
    page?: number;
    field?: string;
    order?: boolean;
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApplicationMemberPermissionsRequest {
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApplicationMembersRequest {
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApplicationMetadataRequest {
    metadata: string;
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApplicationMetadatasRequest {
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApplicationNotificationSettingsRequest {
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApplicationNotifiersRequest {
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApplicationPictureRequest {
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApplicationSubscriptionRequest {
    subscription: string;
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApplicationSubscriptionsRequest {
    plan?: Array<string>;
    api?: Array<string>;
    status?: Array<SubscriptionStatus>;
    apiKey?: string;
    securityTypes?: Array<string>;
    size?: number;
    page?: number;
    expand?: Array<GetApplicationSubscriptionsExpandEnum>;
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApplicationTypeRequest {
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApplicationsRequest {
    group?: string;
    query?: string;
    status?: string;
    envId: string;
    orgId: string;
}

export interface RenewApiKeyForApplicationSubscriptionRequest {
    application: string;
    envId: string;
    orgId: string;
}

export interface RenewApiKeyForApplicationSubscription1Request {
    subscription: string;
    application: string;
    envId: string;
    orgId: string;
}

export interface RenewApplicationClientSecretRequest {
    application: string;
    envId: string;
    orgId: string;
}

export interface RestoreApplicationRequest {
    application: string;
    envId: string;
    orgId: string;
}

export interface RevokeApiKeyForApplicationRequest {
    apikey: string;
    application: string;
    envId: string;
    orgId: string;
}

export interface RevokeApiKeyForApplicationSubscriptionRequest {
    apikey: string;
    subscription: string;
    application: string;
    envId: string;
    orgId: string;
}

export interface TransferApplicationOwnershipRequest {
    application: string;
    envId: string;
    orgId: string;
    transferOwnership: TransferOwnership;
}

export interface UpdateApplicationRequest {
    application: string;
    envId: string;
    orgId: string;
    updateApplicationEntity: UpdateApplicationEntity;
}

export interface UpdateApplicationAlertRequest {
    alert: string;
    application: string;
    envId: string;
    orgId: string;
    updateAlertTriggerEntity: UpdateAlertTriggerEntity;
}

export interface UpdateApplicationGeneralNotificationSettingsRequest {
    notificationId: string;
    application: string;
    envId: string;
    orgId: string;
    genericNotificationConfigEntity?: GenericNotificationConfigEntity;
}

export interface UpdateApplicationMetadataRequest {
    metadata: string;
    application: string;
    envId: string;
    orgId: string;
    updateApplicationMetadataEntity: UpdateApplicationMetadataEntity;
}

export interface UpdateApplicationPortalNotificationSettingsRequest {
    application: string;
    envId: string;
    orgId: string;
    portalNotificationConfigEntity?: PortalNotificationConfigEntity;
}

/**
 * 
 */
export class ApplicationsApi extends runtime.BaseAPI {

    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Add or update an application member
     */
    async addOrUpdateApplicationMemberRaw(requestParameters: AddOrUpdateApplicationMemberRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling addOrUpdateApplicationMember.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling addOrUpdateApplicationMember.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling addOrUpdateApplicationMember.');
        }

        if (requestParameters.applicationMembership === null || requestParameters.applicationMembership === undefined) {
            throw new runtime.RequiredError('applicationMembership','Required parameter requestParameters.applicationMembership was null or undefined when calling addOrUpdateApplicationMember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/members`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationMembershipToJSON(requestParameters.applicationMembership),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Add or update an application member
     */
    async addOrUpdateApplicationMember(requestParameters: AddOrUpdateApplicationMemberRequest): Promise<void> {
        await this.addOrUpdateApplicationMemberRaw(requestParameters);
    }

    /**
     * User must have the APPLICATION_SUBSCRIPTION[DELETE] permission to use this service
     * Close the subscription
     */
    async closeApplicationSubscriptionRaw(requestParameters: CloseApplicationSubscriptionRequest): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription','Required parameter requestParameters.subscription was null or undefined when calling closeApplicationSubscription.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling closeApplicationSubscription.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling closeApplicationSubscription.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling closeApplicationSubscription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/subscriptions/{subscription}`.replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * User must have the APPLICATION_SUBSCRIPTION[DELETE] permission to use this service
     * Close the subscription
     */
    async closeApplicationSubscription(requestParameters: CloseApplicationSubscriptionRequest): Promise<Subscription> {
        const response = await this.closeApplicationSubscriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have MANAGEMENT_APPLICATION[CREATE] permission to create an application.
     * Create an application
     */
    async createApplicationRaw(requestParameters: CreateApplicationRequest): Promise<runtime.ApiResponse<ApplicationEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createApplication.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createApplication.');
        }

        if (requestParameters.newApplicationEntity === null || requestParameters.newApplicationEntity === undefined) {
            throw new runtime.RequiredError('newApplicationEntity','Required parameter requestParameters.newApplicationEntity was null or undefined when calling createApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewApplicationEntityToJSON(requestParameters.newApplicationEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationEntityFromJSON(jsonValue));
    }

    /**
     * User must have MANAGEMENT_APPLICATION[CREATE] permission to create an application.
     * Create an application
     */
    async createApplication(requestParameters: CreateApplicationRequest): Promise<ApplicationEntity> {
        const response = await this.createApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the APPLICATION_ALERT[CREATE] permission to use this service
     * Create an alert for an application
     */
    async createApplicationAlertRaw(requestParameters: CreateApplicationAlertRequest): Promise<runtime.ApiResponse<AlertTriggerEntity>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling createApplicationAlert.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createApplicationAlert.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createApplicationAlert.');
        }

        if (requestParameters.newAlertTriggerEntity === null || requestParameters.newAlertTriggerEntity === undefined) {
            throw new runtime.RequiredError('newAlertTriggerEntity','Required parameter requestParameters.newAlertTriggerEntity was null or undefined when calling createApplicationAlert.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/alerts`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewAlertTriggerEntityToJSON(requestParameters.newAlertTriggerEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertTriggerEntityFromJSON(jsonValue));
    }

    /**
     * User must have the APPLICATION_ALERT[CREATE] permission to use this service
     * Create an alert for an application
     */
    async createApplicationAlert(requestParameters: CreateApplicationAlertRequest): Promise<AlertTriggerEntity> {
        const response = await this.createApplicationAlertRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the APPLICATION_METADATA[CREATE] permission to use this service
     * Create an application metadata
     */
    async createApplicationMetadataRaw(requestParameters: CreateApplicationMetadataRequest): Promise<runtime.ApiResponse<ApplicationMetadataEntity>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling createApplicationMetadata.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createApplicationMetadata.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createApplicationMetadata.');
        }

        if (requestParameters.newApplicationMetadataEntity === null || requestParameters.newApplicationMetadataEntity === undefined) {
            throw new runtime.RequiredError('newApplicationMetadataEntity','Required parameter requestParameters.newApplicationMetadataEntity was null or undefined when calling createApplicationMetadata.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/metadata`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewApplicationMetadataEntityToJSON(requestParameters.newApplicationMetadataEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationMetadataEntityFromJSON(jsonValue));
    }

    /**
     * User must have the APPLICATION_METADATA[CREATE] permission to use this service
     * Create an application metadata
     */
    async createApplicationMetadata(requestParameters: CreateApplicationMetadataRequest): Promise<ApplicationMetadataEntity> {
        const response = await this.createApplicationMetadataRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create notification settings
     */
    async createApplicationNotificationSettingsRaw(requestParameters: CreateApplicationNotificationSettingsRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling createApplicationNotificationSettings.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createApplicationNotificationSettings.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createApplicationNotificationSettings.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/notificationsettings`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenericNotificationConfigEntityToJSON(requestParameters.genericNotificationConfigEntity),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Create notification settings
     */
    async createApplicationNotificationSettings(requestParameters: CreateApplicationNotificationSettingsRequest): Promise<any> {
        const response = await this.createApplicationNotificationSettingsRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGE_SUBSCRIPTIONS permission to use this service
     * Subscribe to a plan
     */
    async createSubscriptionWithApplicationRaw(requestParameters: CreateSubscriptionWithApplicationRequest): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan','Required parameter requestParameters.plan was null or undefined when calling createSubscriptionWithApplication.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling createSubscriptionWithApplication.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createSubscriptionWithApplication.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createSubscriptionWithApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.plan !== undefined) {
            queryParameters['plan'] = requestParameters.plan;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/subscriptions`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewSubscriptionEntityToJSON(requestParameters.newSubscriptionEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGE_SUBSCRIPTIONS permission to use this service
     * Subscribe to a plan
     */
    async createSubscriptionWithApplication(requestParameters: CreateSubscriptionWithApplicationRequest): Promise<Subscription> {
        const response = await this.createSubscriptionWithApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the DELETE permission to use this service
     * Delete an application
     */
    async deleteApplicationRaw(requestParameters: DeleteApplicationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling deleteApplication.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteApplication.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the DELETE permission to use this service
     * Delete an application
     */
    async deleteApplication(requestParameters: DeleteApplicationRequest): Promise<void> {
        await this.deleteApplicationRaw(requestParameters);
    }

    /**
     * User must have the APPLICATION_ALERT[DELETE] permission to use this service
     * Delete an alert for an application
     */
    async deleteApplicationAlertRaw(requestParameters: DeleteApplicationAlertRequest): Promise<runtime.ApiResponse<AlertTriggerEntity>> {
        if (requestParameters.alert === null || requestParameters.alert === undefined) {
            throw new runtime.RequiredError('alert','Required parameter requestParameters.alert was null or undefined when calling deleteApplicationAlert.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling deleteApplicationAlert.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteApplicationAlert.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteApplicationAlert.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/alerts/{alert}`.replace(`{${"alert"}}`, encodeURIComponent(String(requestParameters.alert))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertTriggerEntityFromJSON(jsonValue));
    }

    /**
     * User must have the APPLICATION_ALERT[DELETE] permission to use this service
     * Delete an alert for an application
     */
    async deleteApplicationAlert(requestParameters: DeleteApplicationAlertRequest): Promise<AlertTriggerEntity> {
        const response = await this.deleteApplicationAlertRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Remove an application member
     */
    async deleteApplicationMemberRaw(requestParameters: DeleteApplicationMemberRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling deleteApplicationMember.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling deleteApplicationMember.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteApplicationMember.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteApplicationMember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.user !== undefined) {
            queryParameters['user'] = requestParameters.user;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/members`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Remove an application member
     */
    async deleteApplicationMember(requestParameters: DeleteApplicationMemberRequest): Promise<void> {
        await this.deleteApplicationMemberRaw(requestParameters);
    }

    /**
     * User must have the APPLICATION_METADATA[DELETE] permission to use this service
     * Delete a metadata
     */
    async deleteApplicationMetadataRaw(requestParameters: DeleteApplicationMetadataRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.metadata === null || requestParameters.metadata === undefined) {
            throw new runtime.RequiredError('metadata','Required parameter requestParameters.metadata was null or undefined when calling deleteApplicationMetadata.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling deleteApplicationMetadata.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteApplicationMetadata.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteApplicationMetadata.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/metadata/{metadata}`.replace(`{${"metadata"}}`, encodeURIComponent(String(requestParameters.metadata))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the APPLICATION_METADATA[DELETE] permission to use this service
     * Delete a metadata
     */
    async deleteApplicationMetadata(requestParameters: DeleteApplicationMetadataRequest): Promise<void> {
        await this.deleteApplicationMetadataRaw(requestParameters);
    }

    /**
     * Delete notification settings
     */
    async deleteApplicationNotificationSettingsRaw(requestParameters: DeleteApplicationNotificationSettingsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.notificationId === null || requestParameters.notificationId === undefined) {
            throw new runtime.RequiredError('notificationId','Required parameter requestParameters.notificationId was null or undefined when calling deleteApplicationNotificationSettings.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling deleteApplicationNotificationSettings.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteApplicationNotificationSettings.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteApplicationNotificationSettings.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/notificationsettings/{notificationId}`.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters.notificationId))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete notification settings
     */
    async deleteApplicationNotificationSettings(requestParameters: DeleteApplicationNotificationSettingsRequest): Promise<void> {
        await this.deleteApplicationNotificationSettingsRaw(requestParameters);
    }

    /**
     * Export application logs as CSV
     */
    async exportApplicationLogsAsCSVRaw(requestParameters: ExportApplicationLogsAsCSVRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling exportApplicationLogsAsCSV.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling exportApplicationLogsAsCSV.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling exportApplicationLogsAsCSV.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.field !== undefined) {
            queryParameters['field'] = requestParameters.field;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/logs/export`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Export application logs as CSV
     */
    async exportApplicationLogsAsCSV(requestParameters: ExportApplicationLogsAsCSVRequest): Promise<string> {
        const response = await this.exportApplicationLogsAsCSVRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the READ permission to use this service
     * List all API Keys for an application
     */
    async getApiKeysForApplicationRaw(requestParameters: GetApiKeysForApplicationRequest): Promise<runtime.ApiResponse<Array<ApiKeyEntity>>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApiKeysForApplication.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiKeysForApplication.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiKeysForApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/apikeys`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiKeyEntityFromJSON));
    }

    /**
     * User must have the READ permission to use this service
     * List all API Keys for an application
     */
    async getApiKeysForApplication(requestParameters: GetApiKeysForApplicationRequest): Promise<Array<ApiKeyEntity>> {
        const response = await this.getApiKeysForApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the READ permission to use this service
     * List all API Keys for a subscription
     */
    async getApiKeysForApplicationSubscriptionRaw(requestParameters: GetApiKeysForApplicationSubscriptionRequest): Promise<runtime.ApiResponse<Array<ApiKeyEntity>>> {
        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription','Required parameter requestParameters.subscription was null or undefined when calling getApiKeysForApplicationSubscription.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApiKeysForApplicationSubscription.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiKeysForApplicationSubscription.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiKeysForApplicationSubscription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/subscriptions/{subscription}/apikeys`.replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiKeyEntityFromJSON));
    }

    /**
     * User must have the READ permission to use this service
     * List all API Keys for a subscription
     */
    async getApiKeysForApplicationSubscription(requestParameters: GetApiKeysForApplicationSubscriptionRequest): Promise<Array<ApiKeyEntity>> {
        const response = await this.getApiKeysForApplicationSubscriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the APPLICATION_SUBSCRIPTION permission to use this service
     * List APIs subscribed by the application
     */
    async getApiSubscribedRaw(requestParameters: GetApiSubscribedRequest): Promise<runtime.ApiResponse<Array<ApplicationEntity>>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApiSubscribed.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiSubscribed.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiSubscribed.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/subscribed`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationEntityFromJSON));
    }

    /**
     * User must have the APPLICATION_SUBSCRIPTION permission to use this service
     * List APIs subscribed by the application
     */
    async getApiSubscribed(requestParameters: GetApiSubscribedRequest): Promise<Array<ApplicationEntity>> {
        const response = await this.getApiSubscribedRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the READ permission to use this service
     * Get an application
     */
    async getApplicationRaw(requestParameters: GetApplicationRequest): Promise<runtime.ApiResponse<ApplicationEntity>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApplication.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplication.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationEntityFromJSON(jsonValue));
    }

    /**
     * User must have the READ permission to use this service
     * Get an application
     */
    async getApplication(requestParameters: GetApplicationRequest): Promise<ApplicationEntity> {
        const response = await this.getApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the APPLICATION_ALERT[READ] permission to use this service
     * List configured alerts of an application
     */
    async getApplicationAlertsRaw(requestParameters: GetApplicationAlertsRequest): Promise<runtime.ApiResponse<Array<AlertTriggerEntity>>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApplicationAlerts.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplicationAlerts.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplicationAlerts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.eventCounts !== undefined) {
            queryParameters['event_counts'] = requestParameters.eventCounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/alerts`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlertTriggerEntityFromJSON));
    }

    /**
     * User must have the APPLICATION_ALERT[READ] permission to use this service
     * List configured alerts of an application
     */
    async getApplicationAlerts(requestParameters: GetApplicationAlertsRequest): Promise<Array<AlertTriggerEntity>> {
        const response = await this.getApplicationAlertsRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * Get alerting status
     */
    async getApplicationAlertsStatusRaw(requestParameters: GetApplicationAlertsStatusRequest): Promise<runtime.ApiResponse<AlertStatusEntity>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApplicationAlertsStatus.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplicationAlertsStatus.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplicationAlertsStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/alerts/status`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertStatusEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * Get alerting status
     */
    async getApplicationAlertsStatus(requestParameters: GetApplicationAlertsStatusRequest): Promise<AlertStatusEntity> {
        const response = await this.getApplicationAlertsStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the APPLICATION_ANALYTICS[READ] permission to use this service
     * Get application analytics
     */
    async getApplicationAnalyticsHitsRaw(requestParameters: GetApplicationAnalyticsHitsRequest): Promise<runtime.ApiResponse<Analytics>> {
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling getApplicationAnalyticsHits.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApplicationAnalyticsHits.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplicationAnalyticsHits.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplicationAnalyticsHits.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.interval !== undefined) {
            queryParameters['interval'] = requestParameters.interval;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.field !== undefined) {
            queryParameters['field'] = requestParameters.field;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.ranges) {
            queryParameters['ranges'] = requestParameters.ranges.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.aggs) {
            queryParameters['aggs'] = requestParameters.aggs.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/analytics`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticsFromJSON(jsonValue));
    }

    /**
     * User must have the APPLICATION_ANALYTICS[READ] permission to use this service
     * Get application analytics
     */
    async getApplicationAnalyticsHits(requestParameters: GetApplicationAnalyticsHitsRequest): Promise<Analytics> {
        const response = await this.getApplicationAnalyticsHitsRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the READ permission to use this service
     * Get the application\'s background
     */
    async getApplicationBackgroundRaw(requestParameters: GetApplicationBackgroundRequest): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApplicationBackground.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplicationBackground.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplicationBackground.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/background`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * User must have the READ permission to use this service
     * Get the application\'s background
     */
    async getApplicationBackground(requestParameters: GetApplicationBackgroundRequest): Promise<Blob> {
        const response = await this.getApplicationBackgroundRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the list of available hooks
     */
    async getApplicationHooksRaw(requestParameters: GetApplicationHooksRequest): Promise<runtime.ApiResponse<Array<Hook>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplicationHooks.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplicationHooks.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/hooks`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HookFromJSON));
    }

    /**
     * Get the list of available hooks
     */
    async getApplicationHooks(requestParameters: GetApplicationHooksRequest): Promise<Array<Hook>> {
        const response = await this.getApplicationHooksRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a specific log
     */
    async getApplicationLogRaw(requestParameters: GetApplicationLogRequest): Promise<runtime.ApiResponse<ApplicationRequest>> {
        if (requestParameters.log === null || requestParameters.log === undefined) {
            throw new runtime.RequiredError('log','Required parameter requestParameters.log was null or undefined when calling getApplicationLog.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApplicationLog.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplicationLog.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplicationLog.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.timestamp !== undefined) {
            queryParameters['timestamp'] = requestParameters.timestamp;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/logs/{log}`.replace(`{${"log"}}`, encodeURIComponent(String(requestParameters.log))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationRequestFromJSON(jsonValue));
    }

    /**
     * Get a specific log
     */
    async getApplicationLog(requestParameters: GetApplicationLogRequest): Promise<ApplicationRequest> {
        const response = await this.getApplicationLogRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get application logs
     */
    async getApplicationLogsRaw(requestParameters: GetApplicationLogsRequest): Promise<runtime.ApiResponse<ApplicationRequestItemSearchLogResponse>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApplicationLogs.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplicationLogs.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplicationLogs.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.field !== undefined) {
            queryParameters['field'] = requestParameters.field;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/logs`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationRequestItemSearchLogResponseFromJSON(jsonValue));
    }

    /**
     * Get application logs
     */
    async getApplicationLogs(requestParameters: GetApplicationLogsRequest): Promise<ApplicationRequestItemSearchLogResponse> {
        const response = await this.getApplicationLogsRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the APPLICATION_MEMBER permission to use this service
     * Get application members
     */
    async getApplicationMemberPermissionsRaw(requestParameters: GetApplicationMemberPermissionsRequest): Promise<runtime.ApiResponse<Array<MemberEntity>>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApplicationMemberPermissions.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplicationMemberPermissions.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplicationMemberPermissions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/members/permissions`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MemberEntityFromJSON));
    }

    /**
     * User must have the APPLICATION_MEMBER permission to use this service
     * Get application members
     */
    async getApplicationMemberPermissions(requestParameters: GetApplicationMemberPermissionsRequest): Promise<Array<MemberEntity>> {
        const response = await this.getApplicationMemberPermissionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the READ permission to use this service
     * List application members
     */
    async getApplicationMembersRaw(requestParameters: GetApplicationMembersRequest): Promise<runtime.ApiResponse<Array<MembershipListItem>>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApplicationMembers.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplicationMembers.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplicationMembers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/members`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MembershipListItemFromJSON));
    }

    /**
     * User must have the READ permission to use this service
     * List application members
     */
    async getApplicationMembers(requestParameters: GetApplicationMembersRequest): Promise<Array<MembershipListItem>> {
        const response = await this.getApplicationMembersRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the APPLICATION_METADATA[READ] permission to use this service
     * A metadata for an application and metadata id
     */
    async getApplicationMetadataRaw(requestParameters: GetApplicationMetadataRequest): Promise<runtime.ApiResponse<ApplicationMetadataEntity>> {
        if (requestParameters.metadata === null || requestParameters.metadata === undefined) {
            throw new runtime.RequiredError('metadata','Required parameter requestParameters.metadata was null or undefined when calling getApplicationMetadata.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApplicationMetadata.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplicationMetadata.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplicationMetadata.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/metadata/{metadata}`.replace(`{${"metadata"}}`, encodeURIComponent(String(requestParameters.metadata))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationMetadataEntityFromJSON(jsonValue));
    }

    /**
     * User must have the APPLICATION_METADATA[READ] permission to use this service
     * A metadata for an application and metadata id
     */
    async getApplicationMetadata(requestParameters: GetApplicationMetadataRequest): Promise<ApplicationMetadataEntity> {
        const response = await this.getApplicationMetadataRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the APPLICATION_METADATA[READ] permission to use this service
     * List metadata for an application
     */
    async getApplicationMetadatasRaw(requestParameters: GetApplicationMetadatasRequest): Promise<runtime.ApiResponse<Array<ApplicationMetadataEntity>>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApplicationMetadatas.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplicationMetadatas.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplicationMetadatas.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/metadata`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationMetadataEntityFromJSON));
    }

    /**
     * User must have the APPLICATION_METADATA[READ] permission to use this service
     * List metadata for an application
     */
    async getApplicationMetadatas(requestParameters: GetApplicationMetadatasRequest): Promise<Array<ApplicationMetadataEntity>> {
        const response = await this.getApplicationMetadatasRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get notification settings
     */
    async getApplicationNotificationSettingsRaw(requestParameters: GetApplicationNotificationSettingsRequest): Promise<runtime.ApiResponse<Array<any>>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApplicationNotificationSettings.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplicationNotificationSettings.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplicationNotificationSettings.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/notificationsettings`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get notification settings
     */
    async getApplicationNotificationSettings(requestParameters: GetApplicationNotificationSettingsRequest): Promise<Array<any>> {
        const response = await this.getApplicationNotificationSettingsRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the APPLICATION_NOTIFICATION[READ] permission to use this service
     * List available notifiers for application
     */
    async getApplicationNotifiersRaw(requestParameters: GetApplicationNotifiersRequest): Promise<runtime.ApiResponse<Array<NotifierEntity>>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApplicationNotifiers.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplicationNotifiers.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplicationNotifiers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/notifiers`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NotifierEntityFromJSON));
    }

    /**
     * User must have the APPLICATION_NOTIFICATION[READ] permission to use this service
     * List available notifiers for application
     */
    async getApplicationNotifiers(requestParameters: GetApplicationNotifiersRequest): Promise<Array<NotifierEntity>> {
        const response = await this.getApplicationNotifiersRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the READ permission to use this service
     * Get the application\'s picture
     */
    async getApplicationPictureRaw(requestParameters: GetApplicationPictureRequest): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApplicationPicture.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplicationPicture.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplicationPicture.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/picture`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * User must have the READ permission to use this service
     * Get the application\'s picture
     */
    async getApplicationPicture(requestParameters: GetApplicationPictureRequest): Promise<Blob> {
        const response = await this.getApplicationPictureRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the READ permission to use this service
     * Get subscription information
     */
    async getApplicationSubscriptionRaw(requestParameters: GetApplicationSubscriptionRequest): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription','Required parameter requestParameters.subscription was null or undefined when calling getApplicationSubscription.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApplicationSubscription.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplicationSubscription.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplicationSubscription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/subscriptions/{subscription}`.replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * User must have the READ permission to use this service
     * Get subscription information
     */
    async getApplicationSubscription(requestParameters: GetApplicationSubscriptionRequest): Promise<Subscription> {
        const response = await this.getApplicationSubscriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the READ_SUBSCRIPTION permission to use this service
     * List subscriptions for the application
     */
    async getApplicationSubscriptionsRaw(requestParameters: GetApplicationSubscriptionsRequest): Promise<runtime.ApiResponse<SubscriptionEntityPageResult>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApplicationSubscriptions.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplicationSubscriptions.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplicationSubscriptions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.plan) {
            queryParameters['plan'] = requestParameters.plan.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.api) {
            queryParameters['api'] = requestParameters.api.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.apiKey !== undefined) {
            queryParameters['api_key'] = requestParameters.apiKey;
        }

        if (requestParameters.securityTypes) {
            queryParameters['security_types'] = requestParameters.securityTypes;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/subscriptions`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionEntityPageResultFromJSON(jsonValue));
    }

    /**
     * User must have the READ_SUBSCRIPTION permission to use this service
     * List subscriptions for the application
     */
    async getApplicationSubscriptions(requestParameters: GetApplicationSubscriptionsRequest): Promise<SubscriptionEntityPageResult> {
        const response = await this.getApplicationSubscriptionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the READ permission to use this service
     * Get application type definition of an application
     */
    async getApplicationTypeRaw(requestParameters: GetApplicationTypeRequest): Promise<runtime.ApiResponse<ApplicationTypeEntity>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApplicationType.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplicationType.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplicationType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/configuration`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationTypeEntityFromJSON(jsonValue));
    }

    /**
     * User must have the READ permission to use this service
     * Get application type definition of an application
     */
    async getApplicationType(requestParameters: GetApplicationTypeRequest): Promise<ApplicationTypeEntity> {
        const response = await this.getApplicationTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have MANAGEMENT_APPLICATION[READ] and PORTAL_APPLICATION[READ] permission to list applications.
     * List all the applications accessible to authenticated user
     */
    async getApplicationsRaw(requestParameters: GetApplicationsRequest): Promise<runtime.ApiResponse<Array<ApplicationEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplications.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplications.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.group !== undefined) {
            queryParameters['group'] = requestParameters.group;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationEntityFromJSON));
    }

    /**
     * User must have MANAGEMENT_APPLICATION[READ] and PORTAL_APPLICATION[READ] permission to list applications.
     * List all the applications accessible to authenticated user
     */
    async getApplications(requestParameters: GetApplicationsRequest): Promise<Array<ApplicationEntity>> {
        const response = await this.getApplicationsRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGE_API_KEYS permission to use this service
     * Renew an API key
     */
    async renewApiKeyForApplicationSubscriptionRaw(requestParameters: RenewApiKeyForApplicationSubscriptionRequest): Promise<runtime.ApiResponse<ApiKeyEntity>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling renewApiKeyForApplicationSubscription.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling renewApiKeyForApplicationSubscription.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling renewApiKeyForApplicationSubscription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/apikeys/_renew`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiKeyEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGE_API_KEYS permission to use this service
     * Renew an API key
     */
    async renewApiKeyForApplicationSubscription(requestParameters: RenewApiKeyForApplicationSubscriptionRequest): Promise<ApiKeyEntity> {
        const response = await this.renewApiKeyForApplicationSubscriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGE_API_KEYS permission to use this service
     * Renew an API key
     */
    async renewApiKeyForApplicationSubscription1Raw(requestParameters: RenewApiKeyForApplicationSubscription1Request): Promise<runtime.ApiResponse<ApiKeyEntity>> {
        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription','Required parameter requestParameters.subscription was null or undefined when calling renewApiKeyForApplicationSubscription1.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling renewApiKeyForApplicationSubscription1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling renewApiKeyForApplicationSubscription1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling renewApiKeyForApplicationSubscription1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/subscriptions/{subscription}/apikeys/_renew`.replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiKeyEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGE_API_KEYS permission to use this service
     * Renew an API key
     */
    async renewApiKeyForApplicationSubscription1(requestParameters: RenewApiKeyForApplicationSubscription1Request): Promise<ApiKeyEntity> {
        const response = await this.renewApiKeyForApplicationSubscription1Raw(requestParameters);
        return await response.value();
    }

    /**
     * User must have APPLICATION_DEFINITION[UPDATE] permission to update an application.
     * Renew the client secret for an OAuth2 application
     */
    async renewApplicationClientSecretRaw(requestParameters: RenewApplicationClientSecretRequest): Promise<runtime.ApiResponse<ApplicationEntity>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling renewApplicationClientSecret.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling renewApplicationClientSecret.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling renewApplicationClientSecret.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/renew_secret`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationEntityFromJSON(jsonValue));
    }

    /**
     * User must have APPLICATION_DEFINITION[UPDATE] permission to update an application.
     * Renew the client secret for an OAuth2 application
     */
    async renewApplicationClientSecret(requestParameters: RenewApplicationClientSecretRequest): Promise<ApplicationEntity> {
        const response = await this.renewApplicationClientSecretRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have APPLICATION_DEFINITION[UPDATE] permission to restore an application.
     * Restore the application
     */
    async restoreApplicationRaw(requestParameters: RestoreApplicationRequest): Promise<runtime.ApiResponse<ApplicationEntity>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling restoreApplication.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling restoreApplication.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling restoreApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/_restore`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationEntityFromJSON(jsonValue));
    }

    /**
     * User must have APPLICATION_DEFINITION[UPDATE] permission to restore an application.
     * Restore the application
     */
    async restoreApplication(requestParameters: RestoreApplicationRequest): Promise<ApplicationEntity> {
        const response = await this.restoreApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGE_API_KEYS permission to use this service
     * Revoke an API key
     */
    async revokeApiKeyForApplicationRaw(requestParameters: RevokeApiKeyForApplicationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apikey === null || requestParameters.apikey === undefined) {
            throw new runtime.RequiredError('apikey','Required parameter requestParameters.apikey was null or undefined when calling revokeApiKeyForApplication.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling revokeApiKeyForApplication.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling revokeApiKeyForApplication.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling revokeApiKeyForApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/apikeys/{apikey}`.replace(`{${"apikey"}}`, encodeURIComponent(String(requestParameters.apikey))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGE_API_KEYS permission to use this service
     * Revoke an API key
     */
    async revokeApiKeyForApplication(requestParameters: RevokeApiKeyForApplicationRequest): Promise<void> {
        await this.revokeApiKeyForApplicationRaw(requestParameters);
    }

    /**
     * User must have the MANAGE_API_KEYS permission to use this service
     * Revoke an API key
     */
    async revokeApiKeyForApplicationSubscriptionRaw(requestParameters: RevokeApiKeyForApplicationSubscriptionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apikey === null || requestParameters.apikey === undefined) {
            throw new runtime.RequiredError('apikey','Required parameter requestParameters.apikey was null or undefined when calling revokeApiKeyForApplicationSubscription.');
        }

        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription','Required parameter requestParameters.subscription was null or undefined when calling revokeApiKeyForApplicationSubscription.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling revokeApiKeyForApplicationSubscription.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling revokeApiKeyForApplicationSubscription.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling revokeApiKeyForApplicationSubscription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/subscriptions/{subscription}/apikeys/{apikey}`.replace(`{${"apikey"}}`, encodeURIComponent(String(requestParameters.apikey))).replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGE_API_KEYS permission to use this service
     * Revoke an API key
     */
    async revokeApiKeyForApplicationSubscription(requestParameters: RevokeApiKeyForApplicationSubscriptionRequest): Promise<void> {
        await this.revokeApiKeyForApplicationSubscriptionRaw(requestParameters);
    }

    /**
     * User must have the TRANSFER_OWNERSHIP permission to use this service
     * Transfer the ownership of the APPLICATION
     */
    async transferApplicationOwnershipRaw(requestParameters: TransferApplicationOwnershipRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling transferApplicationOwnership.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling transferApplicationOwnership.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling transferApplicationOwnership.');
        }

        if (requestParameters.transferOwnership === null || requestParameters.transferOwnership === undefined) {
            throw new runtime.RequiredError('transferOwnership','Required parameter requestParameters.transferOwnership was null or undefined when calling transferApplicationOwnership.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/members/transfer_ownership`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferOwnershipToJSON(requestParameters.transferOwnership),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the TRANSFER_OWNERSHIP permission to use this service
     * Transfer the ownership of the APPLICATION
     */
    async transferApplicationOwnership(requestParameters: TransferApplicationOwnershipRequest): Promise<void> {
        await this.transferApplicationOwnershipRaw(requestParameters);
    }

    /**
     * User must have APPLICATION_DEFINITION[UPDATE] permission to update an application.
     * Update an application
     */
    async updateApplicationRaw(requestParameters: UpdateApplicationRequest): Promise<runtime.ApiResponse<ApplicationEntity>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling updateApplication.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateApplication.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateApplication.');
        }

        if (requestParameters.updateApplicationEntity === null || requestParameters.updateApplicationEntity === undefined) {
            throw new runtime.RequiredError('updateApplicationEntity','Required parameter requestParameters.updateApplicationEntity was null or undefined when calling updateApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApplicationEntityToJSON(requestParameters.updateApplicationEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationEntityFromJSON(jsonValue));
    }

    /**
     * User must have APPLICATION_DEFINITION[UPDATE] permission to update an application.
     * Update an application
     */
    async updateApplication(requestParameters: UpdateApplicationRequest): Promise<ApplicationEntity> {
        const response = await this.updateApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the APPLICATION_ALERT[UPDATE] permission to use this service
     * Update an alert for an application
     */
    async updateApplicationAlertRaw(requestParameters: UpdateApplicationAlertRequest): Promise<runtime.ApiResponse<AlertTriggerEntity>> {
        if (requestParameters.alert === null || requestParameters.alert === undefined) {
            throw new runtime.RequiredError('alert','Required parameter requestParameters.alert was null or undefined when calling updateApplicationAlert.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling updateApplicationAlert.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateApplicationAlert.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateApplicationAlert.');
        }

        if (requestParameters.updateAlertTriggerEntity === null || requestParameters.updateAlertTriggerEntity === undefined) {
            throw new runtime.RequiredError('updateAlertTriggerEntity','Required parameter requestParameters.updateAlertTriggerEntity was null or undefined when calling updateApplicationAlert.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/alerts/{alert}`.replace(`{${"alert"}}`, encodeURIComponent(String(requestParameters.alert))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAlertTriggerEntityToJSON(requestParameters.updateAlertTriggerEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertTriggerEntityFromJSON(jsonValue));
    }

    /**
     * User must have the APPLICATION_ALERT[UPDATE] permission to use this service
     * Update an alert for an application
     */
    async updateApplicationAlert(requestParameters: UpdateApplicationAlertRequest): Promise<AlertTriggerEntity> {
        const response = await this.updateApplicationAlertRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update generic notification settings
     */
    async updateApplicationGeneralNotificationSettingsRaw(requestParameters: UpdateApplicationGeneralNotificationSettingsRequest): Promise<runtime.ApiResponse<GenericNotificationConfigEntity>> {
        if (requestParameters.notificationId === null || requestParameters.notificationId === undefined) {
            throw new runtime.RequiredError('notificationId','Required parameter requestParameters.notificationId was null or undefined when calling updateApplicationGeneralNotificationSettings.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling updateApplicationGeneralNotificationSettings.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateApplicationGeneralNotificationSettings.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateApplicationGeneralNotificationSettings.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/notificationsettings/{notificationId}`.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters.notificationId))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GenericNotificationConfigEntityToJSON(requestParameters.genericNotificationConfigEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericNotificationConfigEntityFromJSON(jsonValue));
    }

    /**
     * Update generic notification settings
     */
    async updateApplicationGeneralNotificationSettings(requestParameters: UpdateApplicationGeneralNotificationSettingsRequest): Promise<GenericNotificationConfigEntity> {
        const response = await this.updateApplicationGeneralNotificationSettingsRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the APPLICATION_METADATA[UPDATE] permission to use this service
     * Update an application metadata
     */
    async updateApplicationMetadataRaw(requestParameters: UpdateApplicationMetadataRequest): Promise<runtime.ApiResponse<ApplicationMetadataEntity>> {
        if (requestParameters.metadata === null || requestParameters.metadata === undefined) {
            throw new runtime.RequiredError('metadata','Required parameter requestParameters.metadata was null or undefined when calling updateApplicationMetadata.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling updateApplicationMetadata.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateApplicationMetadata.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateApplicationMetadata.');
        }

        if (requestParameters.updateApplicationMetadataEntity === null || requestParameters.updateApplicationMetadataEntity === undefined) {
            throw new runtime.RequiredError('updateApplicationMetadataEntity','Required parameter requestParameters.updateApplicationMetadataEntity was null or undefined when calling updateApplicationMetadata.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/metadata/{metadata}`.replace(`{${"metadata"}}`, encodeURIComponent(String(requestParameters.metadata))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApplicationMetadataEntityToJSON(requestParameters.updateApplicationMetadataEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationMetadataEntityFromJSON(jsonValue));
    }

    /**
     * User must have the APPLICATION_METADATA[UPDATE] permission to use this service
     * Update an application metadata
     */
    async updateApplicationMetadata(requestParameters: UpdateApplicationMetadataRequest): Promise<ApplicationMetadataEntity> {
        const response = await this.updateApplicationMetadataRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update portal notification settings
     */
    async updateApplicationPortalNotificationSettingsRaw(requestParameters: UpdateApplicationPortalNotificationSettingsRequest): Promise<runtime.ApiResponse<PortalNotificationConfigEntity>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling updateApplicationPortalNotificationSettings.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateApplicationPortalNotificationSettings.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateApplicationPortalNotificationSettings.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/notificationsettings`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PortalNotificationConfigEntityToJSON(requestParameters.portalNotificationConfigEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PortalNotificationConfigEntityFromJSON(jsonValue));
    }

    /**
     * Update portal notification settings
     */
    async updateApplicationPortalNotificationSettings(requestParameters: UpdateApplicationPortalNotificationSettingsRequest): Promise<PortalNotificationConfigEntity> {
        const response = await this.updateApplicationPortalNotificationSettingsRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetApplicationSubscriptionsExpandEnum {
    Keys = 'keys',
    Security = 'security'
}
