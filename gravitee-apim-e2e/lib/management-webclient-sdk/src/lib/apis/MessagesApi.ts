/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MessageEntity,
    MessageEntityFromJSON,
    MessageEntityToJSON,
} from '../models';

export interface CreateMessageRequest {
    envId: string;
    orgId: string;
    messageEntity?: MessageEntity;
}

/**
 * 
 */
export class MessagesApi extends runtime.BaseAPI {

    /**
     * User must have the MANAGEMENT_MESSAGE[CREATE] permission to use this service
     * Send a message to users depending on their profile
     */
    async createMessageRaw(requestParameters: CreateMessageRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createMessage.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createMessage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/messages`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessageEntityToJSON(requestParameters.messageEntity),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * User must have the MANAGEMENT_MESSAGE[CREATE] permission to use this service
     * Send a message to users depending on their profile
     */
    async createMessage(requestParameters: CreateMessageRequest): Promise<number> {
        const response = await this.createMessageRaw(requestParameters);
        return await response.value();
    }

}
