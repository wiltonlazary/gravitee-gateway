/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    NewExternalUserEntity,
    NewExternalUserEntityFromJSON,
    NewExternalUserEntityToJSON,
    RegisterUserEntity,
    RegisterUserEntityFromJSON,
    RegisterUserEntityToJSON,
    UserEntity,
    UserEntityFromJSON,
    UserEntityToJSON,
} from '../models';

export interface FinalizeUserRegistrationRequest {
    envId: string;
    orgId: string;
    registerUserEntity?: RegisterUserEntity;
}

export interface FinalizeUserRegistration1Request {
    orgId: string;
    registerUserEntity?: RegisterUserEntity;
}

export interface RegisterUserRequest {
    envId: string;
    orgId: string;
    newExternalUserEntity?: NewExternalUserEntity;
}

export interface RegisterUser1Request {
    orgId: string;
    newExternalUserEntity?: NewExternalUserEntity;
}

/**
 * 
 */
export class UserRegistrationApi extends runtime.BaseAPI {

    /**
     * User registration must be enabled
     * Finalize user registration
     */
    async finalizeUserRegistrationRaw(requestParameters: FinalizeUserRegistrationRequest): Promise<runtime.ApiResponse<UserEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling finalizeUserRegistration.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling finalizeUserRegistration.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/users/registration/finalize`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterUserEntityToJSON(requestParameters.registerUserEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserEntityFromJSON(jsonValue));
    }

    /**
     * User registration must be enabled
     * Finalize user registration
     */
    async finalizeUserRegistration(requestParameters: FinalizeUserRegistrationRequest): Promise<UserEntity> {
        const response = await this.finalizeUserRegistrationRaw(requestParameters);
        return await response.value();
    }

    /**
     * User registration must be enabled
     * Finalize user registration
     */
    async finalizeUserRegistration1Raw(requestParameters: FinalizeUserRegistration1Request): Promise<runtime.ApiResponse<UserEntity>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling finalizeUserRegistration1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/users/registration/finalize`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterUserEntityToJSON(requestParameters.registerUserEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserEntityFromJSON(jsonValue));
    }

    /**
     * User registration must be enabled
     * Finalize user registration
     */
    async finalizeUserRegistration1(requestParameters: FinalizeUserRegistration1Request): Promise<UserEntity> {
        const response = await this.finalizeUserRegistration1Raw(requestParameters);
        return await response.value();
    }

    /**
     * User registration must be enabled
     * Register a user
     */
    async registerUserRaw(requestParameters: RegisterUserRequest): Promise<runtime.ApiResponse<UserEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling registerUser.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling registerUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/users/registration`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewExternalUserEntityToJSON(requestParameters.newExternalUserEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserEntityFromJSON(jsonValue));
    }

    /**
     * User registration must be enabled
     * Register a user
     */
    async registerUser(requestParameters: RegisterUserRequest): Promise<UserEntity> {
        const response = await this.registerUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * User registration must be enabled
     * Register a user
     */
    async registerUser1Raw(requestParameters: RegisterUser1Request): Promise<runtime.ApiResponse<UserEntity>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling registerUser1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/users/registration`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewExternalUserEntityToJSON(requestParameters.newExternalUserEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserEntityFromJSON(jsonValue));
    }

    /**
     * User registration must be enabled
     * Register a user
     */
    async registerUser1(requestParameters: RegisterUser1Request): Promise<UserEntity> {
        const response = await this.registerUser1Raw(requestParameters);
        return await response.value();
    }

}
