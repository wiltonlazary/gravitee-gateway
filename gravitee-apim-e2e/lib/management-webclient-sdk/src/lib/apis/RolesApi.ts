/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MembershipListItem,
    MembershipListItemFromJSON,
    MembershipListItemToJSON,
    NewRoleEntity,
    NewRoleEntityFromJSON,
    NewRoleEntityToJSON,
    RoleEntity,
    RoleEntityFromJSON,
    RoleEntityToJSON,
    RoleMembership,
    RoleMembershipFromJSON,
    RoleMembershipToJSON,
    RoleScope,
    RoleScopeFromJSON,
    RoleScopeToJSON,
    UpdateRoleEntity,
    UpdateRoleEntityFromJSON,
    UpdateRoleEntityToJSON,
} from '../models';

export interface AddRoleToUserRequest {
    scope: RoleScope;
    role: string;
    orgId: string;
    roleMembership: RoleMembership;
}

export interface AddRoleToUser1Request {
    scope: RoleScope;
    role: string;
    envId: string;
    orgId: string;
    roleMembership: RoleMembership;
}

export interface CreateRoleRequest {
    scope: RoleScope;
    orgId: string;
    newRoleEntity: NewRoleEntity;
}

export interface CreateRole1Request {
    scope: RoleScope;
    envId: string;
    orgId: string;
    newRoleEntity: NewRoleEntity;
}

export interface DeleteRoleRequest {
    scope: RoleScope;
    role: string;
    orgId: string;
}

export interface DeleteRole1Request {
    scope: RoleScope;
    role: string;
    envId: string;
    orgId: string;
}

export interface DeleteRoleForUserRequest {
    scope: RoleScope;
    role: string;
    userId: string;
    orgId: string;
}

export interface DeleteRoleForUser1Request {
    scope: RoleScope;
    role: string;
    userId: string;
    envId: string;
    orgId: string;
}

export interface GetRoleRequest {
    scope: RoleScope;
    role: string;
    orgId: string;
}

export interface GetRole1Request {
    scope: RoleScope;
    role: string;
    envId: string;
    orgId: string;
}

export interface GetRoleScopesRequest {
    orgId: string;
}

export interface GetRoleScopes1Request {
    envId: string;
    orgId: string;
}

export interface GetRolesRequest {
    scope: RoleScope;
    orgId: string;
}

export interface GetRoles1Request {
    scope: RoleScope;
    envId: string;
    orgId: string;
}

export interface GetUsersPerRoleRequest {
    scope: RoleScope;
    role: string;
    orgId: string;
}

export interface GetUsersPerRole1Request {
    scope: RoleScope;
    role: string;
    envId: string;
    orgId: string;
}

export interface UpdateRoleRequest {
    scope: RoleScope;
    role: string;
    orgId: string;
    updateRoleEntity: UpdateRoleEntity;
}

export interface UpdateRole1Request {
    scope: RoleScope;
    role: string;
    envId: string;
    orgId: string;
    updateRoleEntity: UpdateRoleEntity;
}

/**
 * 
 */
export class RolesApi extends runtime.BaseAPI {

    /**
     * User must have the MANAGEMENT_ROLE[CREATE] and MANAGEMENT_ROLE[UPDATE] permission to use this service
     * Add or update a role for a user
     */
    async addRoleToUserRaw(requestParameters: AddRoleToUserRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling addRoleToUser.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling addRoleToUser.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling addRoleToUser.');
        }

        if (requestParameters.roleMembership === null || requestParameters.roleMembership === undefined) {
            throw new runtime.RequiredError('roleMembership','Required parameter requestParameters.roleMembership was null or undefined when calling addRoleToUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/rolescopes/{scope}/roles/{role}/users`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleMembershipToJSON(requestParameters.roleMembership),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_ROLE[CREATE] and MANAGEMENT_ROLE[UPDATE] permission to use this service
     * Add or update a role for a user
     */
    async addRoleToUser(requestParameters: AddRoleToUserRequest): Promise<void> {
        await this.addRoleToUserRaw(requestParameters);
    }

    /**
     * User must have the MANAGEMENT_ROLE[CREATE] and MANAGEMENT_ROLE[UPDATE] permission to use this service
     * Add or update a role for a user
     */
    async addRoleToUser1Raw(requestParameters: AddRoleToUser1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling addRoleToUser1.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling addRoleToUser1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling addRoleToUser1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling addRoleToUser1.');
        }

        if (requestParameters.roleMembership === null || requestParameters.roleMembership === undefined) {
            throw new runtime.RequiredError('roleMembership','Required parameter requestParameters.roleMembership was null or undefined when calling addRoleToUser1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/rolescopes/{scope}/roles/{role}/users`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleMembershipToJSON(requestParameters.roleMembership),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_ROLE[CREATE] and MANAGEMENT_ROLE[UPDATE] permission to use this service
     * Add or update a role for a user
     */
    async addRoleToUser1(requestParameters: AddRoleToUser1Request): Promise<void> {
        await this.addRoleToUser1Raw(requestParameters);
    }

    /**
     * User must have the MANAGEMENT_ROLE[CREATE] permission to use this service
     * Create a role
     */
    async createRoleRaw(requestParameters: CreateRoleRequest): Promise<runtime.ApiResponse<RoleEntity>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling createRole.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createRole.');
        }

        if (requestParameters.newRoleEntity === null || requestParameters.newRoleEntity === undefined) {
            throw new runtime.RequiredError('newRoleEntity','Required parameter requestParameters.newRoleEntity was null or undefined when calling createRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/rolescopes/{scope}/roles`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewRoleEntityToJSON(requestParameters.newRoleEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ROLE[CREATE] permission to use this service
     * Create a role
     */
    async createRole(requestParameters: CreateRoleRequest): Promise<RoleEntity> {
        const response = await this.createRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[CREATE] permission to use this service
     * Create a role
     */
    async createRole1Raw(requestParameters: CreateRole1Request): Promise<runtime.ApiResponse<RoleEntity>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling createRole1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createRole1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createRole1.');
        }

        if (requestParameters.newRoleEntity === null || requestParameters.newRoleEntity === undefined) {
            throw new runtime.RequiredError('newRoleEntity','Required parameter requestParameters.newRoleEntity was null or undefined when calling createRole1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/rolescopes/{scope}/roles`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewRoleEntityToJSON(requestParameters.newRoleEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ROLE[CREATE] permission to use this service
     * Create a role
     */
    async createRole1(requestParameters: CreateRole1Request): Promise<RoleEntity> {
        const response = await this.createRole1Raw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[DELETE] permission to use this service
     * Delete a role
     */
    async deleteRoleRaw(requestParameters: DeleteRoleRequest): Promise<runtime.ApiResponse<RoleEntity>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling deleteRole.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling deleteRole.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/rolescopes/{scope}/roles/{role}`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ROLE[DELETE] permission to use this service
     * Delete a role
     */
    async deleteRole(requestParameters: DeleteRoleRequest): Promise<RoleEntity> {
        const response = await this.deleteRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[DELETE] permission to use this service
     * Delete a role
     */
    async deleteRole1Raw(requestParameters: DeleteRole1Request): Promise<runtime.ApiResponse<RoleEntity>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling deleteRole1.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling deleteRole1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteRole1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteRole1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/rolescopes/{scope}/roles/{role}`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ROLE[DELETE] permission to use this service
     * Delete a role
     */
    async deleteRole1(requestParameters: DeleteRole1Request): Promise<RoleEntity> {
        const response = await this.deleteRole1Raw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[DELETE] permission to use this service
     * Delete the role for a given user
     */
    async deleteRoleForUserRaw(requestParameters: DeleteRoleForUserRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling deleteRoleForUser.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling deleteRoleForUser.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteRoleForUser.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteRoleForUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/rolescopes/{scope}/roles/{role}/users/{userId}`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_ROLE[DELETE] permission to use this service
     * Delete the role for a given user
     */
    async deleteRoleForUser(requestParameters: DeleteRoleForUserRequest): Promise<void> {
        await this.deleteRoleForUserRaw(requestParameters);
    }

    /**
     * User must have the MANAGEMENT_ROLE[DELETE] permission to use this service
     * Delete the role for a given user
     */
    async deleteRoleForUser1Raw(requestParameters: DeleteRoleForUser1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling deleteRoleForUser1.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling deleteRoleForUser1.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteRoleForUser1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteRoleForUser1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteRoleForUser1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/rolescopes/{scope}/roles/{role}/users/{userId}`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_ROLE[DELETE] permission to use this service
     * Delete the role for a given user
     */
    async deleteRoleForUser1(requestParameters: DeleteRoleForUser1Request): Promise<void> {
        await this.deleteRoleForUser1Raw(requestParameters);
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * Get a role
     */
    async getRoleRaw(requestParameters: GetRoleRequest): Promise<runtime.ApiResponse<RoleEntity>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling getRole.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling getRole.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/rolescopes/{scope}/roles/{role}`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * Get a role
     */
    async getRole(requestParameters: GetRoleRequest): Promise<RoleEntity> {
        const response = await this.getRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * Get a role
     */
    async getRole1Raw(requestParameters: GetRole1Request): Promise<runtime.ApiResponse<RoleEntity>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling getRole1.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling getRole1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getRole1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getRole1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/rolescopes/{scope}/roles/{role}`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * Get a role
     */
    async getRole1(requestParameters: GetRole1Request): Promise<RoleEntity> {
        const response = await this.getRole1Raw(requestParameters);
        return await response.value();
    }

    /**
     * List availables role scopes
     */
    async getRoleScopesRaw(requestParameters: GetRoleScopesRequest): Promise<runtime.ApiResponse<{ [key: string]: Array<string>; }>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getRoleScopes.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/rolescopes`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List availables role scopes
     */
    async getRoleScopes(requestParameters: GetRoleScopesRequest): Promise<{ [key: string]: Array<string>; }> {
        const response = await this.getRoleScopesRaw(requestParameters);
        return await response.value();
    }

    /**
     * List availables role scopes
     */
    async getRoleScopes1Raw(requestParameters: GetRoleScopes1Request): Promise<runtime.ApiResponse<{ [key: string]: Array<string>; }>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getRoleScopes1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getRoleScopes1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/rolescopes`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List availables role scopes
     */
    async getRoleScopes1(requestParameters: GetRoleScopes1Request): Promise<{ [key: string]: Array<string>; }> {
        const response = await this.getRoleScopes1Raw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * List of roles
     */
    async getRolesRaw(requestParameters: GetRolesRequest): Promise<runtime.ApiResponse<Array<RoleEntity>>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling getRoles.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getRoles.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/rolescopes/{scope}/roles`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * List of roles
     */
    async getRoles(requestParameters: GetRolesRequest): Promise<Array<RoleEntity>> {
        const response = await this.getRolesRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * List of roles
     */
    async getRoles1Raw(requestParameters: GetRoles1Request): Promise<runtime.ApiResponse<Array<RoleEntity>>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling getRoles1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getRoles1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getRoles1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/rolescopes/{scope}/roles`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * List of roles
     */
    async getRoles1(requestParameters: GetRoles1Request): Promise<Array<RoleEntity>> {
        const response = await this.getRoles1Raw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * List users with the given role
     */
    async getUsersPerRoleRaw(requestParameters: GetUsersPerRoleRequest): Promise<runtime.ApiResponse<Array<MembershipListItem>>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling getUsersPerRole.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling getUsersPerRole.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getUsersPerRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/rolescopes/{scope}/roles/{role}/users`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MembershipListItemFromJSON));
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * List users with the given role
     */
    async getUsersPerRole(requestParameters: GetUsersPerRoleRequest): Promise<Array<MembershipListItem>> {
        const response = await this.getUsersPerRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * List users with the given role
     */
    async getUsersPerRole1Raw(requestParameters: GetUsersPerRole1Request): Promise<runtime.ApiResponse<Array<MembershipListItem>>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling getUsersPerRole1.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling getUsersPerRole1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getUsersPerRole1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getUsersPerRole1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/rolescopes/{scope}/roles/{role}/users`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MembershipListItemFromJSON));
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * List users with the given role
     */
    async getUsersPerRole1(requestParameters: GetUsersPerRole1Request): Promise<Array<MembershipListItem>> {
        const response = await this.getUsersPerRole1Raw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[UPDATE] permission to use this service
     * Update a role
     */
    async updateRoleRaw(requestParameters: UpdateRoleRequest): Promise<runtime.ApiResponse<RoleEntity>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling updateRole.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling updateRole.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateRole.');
        }

        if (requestParameters.updateRoleEntity === null || requestParameters.updateRoleEntity === undefined) {
            throw new runtime.RequiredError('updateRoleEntity','Required parameter requestParameters.updateRoleEntity was null or undefined when calling updateRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/rolescopes/{scope}/roles/{role}`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRoleEntityToJSON(requestParameters.updateRoleEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ROLE[UPDATE] permission to use this service
     * Update a role
     */
    async updateRole(requestParameters: UpdateRoleRequest): Promise<RoleEntity> {
        const response = await this.updateRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[UPDATE] permission to use this service
     * Update a role
     */
    async updateRole1Raw(requestParameters: UpdateRole1Request): Promise<runtime.ApiResponse<RoleEntity>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling updateRole1.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling updateRole1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateRole1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateRole1.');
        }

        if (requestParameters.updateRoleEntity === null || requestParameters.updateRoleEntity === undefined) {
            throw new runtime.RequiredError('updateRoleEntity','Required parameter requestParameters.updateRoleEntity was null or undefined when calling updateRole1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/rolescopes/{scope}/roles/{role}`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRoleEntityToJSON(requestParameters.updateRoleEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ROLE[UPDATE] permission to use this service
     * Update a role
     */
    async updateRole1(requestParameters: UpdateRole1Request): Promise<RoleEntity> {
        const response = await this.updateRole1Raw(requestParameters);
        return await response.value();
    }

}
