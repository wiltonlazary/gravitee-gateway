/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FormDataBodyPart,
    FormDataBodyPartFromJSON,
    FormDataBodyPartToJSON,
    ImportPageEntity,
    ImportPageEntityFromJSON,
    ImportPageEntityToJSON,
    NewPageEntity,
    NewPageEntityFromJSON,
    NewPageEntityToJSON,
    PageEntity,
    PageEntityFromJSON,
    PageEntityToJSON,
    PageType,
    PageTypeFromJSON,
    PageTypeToJSON,
    UpdatePageEntity,
    UpdatePageEntityFromJSON,
    UpdatePageEntityToJSON,
} from '../models';

export interface AttachPortalPageMediaRequest {
    page: string;
    envId: string;
    orgId: string;
    file?: FormDataBodyPart;
    fileName?: string;
}

export interface CreatePortalPageRequest {
    envId: string;
    orgId: string;
    newPageEntity: NewPageEntity;
}

export interface DeletePortalPageRequest {
    page: string;
    envId: string;
    orgId: string;
}

export interface FetchAllPortalPagesRequest {
    envId: string;
    orgId: string;
}

export interface FetchPortalPageRequest {
    page: string;
    envId: string;
    orgId: string;
}

export interface GetPortalPageRequest {
    acceptLanguage?: string;
    page: string;
    portal?: boolean;
    translated?: boolean;
    envId: string;
    orgId: string;
}

export interface GetPortalPageContentRequest {
    page: string;
    envId: string;
    orgId: string;
}

export interface GetPortalPageMediaRequest {
    page: string;
    envId: string;
    orgId: string;
}

export interface GetPortalPagesRequest {
    acceptLanguage?: string;
    homepage?: boolean;
    published?: boolean;
    type?: PageType;
    parent?: string;
    name?: string;
    root?: boolean;
    translated?: boolean;
    envId: string;
    orgId: string;
}

export interface ImportPortalPageFromFilesRequest {
    envId: string;
    orgId: string;
    importPageEntity: ImportPageEntity;
}

export interface PartialUpdatePortalPageRequest {
    page: string;
    envId: string;
    orgId: string;
    updatePageEntity: UpdatePageEntity;
}

export interface UpdateImportedPortalPageFromFilesRequest {
    envId: string;
    orgId: string;
    importPageEntity: ImportPageEntity;
}

export interface UpdatePageContent1Request {
    page: string;
    envId: string;
    orgId: string;
    body: string;
}

export interface UpdatePortalPageRequest {
    page: string;
    envId: string;
    orgId: string;
    updatePageEntity: UpdatePageEntity;
}

/**
 * 
 */
export class PortalPagesApi extends runtime.BaseAPI {

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[UPDATE] permission to use this service
     * Attach a media to a portal page 
     */
    async attachPortalPageMediaRaw(requestParameters: AttachPortalPageMediaRequest): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling attachPortalPageMedia.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling attachPortalPageMedia.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling attachPortalPageMedia.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        if (requestParameters.fileName !== undefined) {
            formParams.append('fileName', requestParameters.fileName as any);
        }

        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/portal/pages/{page}/media`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[UPDATE] permission to use this service
     * Attach a media to a portal page 
     */
    async attachPortalPageMedia(requestParameters: AttachPortalPageMediaRequest): Promise<PageEntity> {
        const response = await this.attachPortalPageMediaRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[CREATE] permission to use this service
     * Create a page
     */
    async createPortalPageRaw(requestParameters: CreatePortalPageRequest): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createPortalPage.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createPortalPage.');
        }

        if (requestParameters.newPageEntity === null || requestParameters.newPageEntity === undefined) {
            throw new runtime.RequiredError('newPageEntity','Required parameter requestParameters.newPageEntity was null or undefined when calling createPortalPage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/portal/pages`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewPageEntityToJSON(requestParameters.newPageEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[CREATE] permission to use this service
     * Create a page
     */
    async createPortalPage(requestParameters: CreatePortalPageRequest): Promise<PageEntity> {
        const response = await this.createPortalPageRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[DELETE] permission to use this service
     * Delete a page
     */
    async deletePortalPageRaw(requestParameters: DeletePortalPageRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling deletePortalPage.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deletePortalPage.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deletePortalPage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/portal/pages/{page}`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[DELETE] permission to use this service
     * Delete a page
     */
    async deletePortalPage(requestParameters: DeletePortalPageRequest): Promise<void> {
        await this.deletePortalPageRaw(requestParameters);
    }

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[UPDATE] permission to use this service
     * Refresh all pages by calling their associated fetcher
     */
    async fetchAllPortalPagesRaw(requestParameters: FetchAllPortalPagesRequest): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling fetchAllPortalPages.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling fetchAllPortalPages.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/portal/pages/_fetch`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[UPDATE] permission to use this service
     * Refresh all pages by calling their associated fetcher
     */
    async fetchAllPortalPages(requestParameters: FetchAllPortalPagesRequest): Promise<PageEntity> {
        const response = await this.fetchAllPortalPagesRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[UPDATE] permission to use this service
     * Refresh page by calling the associated fetcher
     */
    async fetchPortalPageRaw(requestParameters: FetchPortalPageRequest): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling fetchPortalPage.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling fetchPortalPage.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling fetchPortalPage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/portal/pages/{page}/_fetch`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[UPDATE] permission to use this service
     * Refresh page by calling the associated fetcher
     */
    async fetchPortalPage(requestParameters: FetchPortalPageRequest): Promise<PageEntity> {
        const response = await this.fetchPortalPageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Every users can use this service
     * Get a page
     */
    async getPortalPageRaw(requestParameters: GetPortalPageRequest): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling getPortalPage.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPortalPage.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPortalPage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.portal !== undefined) {
            queryParameters['portal'] = requestParameters.portal;
        }

        if (requestParameters.translated !== undefined) {
            queryParameters['translated'] = requestParameters.translated;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/portal/pages/{page}`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * Every users can use this service
     * Get a page
     */
    async getPortalPage(requestParameters: GetPortalPageRequest): Promise<PageEntity> {
        const response = await this.getPortalPageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Every users can use this service
     * Get the page\'s content
     */
    async getPortalPageContentRaw(requestParameters: GetPortalPageContentRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling getPortalPageContent.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPortalPageContent.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPortalPageContent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/portal/pages/{page}/content`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Every users can use this service
     * Get the page\'s content
     */
    async getPortalPageContent(requestParameters: GetPortalPageContentRequest): Promise<string> {
        const response = await this.getPortalPageContentRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[READ] permission to use this service
     * Retrieve all media for a Portal page
     */
    async getPortalPageMediaRaw(requestParameters: GetPortalPageMediaRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling getPortalPageMedia.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPortalPageMedia.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPortalPageMedia.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/portal/pages/{page}/media`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[READ] permission to use this service
     * Retrieve all media for a Portal page
     */
    async getPortalPageMedia(requestParameters: GetPortalPageMediaRequest): Promise<void> {
        await this.getPortalPageMediaRaw(requestParameters);
    }

    /**
     * Every users can use this service
     * List pages
     */
    async getPortalPagesRaw(requestParameters: GetPortalPagesRequest): Promise<runtime.ApiResponse<Array<PageEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPortalPages.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPortalPages.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.homepage !== undefined) {
            queryParameters['homepage'] = requestParameters.homepage;
        }

        if (requestParameters.published !== undefined) {
            queryParameters['published'] = requestParameters.published;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.parent !== undefined) {
            queryParameters['parent'] = requestParameters.parent;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.root !== undefined) {
            queryParameters['root'] = requestParameters.root;
        }

        if (requestParameters.translated !== undefined) {
            queryParameters['translated'] = requestParameters.translated;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/portal/pages`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PageEntityFromJSON));
    }

    /**
     * Every users can use this service
     * List pages
     */
    async getPortalPages(requestParameters: GetPortalPagesRequest): Promise<Array<PageEntity>> {
        const response = await this.getPortalPagesRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[CREATE] permission to use this service
     * Import pages
     */
    async importPortalPageFromFilesRaw(requestParameters: ImportPortalPageFromFilesRequest): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling importPortalPageFromFiles.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling importPortalPageFromFiles.');
        }

        if (requestParameters.importPageEntity === null || requestParameters.importPageEntity === undefined) {
            throw new runtime.RequiredError('importPageEntity','Required parameter requestParameters.importPageEntity was null or undefined when calling importPortalPageFromFiles.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/portal/pages/_import`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImportPageEntityToJSON(requestParameters.importPageEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[CREATE] permission to use this service
     * Import pages
     */
    async importPortalPageFromFiles(requestParameters: ImportPortalPageFromFilesRequest): Promise<PageEntity> {
        const response = await this.importPortalPageFromFilesRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[UPDATE] permission to use this service
     * Update a page
     */
    async partialUpdatePortalPageRaw(requestParameters: PartialUpdatePortalPageRequest): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling partialUpdatePortalPage.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling partialUpdatePortalPage.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling partialUpdatePortalPage.');
        }

        if (requestParameters.updatePageEntity === null || requestParameters.updatePageEntity === undefined) {
            throw new runtime.RequiredError('updatePageEntity','Required parameter requestParameters.updatePageEntity was null or undefined when calling partialUpdatePortalPage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/portal/pages/{page}`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePageEntityToJSON(requestParameters.updatePageEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[UPDATE] permission to use this service
     * Update a page
     */
    async partialUpdatePortalPage(requestParameters: PartialUpdatePortalPageRequest): Promise<PageEntity> {
        const response = await this.partialUpdatePortalPageRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[CREATE] permission to use this service
     * Import pages
     */
    async updateImportedPortalPageFromFilesRaw(requestParameters: UpdateImportedPortalPageFromFilesRequest): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateImportedPortalPageFromFiles.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateImportedPortalPageFromFiles.');
        }

        if (requestParameters.importPageEntity === null || requestParameters.importPageEntity === undefined) {
            throw new runtime.RequiredError('importPageEntity','Required parameter requestParameters.importPageEntity was null or undefined when calling updateImportedPortalPageFromFiles.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/portal/pages/_import`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ImportPageEntityToJSON(requestParameters.importPageEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[CREATE] permission to use this service
     * Import pages
     */
    async updateImportedPortalPageFromFiles(requestParameters: UpdateImportedPortalPageFromFilesRequest): Promise<PageEntity> {
        const response = await this.updateImportedPortalPageFromFilesRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the PORTAL_DOCUMENTATION[UPDATE] permission to use this service
     * Update a page content
     */
    async updatePageContent1Raw(requestParameters: UpdatePageContent1Request): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling updatePageContent1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updatePageContent1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updatePageContent1.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updatePageContent1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/portal/pages/{page}/content`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * User must have the PORTAL_DOCUMENTATION[UPDATE] permission to use this service
     * Update a page content
     */
    async updatePageContent1(requestParameters: UpdatePageContent1Request): Promise<string> {
        const response = await this.updatePageContent1Raw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[UPDATE] permission to use this service
     * Update a page
     */
    async updatePortalPageRaw(requestParameters: UpdatePortalPageRequest): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling updatePortalPage.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updatePortalPage.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updatePortalPage.');
        }

        if (requestParameters.updatePageEntity === null || requestParameters.updatePageEntity === undefined) {
            throw new runtime.RequiredError('updatePageEntity','Required parameter requestParameters.updatePageEntity was null or undefined when calling updatePortalPage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/portal/pages/{page}`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePageEntityToJSON(requestParameters.updatePageEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[UPDATE] permission to use this service
     * Update a page
     */
    async updatePortalPage(requestParameters: UpdatePortalPageRequest): Promise<PageEntity> {
        const response = await this.updatePortalPageRaw(requestParameters);
        return await response.value();
    }

}
