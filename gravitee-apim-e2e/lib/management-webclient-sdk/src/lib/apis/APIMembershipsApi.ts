/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApiMembership,
    ApiMembershipFromJSON,
    ApiMembershipToJSON,
    MemberEntity,
    MemberEntityFromJSON,
    MemberEntityToJSON,
    MembershipListItem,
    MembershipListItemFromJSON,
    MembershipListItemToJSON,
    TransferOwnership,
    TransferOwnershipFromJSON,
    TransferOwnershipToJSON,
} from '../models';

export interface AddOrUpdateApiMemberRequest {
    api: string;
    envId: string;
    orgId: string;
    apiMembership: ApiMembership;
}

export interface DeleteApiMemberRequest {
    user: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiMembersRequest {
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiMembersPermissionsRequest {
    api: string;
    envId: string;
    orgId: string;
}

export interface TransferApiMemberOwnershipRequest {
    api: string;
    envId: string;
    orgId: string;
    transferOwnership: TransferOwnership;
}

/**
 * 
 */
export class APIMembershipsApi extends runtime.BaseAPI {

    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Add or update an API member
     */
    async addOrUpdateApiMemberRaw(requestParameters: AddOrUpdateApiMemberRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling addOrUpdateApiMember.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling addOrUpdateApiMember.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling addOrUpdateApiMember.');
        }

        if (requestParameters.apiMembership === null || requestParameters.apiMembership === undefined) {
            throw new runtime.RequiredError('apiMembership','Required parameter requestParameters.apiMembership was null or undefined when calling addOrUpdateApiMember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/members`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiMembershipToJSON(requestParameters.apiMembership),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Add or update an API member
     */
    async addOrUpdateApiMember(requestParameters: AddOrUpdateApiMemberRequest): Promise<void> {
        await this.addOrUpdateApiMemberRaw(requestParameters);
    }

    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Remove an API member
     */
    async deleteApiMemberRaw(requestParameters: DeleteApiMemberRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling deleteApiMember.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling deleteApiMember.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteApiMember.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteApiMember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.user !== undefined) {
            queryParameters['user'] = requestParameters.user;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/members`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Remove an API member
     */
    async deleteApiMember(requestParameters: DeleteApiMemberRequest): Promise<void> {
        await this.deleteApiMemberRaw(requestParameters);
    }

    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * List API members
     */
    async getApiMembersRaw(requestParameters: GetApiMembersRequest): Promise<runtime.ApiResponse<Array<MembershipListItem>>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiMembers.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiMembers.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiMembers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/members`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MembershipListItemFromJSON));
    }

    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * List API members
     */
    async getApiMembers(requestParameters: GetApiMembersRequest): Promise<Array<MembershipListItem>> {
        const response = await this.getApiMembersRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Get API members
     */
    async getApiMembersPermissionsRaw(requestParameters: GetApiMembersPermissionsRequest): Promise<runtime.ApiResponse<Array<MemberEntity>>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiMembersPermissions.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiMembersPermissions.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiMembersPermissions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/members/permissions`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MemberEntityFromJSON));
    }

    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Get API members
     */
    async getApiMembersPermissions(requestParameters: GetApiMembersPermissionsRequest): Promise<Array<MemberEntity>> {
        const response = await this.getApiMembersPermissionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the TRANSFER_OWNERSHIP permission to use this service
     * Transfer the ownership of the API
     */
    async transferApiMemberOwnershipRaw(requestParameters: TransferApiMemberOwnershipRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling transferApiMemberOwnership.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling transferApiMemberOwnership.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling transferApiMemberOwnership.');
        }

        if (requestParameters.transferOwnership === null || requestParameters.transferOwnership === undefined) {
            throw new runtime.RequiredError('transferOwnership','Required parameter requestParameters.transferOwnership was null or undefined when calling transferApiMemberOwnership.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/members/transfer_ownership`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferOwnershipToJSON(requestParameters.transferOwnership),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the TRANSFER_OWNERSHIP permission to use this service
     * Transfer the ownership of the API
     */
    async transferApiMemberOwnership(requestParameters: TransferApiMemberOwnershipRequest): Promise<void> {
        await this.transferApiMemberOwnershipRaw(requestParameters);
    }

}
