/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    NewTagEntity,
    NewTagEntityFromJSON,
    NewTagEntityToJSON,
    TagEntity,
    TagEntityFromJSON,
    TagEntityToJSON,
    UpdateTagEntity,
    UpdateTagEntityFromJSON,
    UpdateTagEntityToJSON,
} from '../models';

export interface CreateTagRequest {
    orgId: string;
    newTagEntity: NewTagEntity;
}

export interface CreateTag1Request {
    envId: string;
    orgId: string;
    newTagEntity: NewTagEntity;
}

export interface DeleteTagRequest {
    tag: string;
    orgId: string;
}

export interface DeleteTag1Request {
    tag: string;
    envId: string;
    orgId: string;
}

export interface GetTagRequest {
    tag: string;
    orgId: string;
}

export interface GetTag1Request {
    tag: string;
    envId: string;
    orgId: string;
}

export interface GetTagsRequest {
    orgId: string;
}

export interface GetTags1Request {
    envId: string;
    orgId: string;
}

export interface UpdateTagRequest {
    tag: string;
    orgId: string;
    updateTagEntity: UpdateTagEntity;
}

export interface UpdateTag1Request {
    tag: string;
    envId: string;
    orgId: string;
    updateTagEntity: UpdateTagEntity;
}

/**
 * 
 */
export class ShardingTagsApi extends runtime.BaseAPI {

    /**
     * User must have the MANAGEMENT_TAG[CREATE] permission to use this service
     * Create a sharding tag
     */
    async createTagRaw(requestParameters: CreateTagRequest): Promise<runtime.ApiResponse<TagEntity>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createTag.');
        }

        if (requestParameters.newTagEntity === null || requestParameters.newTagEntity === undefined) {
            throw new runtime.RequiredError('newTagEntity','Required parameter requestParameters.newTagEntity was null or undefined when calling createTag.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/tags`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewTagEntityToJSON(requestParameters.newTagEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TagEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_TAG[CREATE] permission to use this service
     * Create a sharding tag
     */
    async createTag(requestParameters: CreateTagRequest): Promise<TagEntity> {
        const response = await this.createTagRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_TAG[CREATE] permission to use this service
     * Create a sharding tag
     */
    async createTag1Raw(requestParameters: CreateTag1Request): Promise<runtime.ApiResponse<TagEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createTag1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createTag1.');
        }

        if (requestParameters.newTagEntity === null || requestParameters.newTagEntity === undefined) {
            throw new runtime.RequiredError('newTagEntity','Required parameter requestParameters.newTagEntity was null or undefined when calling createTag1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/tags`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewTagEntityToJSON(requestParameters.newTagEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TagEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_TAG[CREATE] permission to use this service
     * Create a sharding tag
     */
    async createTag1(requestParameters: CreateTag1Request): Promise<TagEntity> {
        const response = await this.createTag1Raw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_TAG[DELETE] permission to use this service
     * Delete an existing sharding tag
     */
    async deleteTagRaw(requestParameters: DeleteTagRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling deleteTag.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteTag.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/tags/{tag}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_TAG[DELETE] permission to use this service
     * Delete an existing sharding tag
     */
    async deleteTag(requestParameters: DeleteTagRequest): Promise<void> {
        await this.deleteTagRaw(requestParameters);
    }

    /**
     * User must have the MANAGEMENT_TAG[DELETE] permission to use this service
     * Delete an existing sharding tag
     */
    async deleteTag1Raw(requestParameters: DeleteTag1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling deleteTag1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteTag1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteTag1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/tags/{tag}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_TAG[DELETE] permission to use this service
     * Delete an existing sharding tag
     */
    async deleteTag1(requestParameters: DeleteTag1Request): Promise<void> {
        await this.deleteTag1Raw(requestParameters);
    }

    /**
     * User must have the MANAGEMENT_TAG[READ] permission to use this service
     * Get a sharding tag
     */
    async getTagRaw(requestParameters: GetTagRequest): Promise<runtime.ApiResponse<TagEntity>> {
        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling getTag.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getTag.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/tags/{tag}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TagEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_TAG[READ] permission to use this service
     * Get a sharding tag
     */
    async getTag(requestParameters: GetTagRequest): Promise<TagEntity> {
        const response = await this.getTagRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_TAG[READ] permission to use this service
     * Get a sharding tag
     */
    async getTag1Raw(requestParameters: GetTag1Request): Promise<runtime.ApiResponse<TagEntity>> {
        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling getTag1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getTag1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getTag1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/tags/{tag}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TagEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_TAG[READ] permission to use this service
     * Get a sharding tag
     */
    async getTag1(requestParameters: GetTag1Request): Promise<TagEntity> {
        const response = await this.getTag1Raw(requestParameters);
        return await response.value();
    }

    /**
     * List sharding tags
     */
    async getTagsRaw(requestParameters: GetTagsRequest): Promise<runtime.ApiResponse<Array<TagEntity>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getTags.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/tags`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagEntityFromJSON));
    }

    /**
     * List sharding tags
     */
    async getTags(requestParameters: GetTagsRequest): Promise<Array<TagEntity>> {
        const response = await this.getTagsRaw(requestParameters);
        return await response.value();
    }

    /**
     * List sharding tags
     */
    async getTags1Raw(requestParameters: GetTags1Request): Promise<runtime.ApiResponse<Array<TagEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getTags1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getTags1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/tags`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagEntityFromJSON));
    }

    /**
     * List sharding tags
     */
    async getTags1(requestParameters: GetTags1Request): Promise<Array<TagEntity>> {
        const response = await this.getTags1Raw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_TAG[UPDATE] permission to use this service
     * Update an existing sharding tag
     */
    async updateTagRaw(requestParameters: UpdateTagRequest): Promise<runtime.ApiResponse<TagEntity>> {
        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling updateTag.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateTag.');
        }

        if (requestParameters.updateTagEntity === null || requestParameters.updateTagEntity === undefined) {
            throw new runtime.RequiredError('updateTagEntity','Required parameter requestParameters.updateTagEntity was null or undefined when calling updateTag.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/tags/{tag}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTagEntityToJSON(requestParameters.updateTagEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TagEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_TAG[UPDATE] permission to use this service
     * Update an existing sharding tag
     */
    async updateTag(requestParameters: UpdateTagRequest): Promise<TagEntity> {
        const response = await this.updateTagRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_TAG[UPDATE] permission to use this service
     * Update an existing sharding tag
     */
    async updateTag1Raw(requestParameters: UpdateTag1Request): Promise<runtime.ApiResponse<TagEntity>> {
        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling updateTag1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateTag1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateTag1.');
        }

        if (requestParameters.updateTagEntity === null || requestParameters.updateTagEntity === undefined) {
            throw new runtime.RequiredError('updateTagEntity','Required parameter requestParameters.updateTagEntity was null or undefined when calling updateTag1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/tags/{tag}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTagEntityToJSON(requestParameters.updateTagEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TagEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_TAG[UPDATE] permission to use this service
     * Update an existing sharding tag
     */
    async updateTag1(requestParameters: UpdateTag1Request): Promise<TagEntity> {
        const response = await this.updateTag1Raw(requestParameters);
        return await response.value();
    }

}
