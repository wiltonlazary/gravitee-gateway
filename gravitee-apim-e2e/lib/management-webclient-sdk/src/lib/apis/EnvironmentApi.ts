/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EnvironmentEntity,
    EnvironmentEntityFromJSON,
    EnvironmentEntityToJSON,
    IdentityProviderActivationEntity,
    IdentityProviderActivationEntityFromJSON,
    IdentityProviderActivationEntityToJSON,
} from '../models';

export interface GetEnvironmentRequest {
    envId: string;
    orgId: string;
}

export interface UpdateEnvironmentIdentitiesRequest {
    envId: string;
    orgId: string;
    identityProviderActivationEntity?: Array<IdentityProviderActivationEntity>;
}

/**
 * 
 */
export class EnvironmentApi extends runtime.BaseAPI {

    /**
     * Get an Environment
     */
    async getEnvironmentRaw(requestParameters: GetEnvironmentRequest): Promise<runtime.ApiResponse<EnvironmentEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getEnvironment.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getEnvironment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EnvironmentEntityFromJSON(jsonValue));
    }

    /**
     * Get an Environment
     */
    async getEnvironment(requestParameters: GetEnvironmentRequest): Promise<EnvironmentEntity> {
        const response = await this.getEnvironmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update available environment identities
     */
    async updateEnvironmentIdentitiesRaw(requestParameters: UpdateEnvironmentIdentitiesRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateEnvironmentIdentities.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateEnvironmentIdentities.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/identities`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.identityProviderActivationEntity.map(IdentityProviderActivationEntityToJSON),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update available environment identities
     */
    async updateEnvironmentIdentities(requestParameters: UpdateEnvironmentIdentitiesRequest): Promise<void> {
        await this.updateEnvironmentIdentitiesRaw(requestParameters);
    }

}
