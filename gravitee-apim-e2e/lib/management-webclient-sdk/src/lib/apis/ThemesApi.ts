/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    NewThemeEntity,
    NewThemeEntityFromJSON,
    NewThemeEntityToJSON,
    ThemeEntity,
    ThemeEntityFromJSON,
    ThemeEntityToJSON,
    UpdateThemeEntity,
    UpdateThemeEntityFromJSON,
    UpdateThemeEntityToJSON,
} from '../models';

export interface CreateThemeRequest {
    envId: string;
    orgId: string;
    newThemeEntity: NewThemeEntity;
}

export interface DeleteThemeRequest {
    themeId: string;
    envId: string;
    orgId: string;
}

export interface GetFaviconRequest {
    themeId: string;
    envId: string;
    orgId: string;
}

export interface GetLogoLightRequest {
    themeId: string;
    envId: string;
    orgId: string;
}

export interface GetThemeRequest {
    themeId: string;
    envId: string;
    orgId: string;
}

export interface GetThemeBackgroundRequest {
    themeId: string;
    envId: string;
    orgId: string;
}

export interface GetThemeLogoRequest {
    themeId: string;
    envId: string;
    orgId: string;
}

export interface ResetThemeRequest {
    themeId: string;
    envId: string;
    orgId: string;
}

export interface UpdateThemeRequest {
    themeId: string;
    envId: string;
    orgId: string;
    updateThemeEntity: UpdateThemeEntity;
}

/**
 * 
 */
export class ThemesApi extends runtime.BaseAPI {

    /**
     */
    async createThemeRaw(requestParameters: CreateThemeRequest): Promise<runtime.ApiResponse<ThemeEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createTheme.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createTheme.');
        }

        if (requestParameters.newThemeEntity === null || requestParameters.newThemeEntity === undefined) {
            throw new runtime.RequiredError('newThemeEntity','Required parameter requestParameters.newThemeEntity was null or undefined when calling createTheme.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/themes`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewThemeEntityToJSON(requestParameters.newThemeEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeEntityFromJSON(jsonValue));
    }

    /**
     */
    async createTheme(requestParameters: CreateThemeRequest): Promise<ThemeEntity> {
        const response = await this.createThemeRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteThemeRaw(requestParameters: DeleteThemeRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.themeId === null || requestParameters.themeId === undefined) {
            throw new runtime.RequiredError('themeId','Required parameter requestParameters.themeId was null or undefined when calling deleteTheme.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteTheme.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteTheme.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/themes/{themeId}`.replace(`{${"themeId"}}`, encodeURIComponent(String(requestParameters.themeId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteTheme(requestParameters: DeleteThemeRequest): Promise<void> {
        await this.deleteThemeRaw(requestParameters);
    }

    /**
     */
    async getFaviconRaw(requestParameters: GetFaviconRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.themeId === null || requestParameters.themeId === undefined) {
            throw new runtime.RequiredError('themeId','Required parameter requestParameters.themeId was null or undefined when calling getFavicon.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getFavicon.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getFavicon.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/themes/{themeId}/favicon`.replace(`{${"themeId"}}`, encodeURIComponent(String(requestParameters.themeId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getFavicon(requestParameters: GetFaviconRequest): Promise<void> {
        await this.getFaviconRaw(requestParameters);
    }

    /**
     */
    async getLogoLightRaw(requestParameters: GetLogoLightRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.themeId === null || requestParameters.themeId === undefined) {
            throw new runtime.RequiredError('themeId','Required parameter requestParameters.themeId was null or undefined when calling getLogoLight.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getLogoLight.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getLogoLight.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/themes/{themeId}/optionalLogo`.replace(`{${"themeId"}}`, encodeURIComponent(String(requestParameters.themeId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getLogoLight(requestParameters: GetLogoLightRequest): Promise<void> {
        await this.getLogoLightRaw(requestParameters);
    }

    /**
     */
    async getThemeRaw(requestParameters: GetThemeRequest): Promise<runtime.ApiResponse<ThemeEntity>> {
        if (requestParameters.themeId === null || requestParameters.themeId === undefined) {
            throw new runtime.RequiredError('themeId','Required parameter requestParameters.themeId was null or undefined when calling getTheme.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getTheme.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getTheme.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/themes/{themeId}`.replace(`{${"themeId"}}`, encodeURIComponent(String(requestParameters.themeId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeEntityFromJSON(jsonValue));
    }

    /**
     */
    async getTheme(requestParameters: GetThemeRequest): Promise<ThemeEntity> {
        const response = await this.getThemeRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getThemeBackgroundRaw(requestParameters: GetThemeBackgroundRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.themeId === null || requestParameters.themeId === undefined) {
            throw new runtime.RequiredError('themeId','Required parameter requestParameters.themeId was null or undefined when calling getThemeBackground.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getThemeBackground.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getThemeBackground.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/themes/{themeId}/backgroundImage`.replace(`{${"themeId"}}`, encodeURIComponent(String(requestParameters.themeId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getThemeBackground(requestParameters: GetThemeBackgroundRequest): Promise<void> {
        await this.getThemeBackgroundRaw(requestParameters);
    }

    /**
     */
    async getThemeLogoRaw(requestParameters: GetThemeLogoRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.themeId === null || requestParameters.themeId === undefined) {
            throw new runtime.RequiredError('themeId','Required parameter requestParameters.themeId was null or undefined when calling getThemeLogo.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getThemeLogo.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getThemeLogo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/themes/{themeId}/logo`.replace(`{${"themeId"}}`, encodeURIComponent(String(requestParameters.themeId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getThemeLogo(requestParameters: GetThemeLogoRequest): Promise<void> {
        await this.getThemeLogoRaw(requestParameters);
    }

    /**
     */
    async resetThemeRaw(requestParameters: ResetThemeRequest): Promise<runtime.ApiResponse<ThemeEntity>> {
        if (requestParameters.themeId === null || requestParameters.themeId === undefined) {
            throw new runtime.RequiredError('themeId','Required parameter requestParameters.themeId was null or undefined when calling resetTheme.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling resetTheme.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling resetTheme.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/themes/{themeId}/reset`.replace(`{${"themeId"}}`, encodeURIComponent(String(requestParameters.themeId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeEntityFromJSON(jsonValue));
    }

    /**
     */
    async resetTheme(requestParameters: ResetThemeRequest): Promise<ThemeEntity> {
        const response = await this.resetThemeRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateThemeRaw(requestParameters: UpdateThemeRequest): Promise<runtime.ApiResponse<ThemeEntity>> {
        if (requestParameters.themeId === null || requestParameters.themeId === undefined) {
            throw new runtime.RequiredError('themeId','Required parameter requestParameters.themeId was null or undefined when calling updateTheme.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateTheme.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateTheme.');
        }

        if (requestParameters.updateThemeEntity === null || requestParameters.updateThemeEntity === undefined) {
            throw new runtime.RequiredError('updateThemeEntity','Required parameter requestParameters.updateThemeEntity was null or undefined when calling updateTheme.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/themes/{themeId}`.replace(`{${"themeId"}}`, encodeURIComponent(String(requestParameters.themeId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateThemeEntityToJSON(requestParameters.updateThemeEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeEntityFromJSON(jsonValue));
    }

    /**
     */
    async updateTheme(requestParameters: UpdateThemeRequest): Promise<ThemeEntity> {
        const response = await this.updateThemeRaw(requestParameters);
        return await response.value();
    }

}
