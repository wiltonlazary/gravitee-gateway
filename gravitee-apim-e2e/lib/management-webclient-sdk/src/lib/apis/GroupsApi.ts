/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GroupEntity,
    GroupEntityFromJSON,
    GroupEntityToJSON,
    GroupMemberEntity,
    GroupMemberEntityFromJSON,
    GroupMemberEntityToJSON,
    GroupMembership,
    GroupMembershipFromJSON,
    GroupMembershipToJSON,
    GroupSimpleEntity,
    GroupSimpleEntityFromJSON,
    GroupSimpleEntityToJSON,
    InvitationEntity,
    InvitationEntityFromJSON,
    InvitationEntityToJSON,
    NewGroupEntity,
    NewGroupEntityFromJSON,
    NewGroupEntityToJSON,
    NewInvitationEntity,
    NewInvitationEntityFromJSON,
    NewInvitationEntityToJSON,
    UpdateGroupEntity,
    UpdateGroupEntityFromJSON,
    UpdateGroupEntityToJSON,
    UpdateInvitationEntity,
    UpdateInvitationEntityFromJSON,
    UpdateInvitationEntityToJSON,
} from '../models';

export interface AddGroupMemberRequest {
    group: string;
    type?: string;
    envId: string;
    orgId: string;
}

export interface AddOrUpdateGroupMemberRequest {
    group: string;
    envId: string;
    orgId: string;
    groupMembership: Array<GroupMembership>;
}

export interface CreateGroupRequest {
    envId: string;
    orgId: string;
    newGroupEntity: NewGroupEntity;
}

export interface CreateGroupInvitationRequest {
    group: string;
    envId: string;
    orgId: string;
    newInvitationEntity: NewInvitationEntity;
}

export interface DeleteGroupRequest {
    group: string;
    envId: string;
    orgId: string;
}

export interface DeleteGroupInvitationRequest {
    invitation: string;
    group: string;
    envId: string;
    orgId: string;
}

export interface DeleteGroupMemberRequest {
    member: string;
    group: string;
    envId: string;
    orgId: string;
}

export interface GetGroupRequest {
    group: string;
    envId: string;
    orgId: string;
}

export interface GetGroupInvitationsRequest {
    group: string;
    envId: string;
    orgId: string;
}

export interface GetGroupMembersRequest {
    group: string;
    envId: string;
    orgId: string;
}

export interface GetGroupMembers1Request {
    size?: number;
    page?: number;
    group: string;
    envId: string;
    orgId: string;
}

export interface GetGroupMembershipsRequest {
    group: string;
    type?: string;
    envId: string;
    orgId: string;
}

export interface GetGroupsRequest {
    envId: string;
    orgId: string;
}

export interface GetGroups1Request {
    orgId: string;
}

export interface UpdateGroupRequest {
    group: string;
    envId: string;
    orgId: string;
    updateGroupEntity: UpdateGroupEntity;
}

export interface UpdateGroupInvitationRequest {
    invitation: string;
    group: string;
    envId: string;
    orgId: string;
    updateInvitationEntity: UpdateInvitationEntity;
}

/**
 * 
 */
export class GroupsApi extends runtime.BaseAPI {

    /**
     * Associate a group to existing APIs or Applications
     */
    async addGroupMemberRaw(requestParameters: AddGroupMemberRequest): Promise<runtime.ApiResponse<GroupEntity>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling addGroupMember.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling addGroupMember.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling addGroupMember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/memberships`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupEntityFromJSON(jsonValue));
    }

    /**
     * Associate a group to existing APIs or Applications
     */
    async addGroupMember(requestParameters: AddGroupMemberRequest): Promise<GroupEntity> {
        const response = await this.addGroupMemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * Add or update a group member
     */
    async addOrUpdateGroupMemberRaw(requestParameters: AddOrUpdateGroupMemberRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling addOrUpdateGroupMember.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling addOrUpdateGroupMember.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling addOrUpdateGroupMember.');
        }

        if (requestParameters.groupMembership === null || requestParameters.groupMembership === undefined) {
            throw new runtime.RequiredError('groupMembership','Required parameter requestParameters.groupMembership was null or undefined when calling addOrUpdateGroupMember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/members`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.groupMembership.map(GroupMembershipToJSON),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add or update a group member
     */
    async addOrUpdateGroupMember(requestParameters: AddOrUpdateGroupMemberRequest): Promise<void> {
        await this.addOrUpdateGroupMemberRaw(requestParameters);
    }

    /**
     * Create a new group.
     * Create group
     */
    async createGroupRaw(requestParameters: CreateGroupRequest): Promise<runtime.ApiResponse<GroupEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createGroup.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createGroup.');
        }

        if (requestParameters.newGroupEntity === null || requestParameters.newGroupEntity === undefined) {
            throw new runtime.RequiredError('newGroupEntity','Required parameter requestParameters.newGroupEntity was null or undefined when calling createGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewGroupEntityToJSON(requestParameters.newGroupEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupEntityFromJSON(jsonValue));
    }

    /**
     * Create a new group.
     * Create group
     */
    async createGroup(requestParameters: CreateGroupRequest): Promise<GroupEntity> {
        const response = await this.createGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the GROUP_INVITATION[CREATE] permission to use this service
     * Create an invitation to join a group
     */
    async createGroupInvitationRaw(requestParameters: CreateGroupInvitationRequest): Promise<runtime.ApiResponse<InvitationEntity>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling createGroupInvitation.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createGroupInvitation.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createGroupInvitation.');
        }

        if (requestParameters.newInvitationEntity === null || requestParameters.newInvitationEntity === undefined) {
            throw new runtime.RequiredError('newInvitationEntity','Required parameter requestParameters.newInvitationEntity was null or undefined when calling createGroupInvitation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/invitations`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewInvitationEntityToJSON(requestParameters.newInvitationEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationEntityFromJSON(jsonValue));
    }

    /**
     * User must have the GROUP_INVITATION[CREATE] permission to use this service
     * Create an invitation to join a group
     */
    async createGroupInvitation(requestParameters: CreateGroupInvitationRequest): Promise<InvitationEntity> {
        const response = await this.createGroupInvitationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an existing group
     */
    async deleteGroupRaw(requestParameters: DeleteGroupRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling deleteGroup.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteGroup.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an existing group
     */
    async deleteGroup(requestParameters: DeleteGroupRequest): Promise<void> {
        await this.deleteGroupRaw(requestParameters);
    }

    /**
     * User must have the GROUP_INVITATION[DELETE] permission to use this service
     * Delete an invitation to join a group
     */
    async deleteGroupInvitationRaw(requestParameters: DeleteGroupInvitationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.invitation === null || requestParameters.invitation === undefined) {
            throw new runtime.RequiredError('invitation','Required parameter requestParameters.invitation was null or undefined when calling deleteGroupInvitation.');
        }

        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling deleteGroupInvitation.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteGroupInvitation.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteGroupInvitation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/invitations/{invitation}`.replace(`{${"invitation"}}`, encodeURIComponent(String(requestParameters.invitation))).replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the GROUP_INVITATION[DELETE] permission to use this service
     * Delete an invitation to join a group
     */
    async deleteGroupInvitation(requestParameters: DeleteGroupInvitationRequest): Promise<void> {
        await this.deleteGroupInvitationRaw(requestParameters);
    }

    /**
     * Remove a group member
     */
    async deleteGroupMemberRaw(requestParameters: DeleteGroupMemberRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.member === null || requestParameters.member === undefined) {
            throw new runtime.RequiredError('member','Required parameter requestParameters.member was null or undefined when calling deleteGroupMember.');
        }

        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling deleteGroupMember.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteGroupMember.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteGroupMember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/members/{member}`.replace(`{${"member"}}`, encodeURIComponent(String(requestParameters.member))).replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a group member
     */
    async deleteGroupMember(requestParameters: DeleteGroupMemberRequest): Promise<void> {
        await this.deleteGroupMemberRaw(requestParameters);
    }

    /**
     * Get a group
     */
    async getGroupRaw(requestParameters: GetGroupRequest): Promise<runtime.ApiResponse<GroupEntity>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling getGroup.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getGroup.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupEntityFromJSON(jsonValue));
    }

    /**
     * Get a group
     */
    async getGroup(requestParameters: GetGroupRequest): Promise<GroupEntity> {
        const response = await this.getGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the GROUP_INVITATION[READ] permission to use this service
     * List existing invitations of a group
     */
    async getGroupInvitationsRaw(requestParameters: GetGroupInvitationsRequest): Promise<runtime.ApiResponse<Array<InvitationEntity>>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling getGroupInvitations.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getGroupInvitations.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getGroupInvitations.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/invitations`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InvitationEntityFromJSON));
    }

    /**
     * User must have the GROUP_INVITATION[READ] permission to use this service
     * List existing invitations of a group
     */
    async getGroupInvitations(requestParameters: GetGroupInvitationsRequest): Promise<Array<InvitationEntity>> {
        const response = await this.getGroupInvitationsRaw(requestParameters);
        return await response.value();
    }

    /**
     * List group members
     */
    async getGroupMembersRaw(requestParameters: GetGroupMembersRequest): Promise<runtime.ApiResponse<Array<GroupMemberEntity>>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling getGroupMembers.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getGroupMembers.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getGroupMembers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/members`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupMemberEntityFromJSON));
    }

    /**
     * List group members
     */
    async getGroupMembers(requestParameters: GetGroupMembersRequest): Promise<Array<GroupMemberEntity>> {
        const response = await this.getGroupMembersRaw(requestParameters);
        return await response.value();
    }

    /**
     * List group members with pagination
     */
    async getGroupMembers1Raw(requestParameters: GetGroupMembers1Request): Promise<runtime.ApiResponse<Array<GroupMemberEntity>>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling getGroupMembers1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getGroupMembers1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getGroupMembers1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/members/_paged`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupMemberEntityFromJSON));
    }

    /**
     * List group members with pagination
     */
    async getGroupMembers1(requestParameters: GetGroupMembers1Request): Promise<Array<GroupMemberEntity>> {
        const response = await this.getGroupMembers1Raw(requestParameters);
        return await response.value();
    }

    /**
     * List APIs or applications linked to this group
     */
    async getGroupMembershipsRaw(requestParameters: GetGroupMembershipsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling getGroupMemberships.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getGroupMemberships.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getGroupMemberships.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/memberships`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List APIs or applications linked to this group
     */
    async getGroupMemberships(requestParameters: GetGroupMembershipsRequest): Promise<void> {
        await this.getGroupMembershipsRaw(requestParameters);
    }

    /**
     * Find all groups, or a specific type of groups.Only administrators could see all groups.Only users with MANAGE_API permissions could see API groups.
     * Find groups
     */
    async getGroupsRaw(requestParameters: GetGroupsRequest): Promise<runtime.ApiResponse<Array<GroupEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getGroups.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getGroups.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupEntityFromJSON));
    }

    /**
     * Find all groups, or a specific type of groups.Only administrators could see all groups.Only users with MANAGE_API permissions could see API groups.
     * Find groups
     */
    async getGroups(requestParameters: GetGroupsRequest): Promise<Array<GroupEntity>> {
        const response = await this.getGroupsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Find all groups for current organizationOnly administrators could see all groups.Only users with MANAGE_API permissions could see API groups.
     * Find groups
     */
    async getGroups1Raw(requestParameters: GetGroups1Request): Promise<runtime.ApiResponse<Array<GroupSimpleEntity>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getGroups1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/groups`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupSimpleEntityFromJSON));
    }

    /**
     * Find all groups for current organizationOnly administrators could see all groups.Only users with MANAGE_API permissions could see API groups.
     * Find groups
     */
    async getGroups1(requestParameters: GetGroups1Request): Promise<Array<GroupSimpleEntity>> {
        const response = await this.getGroups1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing group
     */
    async updateGroupRaw(requestParameters: UpdateGroupRequest): Promise<runtime.ApiResponse<GroupEntity>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling updateGroup.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateGroup.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateGroup.');
        }

        if (requestParameters.updateGroupEntity === null || requestParameters.updateGroupEntity === undefined) {
            throw new runtime.RequiredError('updateGroupEntity','Required parameter requestParameters.updateGroupEntity was null or undefined when calling updateGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGroupEntityToJSON(requestParameters.updateGroupEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupEntityFromJSON(jsonValue));
    }

    /**
     * Update an existing group
     */
    async updateGroup(requestParameters: UpdateGroupRequest): Promise<GroupEntity> {
        const response = await this.updateGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the GROUP_INVITATION[UPDATE] permission to use this service
     * Update an invitation to join a group
     */
    async updateGroupInvitationRaw(requestParameters: UpdateGroupInvitationRequest): Promise<runtime.ApiResponse<InvitationEntity>> {
        if (requestParameters.invitation === null || requestParameters.invitation === undefined) {
            throw new runtime.RequiredError('invitation','Required parameter requestParameters.invitation was null or undefined when calling updateGroupInvitation.');
        }

        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling updateGroupInvitation.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateGroupInvitation.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateGroupInvitation.');
        }

        if (requestParameters.updateInvitationEntity === null || requestParameters.updateInvitationEntity === undefined) {
            throw new runtime.RequiredError('updateInvitationEntity','Required parameter requestParameters.updateInvitationEntity was null or undefined when calling updateGroupInvitation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/invitations/{invitation}`.replace(`{${"invitation"}}`, encodeURIComponent(String(requestParameters.invitation))).replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateInvitationEntityToJSON(requestParameters.updateInvitationEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationEntityFromJSON(jsonValue));
    }

    /**
     * User must have the GROUP_INVITATION[UPDATE] permission to use this service
     * Update an invitation to join a group
     */
    async updateGroupInvitation(requestParameters: UpdateGroupInvitationRequest): Promise<InvitationEntity> {
        const response = await this.updateGroupInvitationRaw(requestParameters);
        return await response.value();
    }

}
