/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AlertStatusEntity,
    AlertStatusEntityFromJSON,
    AlertStatusEntityToJSON,
    AlertTriggerEntity,
    AlertTriggerEntityFromJSON,
    AlertTriggerEntityToJSON,
    NewAlertTriggerEntity,
    NewAlertTriggerEntityFromJSON,
    NewAlertTriggerEntityToJSON,
    UpdateAlertTriggerEntity,
    UpdateAlertTriggerEntityFromJSON,
    UpdateAlertTriggerEntityToJSON,
} from '../models';

export interface CreateApplicationAlertRequest {
    application: string;
    envId: string;
    orgId: string;
    newAlertTriggerEntity: NewAlertTriggerEntity;
}

export interface DeleteApplicationAlertRequest {
    alert: string;
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApplicationAlertsRequest {
    eventCounts?: boolean;
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApplicationAlertsStatusRequest {
    application: string;
    envId: string;
    orgId: string;
}

export interface UpdateApplicationAlertRequest {
    alert: string;
    application: string;
    envId: string;
    orgId: string;
    updateAlertTriggerEntity: UpdateAlertTriggerEntity;
}

/**
 * 
 */
export class ApplicationAlertsApi extends runtime.BaseAPI {

    /**
     * User must have the APPLICATION_ALERT[CREATE] permission to use this service
     * Create an alert for an application
     */
    async createApplicationAlertRaw(requestParameters: CreateApplicationAlertRequest): Promise<runtime.ApiResponse<AlertTriggerEntity>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling createApplicationAlert.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createApplicationAlert.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createApplicationAlert.');
        }

        if (requestParameters.newAlertTriggerEntity === null || requestParameters.newAlertTriggerEntity === undefined) {
            throw new runtime.RequiredError('newAlertTriggerEntity','Required parameter requestParameters.newAlertTriggerEntity was null or undefined when calling createApplicationAlert.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/alerts`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewAlertTriggerEntityToJSON(requestParameters.newAlertTriggerEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertTriggerEntityFromJSON(jsonValue));
    }

    /**
     * User must have the APPLICATION_ALERT[CREATE] permission to use this service
     * Create an alert for an application
     */
    async createApplicationAlert(requestParameters: CreateApplicationAlertRequest): Promise<AlertTriggerEntity> {
        const response = await this.createApplicationAlertRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the APPLICATION_ALERT[DELETE] permission to use this service
     * Delete an alert for an application
     */
    async deleteApplicationAlertRaw(requestParameters: DeleteApplicationAlertRequest): Promise<runtime.ApiResponse<AlertTriggerEntity>> {
        if (requestParameters.alert === null || requestParameters.alert === undefined) {
            throw new runtime.RequiredError('alert','Required parameter requestParameters.alert was null or undefined when calling deleteApplicationAlert.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling deleteApplicationAlert.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteApplicationAlert.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteApplicationAlert.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/alerts/{alert}`.replace(`{${"alert"}}`, encodeURIComponent(String(requestParameters.alert))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertTriggerEntityFromJSON(jsonValue));
    }

    /**
     * User must have the APPLICATION_ALERT[DELETE] permission to use this service
     * Delete an alert for an application
     */
    async deleteApplicationAlert(requestParameters: DeleteApplicationAlertRequest): Promise<AlertTriggerEntity> {
        const response = await this.deleteApplicationAlertRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the APPLICATION_ALERT[READ] permission to use this service
     * List configured alerts of an application
     */
    async getApplicationAlertsRaw(requestParameters: GetApplicationAlertsRequest): Promise<runtime.ApiResponse<Array<AlertTriggerEntity>>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApplicationAlerts.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplicationAlerts.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplicationAlerts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.eventCounts !== undefined) {
            queryParameters['event_counts'] = requestParameters.eventCounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/alerts`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlertTriggerEntityFromJSON));
    }

    /**
     * User must have the APPLICATION_ALERT[READ] permission to use this service
     * List configured alerts of an application
     */
    async getApplicationAlerts(requestParameters: GetApplicationAlertsRequest): Promise<Array<AlertTriggerEntity>> {
        const response = await this.getApplicationAlertsRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * Get alerting status
     */
    async getApplicationAlertsStatusRaw(requestParameters: GetApplicationAlertsStatusRequest): Promise<runtime.ApiResponse<AlertStatusEntity>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApplicationAlertsStatus.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplicationAlertsStatus.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplicationAlertsStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/alerts/status`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertStatusEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * Get alerting status
     */
    async getApplicationAlertsStatus(requestParameters: GetApplicationAlertsStatusRequest): Promise<AlertStatusEntity> {
        const response = await this.getApplicationAlertsStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the APPLICATION_ALERT[UPDATE] permission to use this service
     * Update an alert for an application
     */
    async updateApplicationAlertRaw(requestParameters: UpdateApplicationAlertRequest): Promise<runtime.ApiResponse<AlertTriggerEntity>> {
        if (requestParameters.alert === null || requestParameters.alert === undefined) {
            throw new runtime.RequiredError('alert','Required parameter requestParameters.alert was null or undefined when calling updateApplicationAlert.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling updateApplicationAlert.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateApplicationAlert.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateApplicationAlert.');
        }

        if (requestParameters.updateAlertTriggerEntity === null || requestParameters.updateAlertTriggerEntity === undefined) {
            throw new runtime.RequiredError('updateAlertTriggerEntity','Required parameter requestParameters.updateAlertTriggerEntity was null or undefined when calling updateApplicationAlert.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/alerts/{alert}`.replace(`{${"alert"}}`, encodeURIComponent(String(requestParameters.alert))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAlertTriggerEntityToJSON(requestParameters.updateAlertTriggerEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertTriggerEntityFromJSON(jsonValue));
    }

    /**
     * User must have the APPLICATION_ALERT[UPDATE] permission to use this service
     * Update an alert for an application
     */
    async updateApplicationAlert(requestParameters: UpdateApplicationAlertRequest): Promise<AlertTriggerEntity> {
        const response = await this.updateApplicationAlertRaw(requestParameters);
        return await response.value();
    }

}
