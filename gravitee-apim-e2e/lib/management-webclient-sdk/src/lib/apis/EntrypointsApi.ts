/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EntrypointEntity,
    EntrypointEntityFromJSON,
    EntrypointEntityToJSON,
    NewEntryPointEntity,
    NewEntryPointEntityFromJSON,
    NewEntryPointEntityToJSON,
    UpdateEntryPointEntity,
    UpdateEntryPointEntityFromJSON,
    UpdateEntryPointEntityToJSON,
} from '../models';

export interface CreateEntrypointRequest {
    orgId: string;
    newEntryPointEntity: NewEntryPointEntity;
}

export interface CreateEntrypoint1Request {
    envId: string;
    orgId: string;
    newEntryPointEntity: NewEntryPointEntity;
}

export interface DeleteEntrypointRequest {
    entrypoint: string;
    orgId: string;
}

export interface DeleteEntrypoint1Request {
    entrypoint: string;
    envId: string;
    orgId: string;
}

export interface GetEntrypointRequest {
    entrypoint: string;
    orgId: string;
}

export interface GetEntrypoint1Request {
    entrypoint: string;
    envId: string;
    orgId: string;
}

export interface GetEntrypointsRequest {
    orgId: string;
}

export interface GetEntrypoints1Request {
    envId: string;
    orgId: string;
}

export interface UpdateEntrypointRequest {
    orgId: string;
    updateEntryPointEntity: UpdateEntryPointEntity;
}

export interface UpdateEntrypoint1Request {
    envId: string;
    orgId: string;
    updateEntryPointEntity: UpdateEntryPointEntity;
}

/**
 * 
 */
export class EntrypointsApi extends runtime.BaseAPI {

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[CREATE] permission to use this service
     * Create a platform entrypoint
     */
    async createEntrypointRaw(requestParameters: CreateEntrypointRequest): Promise<runtime.ApiResponse<EntrypointEntity>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createEntrypoint.');
        }

        if (requestParameters.newEntryPointEntity === null || requestParameters.newEntryPointEntity === undefined) {
            throw new runtime.RequiredError('newEntryPointEntity','Required parameter requestParameters.newEntryPointEntity was null or undefined when calling createEntrypoint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/entrypoints`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewEntryPointEntityToJSON(requestParameters.newEntryPointEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntrypointEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[CREATE] permission to use this service
     * Create a platform entrypoint
     */
    async createEntrypoint(requestParameters: CreateEntrypointRequest): Promise<EntrypointEntity> {
        const response = await this.createEntrypointRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[CREATE] permission to use this service
     * Create a platform entrypoint
     */
    async createEntrypoint1Raw(requestParameters: CreateEntrypoint1Request): Promise<runtime.ApiResponse<EntrypointEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createEntrypoint1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createEntrypoint1.');
        }

        if (requestParameters.newEntryPointEntity === null || requestParameters.newEntryPointEntity === undefined) {
            throw new runtime.RequiredError('newEntryPointEntity','Required parameter requestParameters.newEntryPointEntity was null or undefined when calling createEntrypoint1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/entrypoints`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewEntryPointEntityToJSON(requestParameters.newEntryPointEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntrypointEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[CREATE] permission to use this service
     * Create a platform entrypoint
     */
    async createEntrypoint1(requestParameters: CreateEntrypoint1Request): Promise<EntrypointEntity> {
        const response = await this.createEntrypoint1Raw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[DELETE] permission to use this service
     * Delete a platform entrypoint
     */
    async deleteEntrypointRaw(requestParameters: DeleteEntrypointRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.entrypoint === null || requestParameters.entrypoint === undefined) {
            throw new runtime.RequiredError('entrypoint','Required parameter requestParameters.entrypoint was null or undefined when calling deleteEntrypoint.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteEntrypoint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/entrypoints/{entrypoint}`.replace(`{${"entrypoint"}}`, encodeURIComponent(String(requestParameters.entrypoint))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[DELETE] permission to use this service
     * Delete a platform entrypoint
     */
    async deleteEntrypoint(requestParameters: DeleteEntrypointRequest): Promise<void> {
        await this.deleteEntrypointRaw(requestParameters);
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[DELETE] permission to use this service
     * Delete a platform entrypoint
     */
    async deleteEntrypoint1Raw(requestParameters: DeleteEntrypoint1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.entrypoint === null || requestParameters.entrypoint === undefined) {
            throw new runtime.RequiredError('entrypoint','Required parameter requestParameters.entrypoint was null or undefined when calling deleteEntrypoint1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteEntrypoint1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteEntrypoint1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/entrypoints/{entrypoint}`.replace(`{${"entrypoint"}}`, encodeURIComponent(String(requestParameters.entrypoint))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[DELETE] permission to use this service
     * Delete a platform entrypoint
     */
    async deleteEntrypoint1(requestParameters: DeleteEntrypoint1Request): Promise<void> {
        await this.deleteEntrypoint1Raw(requestParameters);
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[READ] permission to use this service
     * Get a platform entrypoints
     */
    async getEntrypointRaw(requestParameters: GetEntrypointRequest): Promise<runtime.ApiResponse<EntrypointEntity>> {
        if (requestParameters.entrypoint === null || requestParameters.entrypoint === undefined) {
            throw new runtime.RequiredError('entrypoint','Required parameter requestParameters.entrypoint was null or undefined when calling getEntrypoint.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getEntrypoint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/entrypoints/{entrypoint}`.replace(`{${"entrypoint"}}`, encodeURIComponent(String(requestParameters.entrypoint))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntrypointEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[READ] permission to use this service
     * Get a platform entrypoints
     */
    async getEntrypoint(requestParameters: GetEntrypointRequest): Promise<EntrypointEntity> {
        const response = await this.getEntrypointRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[READ] permission to use this service
     * Get a platform entrypoints
     */
    async getEntrypoint1Raw(requestParameters: GetEntrypoint1Request): Promise<runtime.ApiResponse<EntrypointEntity>> {
        if (requestParameters.entrypoint === null || requestParameters.entrypoint === undefined) {
            throw new runtime.RequiredError('entrypoint','Required parameter requestParameters.entrypoint was null or undefined when calling getEntrypoint1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getEntrypoint1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getEntrypoint1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/entrypoints/{entrypoint}`.replace(`{${"entrypoint"}}`, encodeURIComponent(String(requestParameters.entrypoint))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntrypointEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[READ] permission to use this service
     * Get a platform entrypoints
     */
    async getEntrypoint1(requestParameters: GetEntrypoint1Request): Promise<EntrypointEntity> {
        const response = await this.getEntrypoint1Raw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[READ] permission to use this service
     * List the platform entrypoints
     */
    async getEntrypointsRaw(requestParameters: GetEntrypointsRequest): Promise<runtime.ApiResponse<Array<EntrypointEntity>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getEntrypoints.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/entrypoints`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntrypointEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[READ] permission to use this service
     * List the platform entrypoints
     */
    async getEntrypoints(requestParameters: GetEntrypointsRequest): Promise<Array<EntrypointEntity>> {
        const response = await this.getEntrypointsRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[READ] permission to use this service
     * List the platform entrypoints
     */
    async getEntrypoints1Raw(requestParameters: GetEntrypoints1Request): Promise<runtime.ApiResponse<Array<EntrypointEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getEntrypoints1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getEntrypoints1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/entrypoints`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntrypointEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[READ] permission to use this service
     * List the platform entrypoints
     */
    async getEntrypoints1(requestParameters: GetEntrypoints1Request): Promise<Array<EntrypointEntity>> {
        const response = await this.getEntrypoints1Raw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[UPDATE] permission to use this service
     * Update a platform entrypoint
     */
    async updateEntrypointRaw(requestParameters: UpdateEntrypointRequest): Promise<runtime.ApiResponse<EntrypointEntity>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateEntrypoint.');
        }

        if (requestParameters.updateEntryPointEntity === null || requestParameters.updateEntryPointEntity === undefined) {
            throw new runtime.RequiredError('updateEntryPointEntity','Required parameter requestParameters.updateEntryPointEntity was null or undefined when calling updateEntrypoint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/entrypoints`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEntryPointEntityToJSON(requestParameters.updateEntryPointEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntrypointEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[UPDATE] permission to use this service
     * Update a platform entrypoint
     */
    async updateEntrypoint(requestParameters: UpdateEntrypointRequest): Promise<EntrypointEntity> {
        const response = await this.updateEntrypointRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[UPDATE] permission to use this service
     * Update a platform entrypoint
     */
    async updateEntrypoint1Raw(requestParameters: UpdateEntrypoint1Request): Promise<runtime.ApiResponse<EntrypointEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateEntrypoint1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateEntrypoint1.');
        }

        if (requestParameters.updateEntryPointEntity === null || requestParameters.updateEntryPointEntity === undefined) {
            throw new runtime.RequiredError('updateEntryPointEntity','Required parameter requestParameters.updateEntryPointEntity was null or undefined when calling updateEntrypoint1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/entrypoints`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEntryPointEntityToJSON(requestParameters.updateEntryPointEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntrypointEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[UPDATE] permission to use this service
     * Update a platform entrypoint
     */
    async updateEntrypoint1(requestParameters: UpdateEntrypoint1Request): Promise<EntrypointEntity> {
        const response = await this.updateEntrypoint1Raw(requestParameters);
        return await response.value();
    }

}
