/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CategoryEntity,
    CategoryEntityFromJSON,
    CategoryEntityToJSON,
    NewCategoryEntity,
    NewCategoryEntityFromJSON,
    NewCategoryEntityToJSON,
    UpdateCategoryEntity,
    UpdateCategoryEntityFromJSON,
    UpdateCategoryEntityToJSON,
} from '../models';

export interface CreateCategoryRequest {
    envId: string;
    orgId: string;
    newCategoryEntity: NewCategoryEntity;
}

export interface DeleteCategoryRequest {
    categoryId: string;
    envId: string;
    orgId: string;
}

export interface GetCategoriesRequest {
    envId: string;
    orgId: string;
}

export interface GetCategoryRequest {
    categoryId: string;
    envId: string;
    orgId: string;
}

export interface GetCategoryBackgroundRequest {
    categoryId: string;
    envId: string;
    orgId: string;
}

export interface GetCategoryPictureRequest {
    categoryId: string;
    envId: string;
    orgId: string;
}

export interface UpdateCategoriesRequest {
    envId: string;
    orgId: string;
    updateCategoryEntity: Array<UpdateCategoryEntity>;
}

export interface UpdateCategoryRequest {
    categoryId: string;
    envId: string;
    orgId: string;
    updateCategoryEntity: UpdateCategoryEntity;
}

/**
 * 
 */
export class CategoriesApi extends runtime.BaseAPI {

    /**
     * User must have the PORTAL_CATEGORY[CREATE] permission to use this service
     * Create a category
     */
    async createCategoryRaw(requestParameters: CreateCategoryRequest): Promise<runtime.ApiResponse<CategoryEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createCategory.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createCategory.');
        }

        if (requestParameters.newCategoryEntity === null || requestParameters.newCategoryEntity === undefined) {
            throw new runtime.RequiredError('newCategoryEntity','Required parameter requestParameters.newCategoryEntity was null or undefined when calling createCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/categories`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewCategoryEntityToJSON(requestParameters.newCategoryEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryEntityFromJSON(jsonValue));
    }

    /**
     * User must have the PORTAL_CATEGORY[CREATE] permission to use this service
     * Create a category
     */
    async createCategory(requestParameters: CreateCategoryRequest): Promise<CategoryEntity> {
        const response = await this.createCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the PORTAL_CATEGORY[DELETE] permission to use this service
     * Delete the category
     */
    async deleteCategoryRaw(requestParameters: DeleteCategoryRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling deleteCategory.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteCategory.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the PORTAL_CATEGORY[DELETE] permission to use this service
     * Delete the category
     */
    async deleteCategory(requestParameters: DeleteCategoryRequest): Promise<void> {
        await this.deleteCategoryRaw(requestParameters);
    }

    /**
     * Retrieve list of categories
     */
    async getCategoriesRaw(requestParameters: GetCategoriesRequest): Promise<runtime.ApiResponse<Array<CategoryEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getCategories.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getCategories.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/categories`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryEntityFromJSON));
    }

    /**
     * Retrieve list of categories
     */
    async getCategories(requestParameters: GetCategoriesRequest): Promise<Array<CategoryEntity>> {
        const response = await this.getCategoriesRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the PORTAL_CATEGORY[READ] permission to use this service
     * Get the category
     */
    async getCategoryRaw(requestParameters: GetCategoryRequest): Promise<runtime.ApiResponse<CategoryEntity>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getCategory.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getCategory.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryEntityFromJSON(jsonValue));
    }

    /**
     * User must have the PORTAL_CATEGORY[READ] permission to use this service
     * Get the category
     */
    async getCategory(requestParameters: GetCategoryRequest): Promise<CategoryEntity> {
        const response = await this.getCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the READ permission to use this service
     * Get the Category\'s background
     */
    async getCategoryBackgroundRaw(requestParameters: GetCategoryBackgroundRequest): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getCategoryBackground.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getCategoryBackground.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getCategoryBackground.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/categories/{categoryId}/background`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * User must have the READ permission to use this service
     * Get the Category\'s background
     */
    async getCategoryBackground(requestParameters: GetCategoryBackgroundRequest): Promise<Blob> {
        const response = await this.getCategoryBackgroundRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the PORTAL_CATEGORY[READ] permission to use this service
     * Get the category\'s picture
     */
    async getCategoryPictureRaw(requestParameters: GetCategoryPictureRequest): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getCategoryPicture.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getCategoryPicture.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getCategoryPicture.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/categories/{categoryId}/picture`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * User must have the PORTAL_CATEGORY[READ] permission to use this service
     * Get the category\'s picture
     */
    async getCategoryPicture(requestParameters: GetCategoryPictureRequest): Promise<Blob> {
        const response = await this.getCategoryPictureRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the PORTAL_CATEGORY[UPDATE] permission to use this service
     * Update an existing category
     */
    async updateCategoriesRaw(requestParameters: UpdateCategoriesRequest): Promise<runtime.ApiResponse<Array<CategoryEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateCategories.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateCategories.');
        }

        if (requestParameters.updateCategoryEntity === null || requestParameters.updateCategoryEntity === undefined) {
            throw new runtime.RequiredError('updateCategoryEntity','Required parameter requestParameters.updateCategoryEntity was null or undefined when calling updateCategories.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/categories`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.updateCategoryEntity.map(UpdateCategoryEntityToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryEntityFromJSON));
    }

    /**
     * User must have the PORTAL_CATEGORY[UPDATE] permission to use this service
     * Update an existing category
     */
    async updateCategories(requestParameters: UpdateCategoriesRequest): Promise<Array<CategoryEntity>> {
        const response = await this.updateCategoriesRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the PORTAL_CATEGORY[UPDATE] permission to use this service
     * Update the category
     */
    async updateCategoryRaw(requestParameters: UpdateCategoryRequest): Promise<runtime.ApiResponse<CategoryEntity>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling updateCategory.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateCategory.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateCategory.');
        }

        if (requestParameters.updateCategoryEntity === null || requestParameters.updateCategoryEntity === undefined) {
            throw new runtime.RequiredError('updateCategoryEntity','Required parameter requestParameters.updateCategoryEntity was null or undefined when calling updateCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCategoryEntityToJSON(requestParameters.updateCategoryEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryEntityFromJSON(jsonValue));
    }

    /**
     * User must have the PORTAL_CATEGORY[UPDATE] permission to use this service
     * Update the category
     */
    async updateCategory(requestParameters: UpdateCategoryRequest): Promise<CategoryEntity> {
        const response = await this.updateCategoryRaw(requestParameters);
        return await response.value();
    }

}
