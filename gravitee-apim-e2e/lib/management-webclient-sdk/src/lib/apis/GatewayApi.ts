/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InstanceEntity,
    InstanceEntityFromJSON,
    InstanceEntityToJSON,
    MonitoringData,
    MonitoringDataFromJSON,
    MonitoringDataToJSON,
    PageInstanceListItem,
    PageInstanceListItemFromJSON,
    PageInstanceListItemToJSON,
} from '../models';

export interface GetInstanceRequest {
    instance: string;
    envId: string;
    orgId: string;
}

export interface GetInstanceMonitoringRequest {
    gatewayId: string;
    instance: string;
    envId: string;
    orgId: string;
}

export interface GetInstancesRequest {
    includeStopped?: boolean;
    from?: number;
    to?: number;
    page?: number;
    size?: number;
    envId: string;
    orgId: string;
}

/**
 * 
 */
export class GatewayApi extends runtime.BaseAPI {

    /**
     * Get a gateway instance
     */
    async getInstanceRaw(requestParameters: GetInstanceRequest): Promise<runtime.ApiResponse<InstanceEntity>> {
        if (requestParameters.instance === null || requestParameters.instance === undefined) {
            throw new runtime.RequiredError('instance','Required parameter requestParameters.instance was null or undefined when calling getInstance.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getInstance.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getInstance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/instances/{instance}`.replace(`{${"instance"}}`, encodeURIComponent(String(requestParameters.instance))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InstanceEntityFromJSON(jsonValue));
    }

    /**
     * Get a gateway instance
     */
    async getInstance(requestParameters: GetInstanceRequest): Promise<InstanceEntity> {
        const response = await this.getInstanceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get monitoring metrics for a gateway instance
     */
    async getInstanceMonitoringRaw(requestParameters: GetInstanceMonitoringRequest): Promise<runtime.ApiResponse<MonitoringData>> {
        if (requestParameters.gatewayId === null || requestParameters.gatewayId === undefined) {
            throw new runtime.RequiredError('gatewayId','Required parameter requestParameters.gatewayId was null or undefined when calling getInstanceMonitoring.');
        }

        if (requestParameters.instance === null || requestParameters.instance === undefined) {
            throw new runtime.RequiredError('instance','Required parameter requestParameters.instance was null or undefined when calling getInstanceMonitoring.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getInstanceMonitoring.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getInstanceMonitoring.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/instances/{instance}/monitoring/{gatewayId}`.replace(`{${"gatewayId"}}`, encodeURIComponent(String(requestParameters.gatewayId))).replace(`{${"instance"}}`, encodeURIComponent(String(requestParameters.instance))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MonitoringDataFromJSON(jsonValue));
    }

    /**
     * Get monitoring metrics for a gateway instance
     */
    async getInstanceMonitoring(requestParameters: GetInstanceMonitoringRequest): Promise<MonitoringData> {
        const response = await this.getInstanceMonitoringRaw(requestParameters);
        return await response.value();
    }

    /**
     * List gateway instances
     */
    async getInstancesRaw(requestParameters: GetInstancesRequest): Promise<runtime.ApiResponse<PageInstanceListItem>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getInstances.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getInstances.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.includeStopped !== undefined) {
            queryParameters['includeStopped'] = requestParameters.includeStopped;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/instances`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageInstanceListItemFromJSON(jsonValue));
    }

    /**
     * List gateway instances
     */
    async getInstances(requestParameters: GetInstancesRequest): Promise<PageInstanceListItem> {
        const response = await this.getInstancesRaw(requestParameters);
        return await response.value();
    }

}
