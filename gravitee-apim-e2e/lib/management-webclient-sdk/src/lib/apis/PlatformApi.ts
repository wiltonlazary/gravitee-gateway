/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AlertEventPage,
    AlertEventPageFromJSON,
    AlertEventPageToJSON,
    AlertStatusEntity,
    AlertStatusEntityFromJSON,
    AlertStatusEntityToJSON,
    AlertTriggerEntity,
    AlertTriggerEntityFromJSON,
    AlertTriggerEntityToJSON,
    Analytics,
    AnalyticsFromJSON,
    AnalyticsToJSON,
    AnalyticsType,
    AnalyticsTypeFromJSON,
    AnalyticsTypeToJSON,
    ApiRequest,
    ApiRequestFromJSON,
    ApiRequestToJSON,
    EventEntityPage,
    EventEntityPageFromJSON,
    EventEntityPageToJSON,
    EventType,
    EventTypeFromJSON,
    EventTypeToJSON,
    NewAlertTriggerEntity,
    NewAlertTriggerEntityFromJSON,
    NewAlertTriggerEntityToJSON,
    NewTicketEntity,
    NewTicketEntityFromJSON,
    NewTicketEntityToJSON,
    PlatformRequestItemSearchLogResponse,
    PlatformRequestItemSearchLogResponseFromJSON,
    PlatformRequestItemSearchLogResponseToJSON,
    TicketEntity,
    TicketEntityFromJSON,
    TicketEntityToJSON,
    TicketEntityPage,
    TicketEntityPageFromJSON,
    TicketEntityPageToJSON,
    UpdateAlertTriggerEntity,
    UpdateAlertTriggerEntityFromJSON,
    UpdateAlertTriggerEntityToJSON,
} from '../models';

export interface AssociatePlatformAlertRequest {
    alert: string;
    type?: string;
    envId: string;
    orgId: string;
}

export interface CreatePlatformAlertRequest {
    envId: string;
    orgId: string;
    newAlertTriggerEntity: NewAlertTriggerEntity;
}

export interface CreatePlatformTicketRequest {
    envId: string;
    orgId: string;
    newTicketEntity: NewTicketEntity;
}

export interface DeletePlatformAlertRequest {
    alert: string;
    envId: string;
    orgId: string;
}

export interface ExportPlatformLogsAsCSVRequest {
    from?: number;
    to?: number;
    query?: string;
    size?: number;
    page?: number;
    field?: string;
    order?: boolean;
    envId: string;
    orgId: string;
}

export interface GetPlatformAlertEventsRequest {
    alert: string;
    from?: number;
    to?: number;
    page?: number;
    size?: number;
    envId: string;
    orgId: string;
}

export interface GetPlatformAlertStatusRequest {
    envId: string;
    orgId: string;
}

export interface GetPlatformAlertsRequest {
    eventCounts?: boolean;
    envId: string;
    orgId: string;
}

export interface GetPlatformAlertsAnalytics1Request {
    from?: number;
    to?: number;
    envId: string;
    orgId: string;
}

export interface GetPlatformAnalytics1Request {
    from?: number;
    to?: number;
    interval?: number;
    query?: string;
    field?: string;
    size?: number;
    type: AnalyticsType;
    ranges?: Array<string>;
    aggs?: Array<string>;
    envId: string;
    orgId: string;
}

export interface GetPlatformEventsRequest {
    type?: Array<EventType>;
    from?: number;
    to?: number;
    page?: number;
    size?: number;
    apiIds?: Array<string>;
    envId: string;
    orgId: string;
}

export interface GetPlatformLogRequest {
    log: string;
    timestamp?: number;
    envId: string;
    orgId: string;
}

export interface GetPlatformLogsRequest {
    from?: number;
    to?: number;
    query?: string;
    size?: number;
    page?: number;
    field?: string;
    order?: boolean;
    envId: string;
    orgId: string;
}

export interface GetTicketRequest {
    ticket: string;
    envId: string;
    orgId: string;
}

export interface GetTicketsRequest {
    size?: number;
    page?: number;
    apiId?: string;
    applicationId?: string;
    order?: string;
    envId: string;
    orgId: string;
}

export interface UpdatePlatformAlertRequest {
    alert: string;
    envId: string;
    orgId: string;
    updateAlertTriggerEntity: UpdateAlertTriggerEntity;
}

/**
 * 
 */
export class PlatformApi extends runtime.BaseAPI {

    /**
     * User must have the MANAGEMENT_ALERT[UPDATE] permission to use this service
     * Associate the alert to multiple references (API, APPLICATION
     */
    async associatePlatformAlertRaw(requestParameters: AssociatePlatformAlertRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.alert === null || requestParameters.alert === undefined) {
            throw new runtime.RequiredError('alert','Required parameter requestParameters.alert was null or undefined when calling associatePlatformAlert.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling associatePlatformAlert.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling associatePlatformAlert.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/alerts/{alert}`.replace(`{${"alert"}}`, encodeURIComponent(String(requestParameters.alert))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_ALERT[UPDATE] permission to use this service
     * Associate the alert to multiple references (API, APPLICATION
     */
    async associatePlatformAlert(requestParameters: AssociatePlatformAlertRequest): Promise<void> {
        await this.associatePlatformAlertRaw(requestParameters);
    }

    /**
     * User must have the MANAGEMENT_ALERT[CREATE] permission to use this service
     * Create an alert for the platform
     */
    async createPlatformAlertRaw(requestParameters: CreatePlatformAlertRequest): Promise<runtime.ApiResponse<AlertTriggerEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createPlatformAlert.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createPlatformAlert.');
        }

        if (requestParameters.newAlertTriggerEntity === null || requestParameters.newAlertTriggerEntity === undefined) {
            throw new runtime.RequiredError('newAlertTriggerEntity','Required parameter requestParameters.newAlertTriggerEntity was null or undefined when calling createPlatformAlert.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/alerts`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewAlertTriggerEntityToJSON(requestParameters.newAlertTriggerEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertTriggerEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ALERT[CREATE] permission to use this service
     * Create an alert for the platform
     */
    async createPlatformAlert(requestParameters: CreatePlatformAlertRequest): Promise<AlertTriggerEntity> {
        const response = await this.createPlatformAlertRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a platform ticket
     */
    async createPlatformTicketRaw(requestParameters: CreatePlatformTicketRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createPlatformTicket.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createPlatformTicket.');
        }

        if (requestParameters.newTicketEntity === null || requestParameters.newTicketEntity === undefined) {
            throw new runtime.RequiredError('newTicketEntity','Required parameter requestParameters.newTicketEntity was null or undefined when calling createPlatformTicket.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/tickets`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewTicketEntityToJSON(requestParameters.newTicketEntity),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a platform ticket
     */
    async createPlatformTicket(requestParameters: CreatePlatformTicketRequest): Promise<void> {
        await this.createPlatformTicketRaw(requestParameters);
    }

    /**
     * User must have the MANAGEMENT_ALERT[DELETE] permission to use this service
     * Delete an alert for the platform
     */
    async deletePlatformAlertRaw(requestParameters: DeletePlatformAlertRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.alert === null || requestParameters.alert === undefined) {
            throw new runtime.RequiredError('alert','Required parameter requestParameters.alert was null or undefined when calling deletePlatformAlert.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deletePlatformAlert.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deletePlatformAlert.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/alerts/{alert}`.replace(`{${"alert"}}`, encodeURIComponent(String(requestParameters.alert))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_ALERT[DELETE] permission to use this service
     * Delete an alert for the platform
     */
    async deletePlatformAlert(requestParameters: DeletePlatformAlertRequest): Promise<void> {
        await this.deletePlatformAlertRaw(requestParameters);
    }

    /**
     * User must have the MANAGEMENT_PLATFORM[READ] permission to use this service
     * Export platform logs as CSV
     */
    async exportPlatformLogsAsCSVRaw(requestParameters: ExportPlatformLogsAsCSVRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling exportPlatformLogsAsCSV.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling exportPlatformLogsAsCSV.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.field !== undefined) {
            queryParameters['field'] = requestParameters.field;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/logs/export`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * User must have the MANAGEMENT_PLATFORM[READ] permission to use this service
     * Export platform logs as CSV
     */
    async exportPlatformLogsAsCSV(requestParameters: ExportPlatformLogsAsCSVRequest): Promise<string> {
        const response = await this.exportPlatformLogsAsCSVRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * Retrieve the list of events for an alert
     */
    async getPlatformAlertEventsRaw(requestParameters: GetPlatformAlertEventsRequest): Promise<runtime.ApiResponse<AlertEventPage>> {
        if (requestParameters.alert === null || requestParameters.alert === undefined) {
            throw new runtime.RequiredError('alert','Required parameter requestParameters.alert was null or undefined when calling getPlatformAlertEvents.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPlatformAlertEvents.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPlatformAlertEvents.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/alerts/{alert}/events`.replace(`{${"alert"}}`, encodeURIComponent(String(requestParameters.alert))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertEventPageFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * Retrieve the list of events for an alert
     */
    async getPlatformAlertEvents(requestParameters: GetPlatformAlertEventsRequest): Promise<AlertEventPage> {
        const response = await this.getPlatformAlertEventsRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * Get alerting status
     */
    async getPlatformAlertStatusRaw(requestParameters: GetPlatformAlertStatusRequest): Promise<runtime.ApiResponse<AlertStatusEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPlatformAlertStatus.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPlatformAlertStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/alerts/status`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertStatusEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * Get alerting status
     */
    async getPlatformAlertStatus(requestParameters: GetPlatformAlertStatusRequest): Promise<AlertStatusEntity> {
        const response = await this.getPlatformAlertStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * List configured alerts of the platform
     */
    async getPlatformAlertsRaw(requestParameters: GetPlatformAlertsRequest): Promise<runtime.ApiResponse<Array<AlertTriggerEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPlatformAlerts.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPlatformAlerts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.eventCounts !== undefined) {
            queryParameters['event_counts'] = requestParameters.eventCounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/alerts`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlertTriggerEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * List configured alerts of the platform
     */
    async getPlatformAlerts(requestParameters: GetPlatformAlertsRequest): Promise<Array<AlertTriggerEntity>> {
        const response = await this.getPlatformAlertsRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * List configured alerts of the platform
     */
    async getPlatformAlertsAnalytics1Raw(requestParameters: GetPlatformAlertsAnalytics1Request): Promise<runtime.ApiResponse<Array<AlertTriggerEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPlatformAlertsAnalytics1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPlatformAlertsAnalytics1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/alerts/analytics`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlertTriggerEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * List configured alerts of the platform
     */
    async getPlatformAlertsAnalytics1(requestParameters: GetPlatformAlertsAnalytics1Request): Promise<Array<AlertTriggerEntity>> {
        const response = await this.getPlatformAlertsAnalytics1Raw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_PLATFORM[READ] permission to use this service
     * Get platform analytics
     */
    async getPlatformAnalytics1Raw(requestParameters: GetPlatformAnalytics1Request): Promise<runtime.ApiResponse<Analytics>> {
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling getPlatformAnalytics1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPlatformAnalytics1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPlatformAnalytics1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.interval !== undefined) {
            queryParameters['interval'] = requestParameters.interval;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.field !== undefined) {
            queryParameters['field'] = requestParameters.field;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.ranges) {
            queryParameters['ranges'] = requestParameters.ranges.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.aggs) {
            queryParameters['aggs'] = requestParameters.aggs.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/analytics`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticsFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_PLATFORM[READ] permission to use this service
     * Get platform analytics
     */
    async getPlatformAnalytics1(requestParameters: GetPlatformAnalytics1Request): Promise<Analytics> {
        const response = await this.getPlatformAnalytics1Raw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_PLATFORM[READ] permission to use this service
     * List platform events
     */
    async getPlatformEventsRaw(requestParameters: GetPlatformEventsRequest): Promise<runtime.ApiResponse<EventEntityPage>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPlatformEvents.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPlatformEvents.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.apiIds) {
            queryParameters['api_ids'] = requestParameters.apiIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/events`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EventEntityPageFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_PLATFORM[READ] permission to use this service
     * List platform events
     */
    async getPlatformEvents(requestParameters: GetPlatformEventsRequest): Promise<EventEntityPage> {
        const response = await this.getPlatformEventsRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_PLATFORM[READ] permission to use this service
     * Get a specific log
     */
    async getPlatformLogRaw(requestParameters: GetPlatformLogRequest): Promise<runtime.ApiResponse<ApiRequest>> {
        if (requestParameters.log === null || requestParameters.log === undefined) {
            throw new runtime.RequiredError('log','Required parameter requestParameters.log was null or undefined when calling getPlatformLog.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPlatformLog.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPlatformLog.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.timestamp !== undefined) {
            queryParameters['timestamp'] = requestParameters.timestamp;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/logs/{log}`.replace(`{${"log"}}`, encodeURIComponent(String(requestParameters.log))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiRequestFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_PLATFORM[READ] permission to use this service
     * Get a specific log
     */
    async getPlatformLog(requestParameters: GetPlatformLogRequest): Promise<ApiRequest> {
        const response = await this.getPlatformLogRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_PLATFORM[READ] permission to use this service
     * Get platform logs
     */
    async getPlatformLogsRaw(requestParameters: GetPlatformLogsRequest): Promise<runtime.ApiResponse<PlatformRequestItemSearchLogResponse>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPlatformLogs.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPlatformLogs.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.field !== undefined) {
            queryParameters['field'] = requestParameters.field;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/logs`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PlatformRequestItemSearchLogResponseFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_PLATFORM[READ] permission to use this service
     * Get platform logs
     */
    async getPlatformLogs(requestParameters: GetPlatformLogsRequest): Promise<PlatformRequestItemSearchLogResponse> {
        const response = await this.getPlatformLogsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a specific ticket
     */
    async getTicketRaw(requestParameters: GetTicketRequest): Promise<runtime.ApiResponse<TicketEntity>> {
        if (requestParameters.ticket === null || requestParameters.ticket === undefined) {
            throw new runtime.RequiredError('ticket','Required parameter requestParameters.ticket was null or undefined when calling getTicket.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getTicket.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getTicket.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/tickets/{ticket}`.replace(`{${"ticket"}}`, encodeURIComponent(String(requestParameters.ticket))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketEntityFromJSON(jsonValue));
    }

    /**
     * Get a specific ticket
     */
    async getTicket(requestParameters: GetTicketRequest): Promise<TicketEntity> {
        const response = await this.getTicketRaw(requestParameters);
        return await response.value();
    }

    /**
     * Search for platform tickets written by current user
     */
    async getTicketsRaw(requestParameters: GetTicketsRequest): Promise<runtime.ApiResponse<TicketEntityPage>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getTickets.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getTickets.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.apiId !== undefined) {
            queryParameters['apiId'] = requestParameters.apiId;
        }

        if (requestParameters.applicationId !== undefined) {
            queryParameters['applicationId'] = requestParameters.applicationId;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/tickets`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketEntityPageFromJSON(jsonValue));
    }

    /**
     * Search for platform tickets written by current user
     */
    async getTickets(requestParameters: GetTicketsRequest): Promise<TicketEntityPage> {
        const response = await this.getTicketsRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ALERT[UPDATE] permission to use this service
     * Update an alert for the platform
     */
    async updatePlatformAlertRaw(requestParameters: UpdatePlatformAlertRequest): Promise<runtime.ApiResponse<AlertTriggerEntity>> {
        if (requestParameters.alert === null || requestParameters.alert === undefined) {
            throw new runtime.RequiredError('alert','Required parameter requestParameters.alert was null or undefined when calling updatePlatformAlert.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updatePlatformAlert.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updatePlatformAlert.');
        }

        if (requestParameters.updateAlertTriggerEntity === null || requestParameters.updateAlertTriggerEntity === undefined) {
            throw new runtime.RequiredError('updateAlertTriggerEntity','Required parameter requestParameters.updateAlertTriggerEntity was null or undefined when calling updatePlatformAlert.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/alerts/{alert}`.replace(`{${"alert"}}`, encodeURIComponent(String(requestParameters.alert))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAlertTriggerEntityToJSON(requestParameters.updateAlertTriggerEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertTriggerEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ALERT[UPDATE] permission to use this service
     * Update an alert for the platform
     */
    async updatePlatformAlert(requestParameters: UpdatePlatformAlertRequest): Promise<AlertTriggerEntity> {
        const response = await this.updatePlatformAlertRaw(requestParameters);
        return await response.value();
    }

}
