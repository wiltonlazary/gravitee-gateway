/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ConnectorListItem,
    ConnectorListItemFromJSON,
    ConnectorListItemToJSON,
    FetcherEntity,
    FetcherEntityFromJSON,
    FetcherEntityToJSON,
    FetcherListItem,
    FetcherListItemFromJSON,
    FetcherListItemToJSON,
    NotifierEntity,
    NotifierEntityFromJSON,
    NotifierEntityToJSON,
    NotifierListItem,
    NotifierListItemFromJSON,
    NotifierListItemToJSON,
    PlatformPluginEntity,
    PlatformPluginEntityFromJSON,
    PlatformPluginEntityToJSON,
    PolicyEntity,
    PolicyEntityFromJSON,
    PolicyEntityToJSON,
    PolicyListItem,
    PolicyListItemFromJSON,
    PolicyListItemToJSON,
    ResourceListItem,
    ResourceListItemFromJSON,
    ResourceListItemToJSON,
} from '../models';

export interface GetConnectorRequest {
    connector: string;
    envId: string;
    orgId: string;
}

export interface GetConnectorDocRequest {
    connector: string;
    envId: string;
    orgId: string;
}

export interface GetConnectorSchemaRequest {
    connector: string;
    envId: string;
    orgId: string;
}

export interface GetConnectorsRequest {
    expand?: Array<string>;
    envId: string;
    orgId: string;
}

export interface GetFetcherRequest {
    fetcher: string;
    envId: string;
    orgId: string;
}

export interface GetFetcherSchemaRequest {
    fetcher: string;
    envId: string;
    orgId: string;
}

export interface GetFetchersRequest {
    expand?: Array<string>;
    _import?: boolean;
    envId: string;
    orgId: string;
}

export interface GetNotifierRequest {
    notifier: string;
    envId: string;
    orgId: string;
}

export interface GetNotifierSchemaRequest {
    notifier: string;
    envId: string;
    orgId: string;
}

export interface GetNotifiersRequest {
    expand?: Array<string>;
    envId: string;
    orgId: string;
}

export interface GetPoliciesRequest {
    expand?: Array<string>;
    withResource?: boolean;
    envId: string;
    orgId: string;
}

export interface GetPolicyRequest {
    policy: string;
    envId: string;
    orgId: string;
}

export interface GetPolicyDocRequest {
    policy: string;
    envId: string;
    orgId: string;
}

export interface GetPolicyIconRequest {
    policy: string;
    envId: string;
    orgId: string;
}

export interface GetPolicySchemaRequest {
    policy: string;
    envId: string;
    orgId: string;
}

export interface GetResourceRequest {
    resource: string;
    envId: string;
    orgId: string;
}

export interface GetResourceDocRequest {
    resource: string;
    envId: string;
    orgId: string;
}

export interface GetResourceSchemaRequest {
    resource: string;
    envId: string;
    orgId: string;
}

export interface GetResourcesRequest {
    expand?: Array<string>;
    envId: string;
    orgId: string;
}

export interface GetServiceDiscoveryRequest {
    plugin: string;
    envId: string;
    orgId: string;
}

export interface GetServiceDiscoverySchemaRequest {
    plugin: string;
    envId: string;
    orgId: string;
}

export interface GetServicesDiscoverResourcesRequest {
    expand?: Array<string>;
    envId: string;
    orgId: string;
}

export interface GetSwaggerPolicyRequest {
    envId: string;
    orgId: string;
}

/**
 * 
 */
export class PluginsApi extends runtime.BaseAPI {

    /**
     * User must have the ENVIRONMENT_API[READ] permission to use this service
     * Get a connector
     */
    async getConnectorRaw(requestParameters: GetConnectorRequest): Promise<runtime.ApiResponse<PlatformPluginEntity>> {
        if (requestParameters.connector === null || requestParameters.connector === undefined) {
            throw new runtime.RequiredError('connector','Required parameter requestParameters.connector was null or undefined when calling getConnector.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getConnector.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getConnector.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/connectors/{connector}`.replace(`{${"connector"}}`, encodeURIComponent(String(requestParameters.connector))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PlatformPluginEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ENVIRONMENT_API[READ] permission to use this service
     * Get a connector
     */
    async getConnector(requestParameters: GetConnectorRequest): Promise<PlatformPluginEntity> {
        const response = await this.getConnectorRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the ENVIRONMENT_API[READ] permission to use this service
     * Get a connector\'s documentation
     */
    async getConnectorDocRaw(requestParameters: GetConnectorDocRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.connector === null || requestParameters.connector === undefined) {
            throw new runtime.RequiredError('connector','Required parameter requestParameters.connector was null or undefined when calling getConnectorDoc.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getConnectorDoc.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getConnectorDoc.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/connectors/{connector}/documentation`.replace(`{${"connector"}}`, encodeURIComponent(String(requestParameters.connector))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * User must have the ENVIRONMENT_API[READ] permission to use this service
     * Get a connector\'s documentation
     */
    async getConnectorDoc(requestParameters: GetConnectorDocRequest): Promise<string> {
        const response = await this.getConnectorDocRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the ENVIRONMENT_API[READ] permission to use this service
     * Get a connector\'s schema
     */
    async getConnectorSchemaRaw(requestParameters: GetConnectorSchemaRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.connector === null || requestParameters.connector === undefined) {
            throw new runtime.RequiredError('connector','Required parameter requestParameters.connector was null or undefined when calling getConnectorSchema.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getConnectorSchema.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getConnectorSchema.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/connectors/{connector}/schema`.replace(`{${"connector"}}`, encodeURIComponent(String(requestParameters.connector))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * User must have the ENVIRONMENT_API[READ] permission to use this service
     * Get a connector\'s schema
     */
    async getConnectorSchema(requestParameters: GetConnectorSchemaRequest): Promise<string> {
        const response = await this.getConnectorSchemaRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the ENVIRONMENT_API[READ] permission to use this service
     * List connector plugins
     */
    async getConnectorsRaw(requestParameters: GetConnectorsRequest): Promise<runtime.ApiResponse<Array<ConnectorListItem>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getConnectors.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getConnectors.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/connectors`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConnectorListItemFromJSON));
    }

    /**
     * User must have the ENVIRONMENT_API[READ] permission to use this service
     * List connector plugins
     */
    async getConnectors(requestParameters: GetConnectorsRequest): Promise<Array<ConnectorListItem>> {
        const response = await this.getConnectorsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a fetcher plugin
     */
    async getFetcherRaw(requestParameters: GetFetcherRequest): Promise<runtime.ApiResponse<FetcherEntity>> {
        if (requestParameters.fetcher === null || requestParameters.fetcher === undefined) {
            throw new runtime.RequiredError('fetcher','Required parameter requestParameters.fetcher was null or undefined when calling getFetcher.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getFetcher.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getFetcher.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/fetchers/{fetcher}`.replace(`{${"fetcher"}}`, encodeURIComponent(String(requestParameters.fetcher))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FetcherEntityFromJSON(jsonValue));
    }

    /**
     * Get a fetcher plugin
     */
    async getFetcher(requestParameters: GetFetcherRequest): Promise<FetcherEntity> {
        const response = await this.getFetcherRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a fetcher plugin\'s schema
     */
    async getFetcherSchemaRaw(requestParameters: GetFetcherSchemaRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.fetcher === null || requestParameters.fetcher === undefined) {
            throw new runtime.RequiredError('fetcher','Required parameter requestParameters.fetcher was null or undefined when calling getFetcherSchema.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getFetcherSchema.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getFetcherSchema.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/fetchers/{fetcher}/schema`.replace(`{${"fetcher"}}`, encodeURIComponent(String(requestParameters.fetcher))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get a fetcher plugin\'s schema
     */
    async getFetcherSchema(requestParameters: GetFetcherSchemaRequest): Promise<string> {
        const response = await this.getFetcherSchemaRaw(requestParameters);
        return await response.value();
    }

    /**
     * List of fetcher plugins
     */
    async getFetchersRaw(requestParameters: GetFetchersRequest): Promise<runtime.ApiResponse<Array<FetcherListItem>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getFetchers.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getFetchers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters._import !== undefined) {
            queryParameters['import'] = requestParameters._import;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/fetchers`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FetcherListItemFromJSON));
    }

    /**
     * List of fetcher plugins
     */
    async getFetchers(requestParameters: GetFetchersRequest): Promise<Array<FetcherListItem>> {
        const response = await this.getFetchersRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * Get a notifier
     */
    async getNotifierRaw(requestParameters: GetNotifierRequest): Promise<runtime.ApiResponse<NotifierEntity>> {
        if (requestParameters.notifier === null || requestParameters.notifier === undefined) {
            throw new runtime.RequiredError('notifier','Required parameter requestParameters.notifier was null or undefined when calling getNotifier.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getNotifier.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getNotifier.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/notifiers/{notifier}`.replace(`{${"notifier"}}`, encodeURIComponent(String(requestParameters.notifier))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NotifierEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * Get a notifier
     */
    async getNotifier(requestParameters: GetNotifierRequest): Promise<NotifierEntity> {
        const response = await this.getNotifierRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * Get a notifier\'s schema
     */
    async getNotifierSchemaRaw(requestParameters: GetNotifierSchemaRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.notifier === null || requestParameters.notifier === undefined) {
            throw new runtime.RequiredError('notifier','Required parameter requestParameters.notifier was null or undefined when calling getNotifierSchema.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getNotifierSchema.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getNotifierSchema.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/notifiers/{notifier}/schema`.replace(`{${"notifier"}}`, encodeURIComponent(String(requestParameters.notifier))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * Get a notifier\'s schema
     */
    async getNotifierSchema(requestParameters: GetNotifierSchemaRequest): Promise<string> {
        const response = await this.getNotifierSchemaRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * List notifier plugins
     */
    async getNotifiersRaw(requestParameters: GetNotifiersRequest): Promise<runtime.ApiResponse<Array<NotifierListItem>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getNotifiers.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getNotifiers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/notifiers`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NotifierListItemFromJSON));
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * List notifier plugins
     */
    async getNotifiers(requestParameters: GetNotifiersRequest): Promise<Array<NotifierListItem>> {
        const response = await this.getNotifiersRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * List policies
     */
    async getPoliciesRaw(requestParameters: GetPoliciesRequest): Promise<runtime.ApiResponse<Array<PolicyListItem>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPolicies.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPolicies.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.withResource !== undefined) {
            queryParameters['withResource'] = requestParameters.withResource;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/policies`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PolicyListItemFromJSON));
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * List policies
     */
    async getPolicies(requestParameters: GetPoliciesRequest): Promise<Array<PolicyListItem>> {
        const response = await this.getPoliciesRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * Get a policy
     */
    async getPolicyRaw(requestParameters: GetPolicyRequest): Promise<runtime.ApiResponse<PolicyEntity>> {
        if (requestParameters.policy === null || requestParameters.policy === undefined) {
            throw new runtime.RequiredError('policy','Required parameter requestParameters.policy was null or undefined when calling getPolicy.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPolicy.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPolicy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/policies/{policy}`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters.policy))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PolicyEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * Get a policy
     */
    async getPolicy(requestParameters: GetPolicyRequest): Promise<PolicyEntity> {
        const response = await this.getPolicyRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * Get a policy\'s documentation
     */
    async getPolicyDocRaw(requestParameters: GetPolicyDocRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.policy === null || requestParameters.policy === undefined) {
            throw new runtime.RequiredError('policy','Required parameter requestParameters.policy was null or undefined when calling getPolicyDoc.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPolicyDoc.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPolicyDoc.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/policies/{policy}/documentation`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters.policy))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * Get a policy\'s documentation
     */
    async getPolicyDoc(requestParameters: GetPolicyDocRequest): Promise<string> {
        const response = await this.getPolicyDocRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * Get a policy\'s icon
     */
    async getPolicyIconRaw(requestParameters: GetPolicyIconRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.policy === null || requestParameters.policy === undefined) {
            throw new runtime.RequiredError('policy','Required parameter requestParameters.policy was null or undefined when calling getPolicyIcon.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPolicyIcon.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPolicyIcon.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/policies/{policy}/icon`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters.policy))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * Get a policy\'s icon
     */
    async getPolicyIcon(requestParameters: GetPolicyIconRequest): Promise<string> {
        const response = await this.getPolicyIconRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * Get a policy\'s schema
     */
    async getPolicySchemaRaw(requestParameters: GetPolicySchemaRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.policy === null || requestParameters.policy === undefined) {
            throw new runtime.RequiredError('policy','Required parameter requestParameters.policy was null or undefined when calling getPolicySchema.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPolicySchema.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPolicySchema.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/policies/{policy}/schema`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters.policy))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * Get a policy\'s schema
     */
    async getPolicySchema(requestParameters: GetPolicySchemaRequest): Promise<string> {
        const response = await this.getPolicySchemaRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * Get a resource
     */
    async getResourceRaw(requestParameters: GetResourceRequest): Promise<runtime.ApiResponse<PlatformPluginEntity>> {
        if (requestParameters.resource === null || requestParameters.resource === undefined) {
            throw new runtime.RequiredError('resource','Required parameter requestParameters.resource was null or undefined when calling getResource.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getResource.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getResource.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/resources/{resource}`.replace(`{${"resource"}}`, encodeURIComponent(String(requestParameters.resource))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PlatformPluginEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * Get a resource
     */
    async getResource(requestParameters: GetResourceRequest): Promise<PlatformPluginEntity> {
        const response = await this.getResourceRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * Get a resource\'s documentation
     */
    async getResourceDocRaw(requestParameters: GetResourceDocRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.resource === null || requestParameters.resource === undefined) {
            throw new runtime.RequiredError('resource','Required parameter requestParameters.resource was null or undefined when calling getResourceDoc.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getResourceDoc.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getResourceDoc.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/resources/{resource}/documentation`.replace(`{${"resource"}}`, encodeURIComponent(String(requestParameters.resource))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * Get a resource\'s documentation
     */
    async getResourceDoc(requestParameters: GetResourceDocRequest): Promise<string> {
        const response = await this.getResourceDocRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * Get a resource\'s schema
     */
    async getResourceSchemaRaw(requestParameters: GetResourceSchemaRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.resource === null || requestParameters.resource === undefined) {
            throw new runtime.RequiredError('resource','Required parameter requestParameters.resource was null or undefined when calling getResourceSchema.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getResourceSchema.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getResourceSchema.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/resources/{resource}/schema`.replace(`{${"resource"}}`, encodeURIComponent(String(requestParameters.resource))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * Get a resource\'s schema
     */
    async getResourceSchema(requestParameters: GetResourceSchemaRequest): Promise<string> {
        const response = await this.getResourceSchemaRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * List resource plugins
     */
    async getResourcesRaw(requestParameters: GetResourcesRequest): Promise<runtime.ApiResponse<Array<ResourceListItem>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getResources.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getResources.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/resources`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResourceListItemFromJSON));
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * List resource plugins
     */
    async getResources(requestParameters: GetResourcesRequest): Promise<Array<ResourceListItem>> {
        const response = await this.getResourcesRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * Get a service discovery
     */
    async getServiceDiscoveryRaw(requestParameters: GetServiceDiscoveryRequest): Promise<runtime.ApiResponse<PlatformPluginEntity>> {
        if (requestParameters.plugin === null || requestParameters.plugin === undefined) {
            throw new runtime.RequiredError('plugin','Required parameter requestParameters.plugin was null or undefined when calling getServiceDiscovery.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getServiceDiscovery.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getServiceDiscovery.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/services-discovery/{plugin}`.replace(`{${"plugin"}}`, encodeURIComponent(String(requestParameters.plugin))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PlatformPluginEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * Get a service discovery
     */
    async getServiceDiscovery(requestParameters: GetServiceDiscoveryRequest): Promise<PlatformPluginEntity> {
        const response = await this.getServiceDiscoveryRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * Get a service discovery\'s schema
     */
    async getServiceDiscoverySchemaRaw(requestParameters: GetServiceDiscoverySchemaRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.plugin === null || requestParameters.plugin === undefined) {
            throw new runtime.RequiredError('plugin','Required parameter requestParameters.plugin was null or undefined when calling getServiceDiscoverySchema.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getServiceDiscoverySchema.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getServiceDiscoverySchema.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/services-discovery/{plugin}/schema`.replace(`{${"plugin"}}`, encodeURIComponent(String(requestParameters.plugin))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * Get a service discovery\'s schema
     */
    async getServiceDiscoverySchema(requestParameters: GetServiceDiscoverySchemaRequest): Promise<string> {
        const response = await this.getServiceDiscoverySchemaRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * List service discovery plugins
     */
    async getServicesDiscoverResourcesRaw(requestParameters: GetServicesDiscoverResourcesRequest): Promise<runtime.ApiResponse<Array<ResourceListItem>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getServicesDiscoverResources.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getServicesDiscoverResources.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/services-discovery`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResourceListItemFromJSON));
    }

    /**
     * User must have the MANAGEMENT_API[READ] permission to use this service
     * List service discovery plugins
     */
    async getServicesDiscoverResources(requestParameters: GetServicesDiscoverResourcesRequest): Promise<Array<ResourceListItem>> {
        const response = await this.getServicesDiscoverResourcesRaw(requestParameters);
        return await response.value();
    }

    /**
     * These policies are used when importing an OAI to create an API
     * List policies which are handling Swagger / OAI definition
     */
    async getSwaggerPolicyRaw(requestParameters: GetSwaggerPolicyRequest): Promise<runtime.ApiResponse<Array<PolicyListItem>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getSwaggerPolicy.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getSwaggerPolicy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/policies/swagger`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PolicyListItemFromJSON));
    }

    /**
     * These policies are used when importing an OAI to create an API
     * List policies which are handling Swagger / OAI definition
     */
    async getSwaggerPolicy(requestParameters: GetSwaggerPolicyRequest): Promise<Array<PolicyListItem>> {
        const response = await this.getSwaggerPolicyRaw(requestParameters);
        return await response.value();
    }

}
