/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FormDataBodyPart,
    FormDataBodyPartFromJSON,
    FormDataBodyPartToJSON,
    PageEntity,
    PageEntityFromJSON,
    PageEntityToJSON,
} from '../models';

export interface AttachPortalPageMediaRequest {
    page: string;
    envId: string;
    orgId: string;
    file?: FormDataBodyPart;
    fileName?: string;
}

export interface GetPortalMediaRequest {
    hash: string;
    envId: string;
    orgId: string;
}

export interface GetPortalPageMediaRequest {
    page: string;
    envId: string;
    orgId: string;
}

export interface UploadPortalMediaRequest {
    envId: string;
    orgId: string;
    file?: FormDataBodyPart;
}

/**
 * 
 */
export class PortalMediaApi extends runtime.BaseAPI {

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[UPDATE] permission to use this service
     * Attach a media to a portal page 
     */
    async attachPortalPageMediaRaw(requestParameters: AttachPortalPageMediaRequest): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling attachPortalPageMedia.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling attachPortalPageMedia.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling attachPortalPageMedia.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        if (requestParameters.fileName !== undefined) {
            formParams.append('fileName', requestParameters.fileName as any);
        }

        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/portal/pages/{page}/media`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[UPDATE] permission to use this service
     * Attach a media to a portal page 
     */
    async attachPortalPageMedia(requestParameters: AttachPortalPageMediaRequest): Promise<PageEntity> {
        const response = await this.attachPortalPageMediaRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a media
     */
    async getPortalMediaRaw(requestParameters: GetPortalMediaRequest): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.hash === null || requestParameters.hash === undefined) {
            throw new runtime.RequiredError('hash','Required parameter requestParameters.hash was null or undefined when calling getPortalMedia.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPortalMedia.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPortalMedia.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/portal/media/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Retrieve a media
     */
    async getPortalMedia(requestParameters: GetPortalMediaRequest): Promise<Blob> {
        const response = await this.getPortalMediaRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[READ] permission to use this service
     * Retrieve all media for a Portal page
     */
    async getPortalPageMediaRaw(requestParameters: GetPortalPageMediaRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling getPortalPageMedia.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPortalPageMedia.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPortalPageMedia.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/portal/pages/{page}/media`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the ENVIRONMENT_DOCUMENTATION[READ] permission to use this service
     * Retrieve all media for a Portal page
     */
    async getPortalPageMedia(requestParameters: GetPortalPageMediaRequest): Promise<void> {
        await this.getPortalPageMediaRaw(requestParameters);
    }

    /**
     * User must have the PORTAL_DOCUMENTATION[CREATE] permission to use this service
     * Create a media for the portal
     */
    async uploadPortalMediaRaw(requestParameters: UploadPortalMediaRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling uploadPortalMedia.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling uploadPortalMedia.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/portal/media/upload`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * User must have the PORTAL_DOCUMENTATION[CREATE] permission to use this service
     * Create a media for the portal
     */
    async uploadPortalMedia(requestParameters: UploadPortalMediaRequest): Promise<string> {
        const response = await this.uploadPortalMediaRaw(requestParameters);
        return await response.value();
    }

}
