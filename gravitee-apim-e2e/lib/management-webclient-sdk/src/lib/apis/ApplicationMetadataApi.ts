/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApplicationMetadataEntity,
    ApplicationMetadataEntityFromJSON,
    ApplicationMetadataEntityToJSON,
    NewApplicationMetadataEntity,
    NewApplicationMetadataEntityFromJSON,
    NewApplicationMetadataEntityToJSON,
    UpdateApplicationMetadataEntity,
    UpdateApplicationMetadataEntityFromJSON,
    UpdateApplicationMetadataEntityToJSON,
} from '../models';

export interface CreateApplicationMetadataRequest {
    application: string;
    envId: string;
    orgId: string;
    newApplicationMetadataEntity: NewApplicationMetadataEntity;
}

export interface DeleteApplicationMetadataRequest {
    metadata: string;
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApplicationMetadataRequest {
    metadata: string;
    application: string;
    envId: string;
    orgId: string;
}

export interface GetApplicationMetadatasRequest {
    application: string;
    envId: string;
    orgId: string;
}

export interface UpdateApplicationMetadataRequest {
    metadata: string;
    application: string;
    envId: string;
    orgId: string;
    updateApplicationMetadataEntity: UpdateApplicationMetadataEntity;
}

/**
 * 
 */
export class ApplicationMetadataApi extends runtime.BaseAPI {

    /**
     * User must have the APPLICATION_METADATA[CREATE] permission to use this service
     * Create an application metadata
     */
    async createApplicationMetadataRaw(requestParameters: CreateApplicationMetadataRequest): Promise<runtime.ApiResponse<ApplicationMetadataEntity>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling createApplicationMetadata.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createApplicationMetadata.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createApplicationMetadata.');
        }

        if (requestParameters.newApplicationMetadataEntity === null || requestParameters.newApplicationMetadataEntity === undefined) {
            throw new runtime.RequiredError('newApplicationMetadataEntity','Required parameter requestParameters.newApplicationMetadataEntity was null or undefined when calling createApplicationMetadata.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/metadata`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewApplicationMetadataEntityToJSON(requestParameters.newApplicationMetadataEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationMetadataEntityFromJSON(jsonValue));
    }

    /**
     * User must have the APPLICATION_METADATA[CREATE] permission to use this service
     * Create an application metadata
     */
    async createApplicationMetadata(requestParameters: CreateApplicationMetadataRequest): Promise<ApplicationMetadataEntity> {
        const response = await this.createApplicationMetadataRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the APPLICATION_METADATA[DELETE] permission to use this service
     * Delete a metadata
     */
    async deleteApplicationMetadataRaw(requestParameters: DeleteApplicationMetadataRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.metadata === null || requestParameters.metadata === undefined) {
            throw new runtime.RequiredError('metadata','Required parameter requestParameters.metadata was null or undefined when calling deleteApplicationMetadata.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling deleteApplicationMetadata.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteApplicationMetadata.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteApplicationMetadata.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/metadata/{metadata}`.replace(`{${"metadata"}}`, encodeURIComponent(String(requestParameters.metadata))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the APPLICATION_METADATA[DELETE] permission to use this service
     * Delete a metadata
     */
    async deleteApplicationMetadata(requestParameters: DeleteApplicationMetadataRequest): Promise<void> {
        await this.deleteApplicationMetadataRaw(requestParameters);
    }

    /**
     * User must have the APPLICATION_METADATA[READ] permission to use this service
     * A metadata for an application and metadata id
     */
    async getApplicationMetadataRaw(requestParameters: GetApplicationMetadataRequest): Promise<runtime.ApiResponse<ApplicationMetadataEntity>> {
        if (requestParameters.metadata === null || requestParameters.metadata === undefined) {
            throw new runtime.RequiredError('metadata','Required parameter requestParameters.metadata was null or undefined when calling getApplicationMetadata.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApplicationMetadata.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplicationMetadata.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplicationMetadata.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/metadata/{metadata}`.replace(`{${"metadata"}}`, encodeURIComponent(String(requestParameters.metadata))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationMetadataEntityFromJSON(jsonValue));
    }

    /**
     * User must have the APPLICATION_METADATA[READ] permission to use this service
     * A metadata for an application and metadata id
     */
    async getApplicationMetadata(requestParameters: GetApplicationMetadataRequest): Promise<ApplicationMetadataEntity> {
        const response = await this.getApplicationMetadataRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the APPLICATION_METADATA[READ] permission to use this service
     * List metadata for an application
     */
    async getApplicationMetadatasRaw(requestParameters: GetApplicationMetadatasRequest): Promise<runtime.ApiResponse<Array<ApplicationMetadataEntity>>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getApplicationMetadatas.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApplicationMetadatas.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApplicationMetadatas.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/metadata`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationMetadataEntityFromJSON));
    }

    /**
     * User must have the APPLICATION_METADATA[READ] permission to use this service
     * List metadata for an application
     */
    async getApplicationMetadatas(requestParameters: GetApplicationMetadatasRequest): Promise<Array<ApplicationMetadataEntity>> {
        const response = await this.getApplicationMetadatasRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the APPLICATION_METADATA[UPDATE] permission to use this service
     * Update an application metadata
     */
    async updateApplicationMetadataRaw(requestParameters: UpdateApplicationMetadataRequest): Promise<runtime.ApiResponse<ApplicationMetadataEntity>> {
        if (requestParameters.metadata === null || requestParameters.metadata === undefined) {
            throw new runtime.RequiredError('metadata','Required parameter requestParameters.metadata was null or undefined when calling updateApplicationMetadata.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling updateApplicationMetadata.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateApplicationMetadata.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateApplicationMetadata.');
        }

        if (requestParameters.updateApplicationMetadataEntity === null || requestParameters.updateApplicationMetadataEntity === undefined) {
            throw new runtime.RequiredError('updateApplicationMetadataEntity','Required parameter requestParameters.updateApplicationMetadataEntity was null or undefined when calling updateApplicationMetadata.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/applications/{application}/metadata/{metadata}`.replace(`{${"metadata"}}`, encodeURIComponent(String(requestParameters.metadata))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApplicationMetadataEntityToJSON(requestParameters.updateApplicationMetadataEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationMetadataEntityFromJSON(jsonValue));
    }

    /**
     * User must have the APPLICATION_METADATA[UPDATE] permission to use this service
     * Update an application metadata
     */
    async updateApplicationMetadata(requestParameters: UpdateApplicationMetadataRequest): Promise<ApplicationMetadataEntity> {
        const response = await this.updateApplicationMetadataRaw(requestParameters);
        return await response.value();
    }

}
