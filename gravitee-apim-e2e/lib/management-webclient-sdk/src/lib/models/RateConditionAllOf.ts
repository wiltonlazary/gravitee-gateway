/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    SingleValueCondition,
    SingleValueConditionFromJSON,
    SingleValueConditionFromJSONTyped,
    SingleValueConditionToJSON,
} from './';

/**
 * 
 * @export
 * @interface RateConditionAllOf
 */
export interface RateConditionAllOf {
    /**
     * 
     * @type {string}
     * @memberof RateConditionAllOf
     */
    operator?: RateConditionAllOfOperatorEnum;
    /**
     * 
     * @type {number}
     * @memberof RateConditionAllOf
     */
    threshold?: number;
    /**
     * 
     * @type {SingleValueCondition}
     * @memberof RateConditionAllOf
     */
    comparison?: SingleValueCondition;
    /**
     * 
     * @type {number}
     * @memberof RateConditionAllOf
     */
    duration?: number;
    /**
     * 
     * @type {string}
     * @memberof RateConditionAllOf
     */
    timeUnit?: RateConditionAllOfTimeUnitEnum;
    /**
     * 
     * @type {number}
     * @memberof RateConditionAllOf
     */
    sampleSize?: number;
}

export function RateConditionAllOfFromJSON(json: any): RateConditionAllOf {
    return RateConditionAllOfFromJSONTyped(json, false);
}

export function RateConditionAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): RateConditionAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'operator': !exists(json, 'operator') ? undefined : json['operator'],
        'threshold': !exists(json, 'threshold') ? undefined : json['threshold'],
        'comparison': !exists(json, 'comparison') ? undefined : SingleValueConditionFromJSON(json['comparison']),
        'duration': !exists(json, 'duration') ? undefined : json['duration'],
        'timeUnit': !exists(json, 'timeUnit') ? undefined : json['timeUnit'],
        'sampleSize': !exists(json, 'sampleSize') ? undefined : json['sampleSize'],
    };
}

export function RateConditionAllOfToJSON(value?: RateConditionAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'operator': value.operator,
        'threshold': value.threshold,
        'comparison': SingleValueConditionToJSON(value.comparison),
        'duration': value.duration,
        'timeUnit': value.timeUnit,
        'sampleSize': value.sampleSize,
    };
}

/**
* @export
* @enum {string}
*/
export enum RateConditionAllOfOperatorEnum {
    LT = 'LT',
    LTE = 'LTE',
    GTE = 'GTE',
    GT = 'GT'
}
/**
* @export
* @enum {string}
*/
export enum RateConditionAllOfTimeUnitEnum {
    NANOSECONDS = 'NANOSECONDS',
    MICROSECONDS = 'MICROSECONDS',
    MILLISECONDS = 'MILLISECONDS',
    SECONDS = 'SECONDS',
    MINUTES = 'MINUTES',
    HOURS = 'HOURS',
    DAYS = 'DAYS'
}


