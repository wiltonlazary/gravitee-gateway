/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Analytics,
    AnalyticsFromJSON,
    AnalyticsFromJSONTyped,
    AnalyticsToJSON,
    Api,
    ApiFromJSON,
    ApiFromJSONTyped,
    ApiToJSON,
    ApiQualityMetrics,
    ApiQualityMetricsFromJSON,
    ApiQualityMetricsFromJSONTyped,
    ApiQualityMetricsToJSON,
    ApiReview,
    ApiReviewFromJSON,
    ApiReviewFromJSONTyped,
    ApiReviewToJSON,
    Company,
    CompanyFromJSON,
    CompanyFromJSONTyped,
    CompanyToJSON,
    Dashboards,
    DashboardsFromJSON,
    DashboardsFromJSONTyped,
    DashboardsToJSON,
    Documentation,
    DocumentationFromJSON,
    DocumentationFromJSONTyped,
    DocumentationToJSON,
    Email,
    EmailFromJSON,
    EmailFromJSONTyped,
    EmailToJSON,
    OpenAPIDocViewer,
    OpenAPIDocViewerFromJSON,
    OpenAPIDocViewerFromJSONTyped,
    OpenAPIDocViewerToJSON,
    Plan,
    PlanFromJSON,
    PlanFromJSONTyped,
    PlanToJSON,
    Portal,
    PortalFromJSON,
    PortalFromJSONTyped,
    PortalToJSON,
    PortalApplicationSettings,
    PortalApplicationSettingsFromJSON,
    PortalApplicationSettingsFromJSONTyped,
    PortalApplicationSettingsToJSON,
    PortalAuthentication,
    PortalAuthenticationFromJSON,
    PortalAuthenticationFromJSONTyped,
    PortalAuthenticationToJSON,
    PortalCors,
    PortalCorsFromJSON,
    PortalCorsFromJSONTyped,
    PortalCorsToJSON,
    PortalReCaptcha,
    PortalReCaptchaFromJSON,
    PortalReCaptchaFromJSONTyped,
    PortalReCaptchaToJSON,
    PortalScheduler,
    PortalSchedulerFromJSON,
    PortalSchedulerFromJSONTyped,
    PortalSchedulerToJSON,
} from './';

/**
 * 
 * @export
 * @interface PortalSettingsEntity
 */
export interface PortalSettingsEntity {
    /**
     * 
     * @type {Analytics}
     * @memberof PortalSettingsEntity
     */
    analytics?: Analytics;
    /**
     * 
     * @type {Api}
     * @memberof PortalSettingsEntity
     */
    api?: Api;
    /**
     * 
     * @type {ApiQualityMetrics}
     * @memberof PortalSettingsEntity
     */
    apiQualityMetrics?: ApiQualityMetrics;
    /**
     * 
     * @type {ApiReview}
     * @memberof PortalSettingsEntity
     */
    apiReview?: ApiReview;
    /**
     * 
     * @type {PortalApplicationSettings}
     * @memberof PortalSettingsEntity
     */
    application?: PortalApplicationSettings;
    /**
     * 
     * @type {PortalAuthentication}
     * @memberof PortalSettingsEntity
     */
    authentication?: PortalAuthentication;
    /**
     * 
     * @type {Company}
     * @memberof PortalSettingsEntity
     */
    company?: Company;
    /**
     * 
     * @type {PortalCors}
     * @memberof PortalSettingsEntity
     */
    cors?: PortalCors;
    /**
     * 
     * @type {Dashboards}
     * @memberof PortalSettingsEntity
     */
    dashboards?: Dashboards;
    /**
     * 
     * @type {Documentation}
     * @memberof PortalSettingsEntity
     */
    documentation?: Documentation;
    /**
     * 
     * @type {Email}
     * @memberof PortalSettingsEntity
     */
    email?: Email;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof PortalSettingsEntity
     */
    readonly metadata?: { [key: string]: Array<string>; };
    /**
     * 
     * @type {OpenAPIDocViewer}
     * @memberof PortalSettingsEntity
     */
    openAPIDocViewer?: OpenAPIDocViewer;
    /**
     * 
     * @type {Plan}
     * @memberof PortalSettingsEntity
     */
    plan?: Plan;
    /**
     * 
     * @type {Portal}
     * @memberof PortalSettingsEntity
     */
    portal?: Portal;
    /**
     * 
     * @type {PortalReCaptcha}
     * @memberof PortalSettingsEntity
     */
    reCaptcha?: PortalReCaptcha;
    /**
     * 
     * @type {PortalScheduler}
     * @memberof PortalSettingsEntity
     */
    scheduler?: PortalScheduler;
}

export function PortalSettingsEntityFromJSON(json: any): PortalSettingsEntity {
    return PortalSettingsEntityFromJSONTyped(json, false);
}

export function PortalSettingsEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): PortalSettingsEntity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'analytics': !exists(json, 'analytics') ? undefined : AnalyticsFromJSON(json['analytics']),
        'api': !exists(json, 'api') ? undefined : ApiFromJSON(json['api']),
        'apiQualityMetrics': !exists(json, 'apiQualityMetrics') ? undefined : ApiQualityMetricsFromJSON(json['apiQualityMetrics']),
        'apiReview': !exists(json, 'apiReview') ? undefined : ApiReviewFromJSON(json['apiReview']),
        'application': !exists(json, 'application') ? undefined : PortalApplicationSettingsFromJSON(json['application']),
        'authentication': !exists(json, 'authentication') ? undefined : PortalAuthenticationFromJSON(json['authentication']),
        'company': !exists(json, 'company') ? undefined : CompanyFromJSON(json['company']),
        'cors': !exists(json, 'cors') ? undefined : PortalCorsFromJSON(json['cors']),
        'dashboards': !exists(json, 'dashboards') ? undefined : DashboardsFromJSON(json['dashboards']),
        'documentation': !exists(json, 'documentation') ? undefined : DocumentationFromJSON(json['documentation']),
        'email': !exists(json, 'email') ? undefined : EmailFromJSON(json['email']),
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'openAPIDocViewer': !exists(json, 'openAPIDocViewer') ? undefined : OpenAPIDocViewerFromJSON(json['openAPIDocViewer']),
        'plan': !exists(json, 'plan') ? undefined : PlanFromJSON(json['plan']),
        'portal': !exists(json, 'portal') ? undefined : PortalFromJSON(json['portal']),
        'reCaptcha': !exists(json, 'reCaptcha') ? undefined : PortalReCaptchaFromJSON(json['reCaptcha']),
        'scheduler': !exists(json, 'scheduler') ? undefined : PortalSchedulerFromJSON(json['scheduler']),
    };
}

export function PortalSettingsEntityToJSON(value?: PortalSettingsEntity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'analytics': AnalyticsToJSON(value.analytics),
        'api': ApiToJSON(value.api),
        'apiQualityMetrics': ApiQualityMetricsToJSON(value.apiQualityMetrics),
        'apiReview': ApiReviewToJSON(value.apiReview),
        'application': PortalApplicationSettingsToJSON(value.application),
        'authentication': PortalAuthenticationToJSON(value.authentication),
        'company': CompanyToJSON(value.company),
        'cors': PortalCorsToJSON(value.cors),
        'dashboards': DashboardsToJSON(value.dashboards),
        'documentation': DocumentationToJSON(value.documentation),
        'email': EmailToJSON(value.email),
        'openAPIDocViewer': OpenAPIDocViewerToJSON(value.openAPIDocViewer),
        'plan': PlanToJSON(value.plan),
        'portal': PortalToJSON(value.portal),
        'reCaptcha': PortalReCaptchaToJSON(value.reCaptcha),
        'scheduler': PortalSchedulerToJSON(value.scheduler),
    };
}


