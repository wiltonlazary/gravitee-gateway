/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AggregationConditionAllOf,
    AggregationConditionAllOfFromJSON,
    AggregationConditionAllOfFromJSONTyped,
    AggregationConditionAllOfToJSON,
    Condition,
    ConditionFromJSON,
    ConditionFromJSONTyped,
    ConditionToJSON,
    Projection,
    ProjectionFromJSON,
    ProjectionFromJSONTyped,
    ProjectionToJSON,
} from './';

/**
 * 
 * @export
 * @interface AggregationCondition
 */
export interface AggregationCondition extends Condition {
    /**
     * 
     * @type {string}
     * @memberof AggregationCondition
     */
    _function: AggregationConditionFunctionEnum;
    /**
     * 
     * @type {string}
     * @memberof AggregationCondition
     */
    property?: string;
    /**
     * 
     * @type {string}
     * @memberof AggregationCondition
     */
    operator: AggregationConditionOperatorEnum;
    /**
     * 
     * @type {number}
     * @memberof AggregationCondition
     */
    threshold: number;
    /**
     * 
     * @type {string}
     * @memberof AggregationCondition
     */
    timeUnit?: AggregationConditionTimeUnitEnum;
    /**
     * 
     * @type {number}
     * @memberof AggregationCondition
     */
    duration: number;
}

export function AggregationConditionFromJSON(json: any): AggregationCondition {
    return AggregationConditionFromJSONTyped(json, false);
}

export function AggregationConditionFromJSONTyped(json: any, ignoreDiscriminator: boolean): AggregationCondition {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...ConditionFromJSONTyped(json, ignoreDiscriminator),
        '_function': json['function'],
        'property': !exists(json, 'property') ? undefined : json['property'],
        'operator': json['operator'],
        'threshold': json['threshold'],
        'timeUnit': !exists(json, 'timeUnit') ? undefined : json['timeUnit'],
        'duration': json['duration'],
    };
}

export function AggregationConditionToJSON(value?: AggregationCondition | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...ConditionToJSON(value),
        'function': value._function,
        'property': value.property,
        'operator': value.operator,
        'threshold': value.threshold,
        'timeUnit': value.timeUnit,
        'duration': value.duration,
    };
}

/**
* @export
* @enum {string}
*/
export enum AggregationConditionFunctionEnum {
    COUNT = 'COUNT',
    AVG = 'AVG',
    MIN = 'MIN',
    MAX = 'MAX',
    P50 = 'P50',
    P90 = 'P90',
    P95 = 'P95',
    P99 = 'P99'
}
/**
* @export
* @enum {string}
*/
export enum AggregationConditionOperatorEnum {
    LT = 'LT',
    LTE = 'LTE',
    GTE = 'GTE',
    GT = 'GT'
}
/**
* @export
* @enum {string}
*/
export enum AggregationConditionTimeUnitEnum {
    NANOSECONDS = 'NANOSECONDS',
    MICROSECONDS = 'MICROSECONDS',
    MILLISECONDS = 'MILLISECONDS',
    SECONDS = 'SECONDS',
    MINUTES = 'MINUTES',
    HOURS = 'HOURS',
    DAYS = 'DAYS'
}


