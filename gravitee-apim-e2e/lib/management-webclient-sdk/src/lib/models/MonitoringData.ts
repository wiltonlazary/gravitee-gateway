/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MonitoringCPU,
    MonitoringCPUFromJSON,
    MonitoringCPUFromJSONTyped,
    MonitoringCPUToJSON,
    MonitoringGC,
    MonitoringGCFromJSON,
    MonitoringGCFromJSONTyped,
    MonitoringGCToJSON,
    MonitoringJVM,
    MonitoringJVMFromJSON,
    MonitoringJVMFromJSONTyped,
    MonitoringJVMToJSON,
    MonitoringProcess,
    MonitoringProcessFromJSON,
    MonitoringProcessFromJSONTyped,
    MonitoringProcessToJSON,
    MonitoringThread,
    MonitoringThreadFromJSON,
    MonitoringThreadFromJSONTyped,
    MonitoringThreadToJSON,
} from './';

/**
 * 
 * @export
 * @interface MonitoringData
 */
export interface MonitoringData {
    /**
     * 
     * @type {MonitoringCPU}
     * @memberof MonitoringData
     */
    cpu?: MonitoringCPU;
    /**
     * 
     * @type {MonitoringGC}
     * @memberof MonitoringData
     */
    gc?: MonitoringGC;
    /**
     * 
     * @type {MonitoringJVM}
     * @memberof MonitoringData
     */
    jvm?: MonitoringJVM;
    /**
     * 
     * @type {MonitoringProcess}
     * @memberof MonitoringData
     */
    process?: MonitoringProcess;
    /**
     * 
     * @type {MonitoringThread}
     * @memberof MonitoringData
     */
    thread?: MonitoringThread;
}

export function MonitoringDataFromJSON(json: any): MonitoringData {
    return MonitoringDataFromJSONTyped(json, false);
}

export function MonitoringDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): MonitoringData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cpu': !exists(json, 'cpu') ? undefined : MonitoringCPUFromJSON(json['cpu']),
        'gc': !exists(json, 'gc') ? undefined : MonitoringGCFromJSON(json['gc']),
        'jvm': !exists(json, 'jvm') ? undefined : MonitoringJVMFromJSON(json['jvm']),
        'process': !exists(json, 'process') ? undefined : MonitoringProcessFromJSON(json['process']),
        'thread': !exists(json, 'thread') ? undefined : MonitoringThreadFromJSON(json['thread']),
    };
}

export function MonitoringDataToJSON(value?: MonitoringData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cpu': MonitoringCPUToJSON(value.cpu),
        'gc': MonitoringGCToJSON(value.gc),
        'jvm': MonitoringJVMToJSON(value.jvm),
        'process': MonitoringProcessToJSON(value.process),
        'thread': MonitoringThreadToJSON(value.thread),
    };
}


