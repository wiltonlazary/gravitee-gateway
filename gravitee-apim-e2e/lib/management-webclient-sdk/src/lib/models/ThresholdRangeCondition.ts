/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Condition,
    ConditionFromJSON,
    ConditionFromJSONTyped,
    ConditionToJSON,
    Projection,
    ProjectionFromJSON,
    ProjectionFromJSONTyped,
    ProjectionToJSON,
    ThresholdRangeConditionAllOf,
    ThresholdRangeConditionAllOfFromJSON,
    ThresholdRangeConditionAllOfFromJSONTyped,
    ThresholdRangeConditionAllOfToJSON,
} from './';

/**
 * 
 * @export
 * @interface ThresholdRangeCondition
 */
export interface ThresholdRangeCondition extends Condition {
    /**
     * 
     * @type {string}
     * @memberof ThresholdRangeCondition
     */
    property: string;
    /**
     * 
     * @type {string}
     * @memberof ThresholdRangeCondition
     */
    operatorLow: ThresholdRangeConditionOperatorLowEnum;
    /**
     * 
     * @type {number}
     * @memberof ThresholdRangeCondition
     */
    thresholdLow: number;
    /**
     * 
     * @type {string}
     * @memberof ThresholdRangeCondition
     */
    operatorHigh: ThresholdRangeConditionOperatorHighEnum;
    /**
     * 
     * @type {number}
     * @memberof ThresholdRangeCondition
     */
    thresholdHigh: number;
}

export function ThresholdRangeConditionFromJSON(json: any): ThresholdRangeCondition {
    return ThresholdRangeConditionFromJSONTyped(json, false);
}

export function ThresholdRangeConditionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ThresholdRangeCondition {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...ConditionFromJSONTyped(json, ignoreDiscriminator),
        'property': json['property'],
        'operatorLow': json['operatorLow'],
        'thresholdLow': json['thresholdLow'],
        'operatorHigh': json['operatorHigh'],
        'thresholdHigh': json['thresholdHigh'],
    };
}

export function ThresholdRangeConditionToJSON(value?: ThresholdRangeCondition | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...ConditionToJSON(value),
        'property': value.property,
        'operatorLow': value.operatorLow,
        'thresholdLow': value.thresholdLow,
        'operatorHigh': value.operatorHigh,
        'thresholdHigh': value.thresholdHigh,
    };
}

/**
* @export
* @enum {string}
*/
export enum ThresholdRangeConditionOperatorLowEnum {
    INCLUSIVE = 'INCLUSIVE',
    EXCLUSIVE = 'EXCLUSIVE'
}
/**
* @export
* @enum {string}
*/
export enum ThresholdRangeConditionOperatorHighEnum {
    INCLUSIVE = 'INCLUSIVE',
    EXCLUSIVE = 'EXCLUSIVE'
}


