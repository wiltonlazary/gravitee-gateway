/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io Portal Rest API
 * API dedicated to the devportal part of Gravitee
 *
 * Contact: contact@graviteesource.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Technical information about the page
 * @export
 * @interface PageConfiguration
 */
export interface PageConfiguration {
    /**
     * Enable "Try It!" mode in documentation page.
     * @type {boolean}
     * @memberof PageConfiguration
     */
    try_it?: boolean;
    /**
     * Enable "Try It!" mode in documentation page for anonymous users.
     * @type {boolean}
     * @memberof PageConfiguration
     */
    try_it_anonymous?: boolean;
    /**
     * Base URL used to try the API.
     * @type {string}
     * @memberof PageConfiguration
     */
    try_it_url?: string;
    /**
     * Show the URL to download the content.
     * @type {boolean}
     * @memberof PageConfiguration
     */
    show_url?: boolean;
    /**
     * Display the operationId in the operations list.
     * @type {boolean}
     * @memberof PageConfiguration
     */
    display_operation_id?: boolean;
    /**
     * Default expansion setting for the operations and tags.\
     * Possibles values are :
     *  - list : Expands only the tags
     *  - full : Expands the tags and operations
     *  - none : Expands nothing. DEFAULT.
     * @type {string}
     * @memberof PageConfiguration
     */
    doc_expansion?: PageConfigurationDocExpansionEnum;
    /**
     * Add a top bar to filter content.
     * @type {boolean}
     * @memberof PageConfiguration
     */
    enable_filtering?: boolean;
    /**
     * Display vendor extension (X-) fields and values for Operations, Parameters, and Schema.
     * @type {boolean}
     * @memberof PageConfiguration
     */
    show_extensions?: boolean;
    /**
     * Display extensions (pattern, maxLength, minLength, maximum, minimum) fields and values for Parameters.
     * @type {boolean}
     * @memberof PageConfiguration
     */
    show_common_extensions?: boolean;
    /**
     * Number of max tagged operations displayed. \
     * Limits the number of tagged operations displayed to at most this many (negative means show all operations).\
     * No limit by default.
     * @type {number}
     * @memberof PageConfiguration
     */
    max_displayed_tags?: number;
    /**
     * The type of viewer for OpenAPI specification. Default is 'Swagger'
     * @type {string}
     * @memberof PageConfiguration
     */
    viewer?: PageConfigurationViewerEnum;
}

export function PageConfigurationFromJSON(json: any): PageConfiguration {
    return PageConfigurationFromJSONTyped(json, false);
}

export function PageConfigurationFromJSONTyped(json: any, ignoreDiscriminator: boolean): PageConfiguration {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'try_it': !exists(json, 'try_it') ? undefined : json['try_it'],
        'try_it_anonymous': !exists(json, 'try_it_anonymous') ? undefined : json['try_it_anonymous'],
        'try_it_url': !exists(json, 'try_it_url') ? undefined : json['try_it_url'],
        'show_url': !exists(json, 'show_url') ? undefined : json['show_url'],
        'display_operation_id': !exists(json, 'display_operation_id') ? undefined : json['display_operation_id'],
        'doc_expansion': !exists(json, 'doc_expansion') ? undefined : json['doc_expansion'],
        'enable_filtering': !exists(json, 'enable_filtering') ? undefined : json['enable_filtering'],
        'show_extensions': !exists(json, 'show_extensions') ? undefined : json['show_extensions'],
        'show_common_extensions': !exists(json, 'show_common_extensions') ? undefined : json['show_common_extensions'],
        'max_displayed_tags': !exists(json, 'max_displayed_tags') ? undefined : json['max_displayed_tags'],
        'viewer': !exists(json, 'viewer') ? undefined : json['viewer'],
    };
}

export function PageConfigurationToJSON(value?: PageConfiguration | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'try_it': value.try_it,
        'try_it_anonymous': value.try_it_anonymous,
        'try_it_url': value.try_it_url,
        'show_url': value.show_url,
        'display_operation_id': value.display_operation_id,
        'doc_expansion': value.doc_expansion,
        'enable_filtering': value.enable_filtering,
        'show_extensions': value.show_extensions,
        'show_common_extensions': value.show_common_extensions,
        'max_displayed_tags': value.max_displayed_tags,
        'viewer': value.viewer,
    };
}

/**
* @export
* @enum {string}
*/
export enum PageConfigurationDocExpansionEnum {
    List = 'list',
    Full = 'full',
    None = 'none'
}
/**
* @export
* @enum {string}
*/
export enum PageConfigurationViewerEnum {
    Swagger = 'Swagger',
    Redoc = 'Redoc'
}


