/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io Portal Rest API
 * API dedicated to the devportal part of Gravitee
 *
 * Contact: contact@graviteesource.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Ticket
 */
export interface Ticket {
    /**
     * Unique identifier of a ticket.
     * @type {string}
     * @memberof Ticket
     */
    id?: string;
    /**
     * Concerned API.
     * @type {string}
     * @memberof Ticket
     */
    api?: string;
    /**
     * Concerned application.
     * @type {string}
     * @memberof Ticket
     */
    application?: string;
    /**
     * Subject of the ticket.
     * @type {string}
     * @memberof Ticket
     */
    subject?: string;
    /**
     * Content of the ticket.
     * @type {string}
     * @memberof Ticket
     */
    content?: string;
    /**
     * Creation date and time of the ticket.
     * @type {Date}
     * @memberof Ticket
     */
    created_at?: Date;
    /**
     * User identifier of the ticket creator.
     * @type {string}
     * @memberof Ticket
     */
    from_user?: string;
}

export function TicketFromJSON(json: any): Ticket {
    return TicketFromJSONTyped(json, false);
}

export function TicketFromJSONTyped(json: any, ignoreDiscriminator: boolean): Ticket {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'api': !exists(json, 'api') ? undefined : json['api'],
        'application': !exists(json, 'application') ? undefined : json['application'],
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'content': !exists(json, 'content') ? undefined : json['content'],
        'created_at': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'from_user': !exists(json, 'from_user') ? undefined : json['from_user'],
    };
}

export function TicketToJSON(value?: Ticket | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'api': value.api,
        'application': value.application,
        'subject': value.subject,
        'content': value.content,
        'created_at': value.created_at === undefined ? undefined : (value.created_at.toISOString()),
        'from_user': value.from_user,
    };
}


