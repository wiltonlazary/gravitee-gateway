/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io Portal Rest API
 * API dedicated to the devportal part of Gravitee
 *
 * Contact: contact@graviteesource.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Enabled,
    EnabledFromJSON,
    EnabledFromJSONTyped,
    EnabledToJSON,
} from './';

/**
 * 
 * @export
 * @interface ConfigurationApplicationTypes
 */
export interface ConfigurationApplicationTypes {
    /**
     * 
     * @type {Enabled}
     * @memberof ConfigurationApplicationTypes
     */
    simple?: Enabled;
    /**
     * 
     * @type {Enabled}
     * @memberof ConfigurationApplicationTypes
     */
    browser?: Enabled;
    /**
     * 
     * @type {Enabled}
     * @memberof ConfigurationApplicationTypes
     */
    web?: Enabled;
    /**
     * 
     * @type {Enabled}
     * @memberof ConfigurationApplicationTypes
     */
    _native?: Enabled;
    /**
     * 
     * @type {Enabled}
     * @memberof ConfigurationApplicationTypes
     */
    backend_to_backend?: Enabled;
}

export function ConfigurationApplicationTypesFromJSON(json: any): ConfigurationApplicationTypes {
    return ConfigurationApplicationTypesFromJSONTyped(json, false);
}

export function ConfigurationApplicationTypesFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfigurationApplicationTypes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'simple': !exists(json, 'simple') ? undefined : EnabledFromJSON(json['simple']),
        'browser': !exists(json, 'browser') ? undefined : EnabledFromJSON(json['browser']),
        'web': !exists(json, 'web') ? undefined : EnabledFromJSON(json['web']),
        '_native': !exists(json, 'native') ? undefined : EnabledFromJSON(json['native']),
        'backend_to_backend': !exists(json, 'backend_to_backend') ? undefined : EnabledFromJSON(json['backend_to_backend']),
    };
}

export function ConfigurationApplicationTypesToJSON(value?: ConfigurationApplicationTypes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'simple': EnabledToJSON(value.simple),
        'browser': EnabledToJSON(value.browser),
        'web': EnabledToJSON(value.web),
        'native': EnabledToJSON(value._native),
        'backend_to_backend': EnabledToJSON(value.backend_to_backend),
    };
}


