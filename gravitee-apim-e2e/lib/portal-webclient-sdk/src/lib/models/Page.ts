/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io Portal Rest API
 * API dedicated to the devportal part of Gravitee
 *
 * Contact: contact@graviteesource.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Metadata,
    MetadataFromJSON,
    MetadataFromJSONTyped,
    MetadataToJSON,
    PageConfiguration,
    PageConfigurationFromJSON,
    PageConfigurationFromJSONTyped,
    PageConfigurationToJSON,
    PageLinks,
    PageLinksFromJSON,
    PageLinksFromJSONTyped,
    PageLinksToJSON,
    PageMedia,
    PageMediaFromJSON,
    PageMediaFromJSONTyped,
    PageMediaToJSON,
    PageRevisionId,
    PageRevisionIdFromJSON,
    PageRevisionIdFromJSONTyped,
    PageRevisionIdToJSON,
} from './';

/**
 * 
 * @export
 * @interface Page
 */
export interface Page {
    /**
     * Unique identifier of a page.
     * @type {string}
     * @memberof Page
     */
    id: string;
    /**
     * Name of the page.
     * @type {string}
     * @memberof Page
     */
    name: string;
    /**
     * Type of documentation.
     * @type {string}
     * @memberof Page
     */
    type: PageTypeEnum;
    /**
     * Order of the documentation page in its folder.
     * @type {number}
     * @memberof Page
     */
    order: number;
    /**
     * Parent page. MAY be null.
     * @type {string}
     * @memberof Page
     */
    parent?: string;
    /**
     * Last update date and time.
     * @type {Date}
     * @memberof Page
     */
    updated_at?: Date;
    /**
     * 
     * @type {PageConfiguration}
     * @memberof Page
     */
    configuration?: PageConfiguration;
    /**
     * list of media hash, attached to this page
     * @type {Array<PageMedia>}
     * @memberof Page
     */
    media?: Array<PageMedia>;
    /**
     * Array of metadata about the page. This array is filled when the page has been fetched from a distant source (GitHub, GitLab, etc...).
     * @type {Array<Metadata>}
     * @memberof Page
     */
    metadata?: Array<Metadata>;
    /**
     * 
     * @type {PageLinks}
     * @memberof Page
     */
    _links?: PageLinks;
    /**
     * Only returned with (*)/apis/{apiId}/pages/{pageId}* and (*)/pages/{pageId}*.
     * Need *include* query param to contain 'content'.
     * 
     * The content of the page.
     * @type {string}
     * @memberof Page
     */
    content?: string;
    /**
     * 
     * @type {PageRevisionId}
     * @memberof Page
     */
    contentRevisionId?: PageRevisionId;
}

export function PageFromJSON(json: any): Page {
    return PageFromJSONTyped(json, false);
}

export function PageFromJSONTyped(json: any, ignoreDiscriminator: boolean): Page {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'type': json['type'],
        'order': json['order'],
        'parent': !exists(json, 'parent') ? undefined : json['parent'],
        'updated_at': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
        'configuration': !exists(json, 'configuration') ? undefined : PageConfigurationFromJSON(json['configuration']),
        'media': !exists(json, 'media') ? undefined : ((json['media'] as Array<any>).map(PageMediaFromJSON)),
        'metadata': !exists(json, 'metadata') ? undefined : ((json['metadata'] as Array<any>).map(MetadataFromJSON)),
        '_links': !exists(json, '_links') ? undefined : PageLinksFromJSON(json['_links']),
        'content': !exists(json, 'content') ? undefined : json['content'],
        'contentRevisionId': !exists(json, 'contentRevisionId') ? undefined : PageRevisionIdFromJSON(json['contentRevisionId']),
    };
}

export function PageToJSON(value?: Page | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'type': value.type,
        'order': value.order,
        'parent': value.parent,
        'updated_at': value.updated_at === undefined ? undefined : (value.updated_at.toISOString()),
        'configuration': PageConfigurationToJSON(value.configuration),
        'media': value.media === undefined ? undefined : ((value.media as Array<any>).map(PageMediaToJSON)),
        'metadata': value.metadata === undefined ? undefined : ((value.metadata as Array<any>).map(MetadataToJSON)),
        '_links': PageLinksToJSON(value._links),
        'content': value.content,
        'contentRevisionId': PageRevisionIdToJSON(value.contentRevisionId),
    };
}

/**
* @export
* @enum {string}
*/
export enum PageTypeEnum {
    ASCIIDOC = 'ASCIIDOC',
    ASYNCAPI = 'ASYNCAPI',
    SWAGGER = 'SWAGGER',
    MARKDOWN = 'MARKDOWN',
    FOLDER = 'FOLDER',
    ROOT = 'ROOT',
    LINK = 'LINK'
}


