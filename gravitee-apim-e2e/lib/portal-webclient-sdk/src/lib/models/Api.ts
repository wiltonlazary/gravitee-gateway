/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io Portal Rest API
 * API dedicated to the devportal part of Gravitee
 *
 * Contact: contact@graviteesource.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ApiLinks,
    ApiLinksFromJSON,
    ApiLinksFromJSONTyped,
    ApiLinksToJSON,
    Page,
    PageFromJSON,
    PageFromJSONTyped,
    PageToJSON,
    Plan,
    PlanFromJSON,
    PlanFromJSONTyped,
    PlanToJSON,
    RatingSummary,
    RatingSummaryFromJSON,
    RatingSummaryFromJSONTyped,
    RatingSummaryToJSON,
    User,
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './';

/**
 * Describes an API.
 * @export
 * @interface Api
 */
export interface Api {
    /**
     * Unique identifier of an API.
     * @type {string}
     * @memberof Api
     */
    id: string;
    /**
     * Name of the API.
     * @type {string}
     * @memberof Api
     */
    name: string;
    /**
     * Version of the API.
     * @type {string}
     * @memberof Api
     */
    version: string;
    /**
     * Description of the API.
     * @type {string}
     * @memberof Api
     */
    description: string;
    /**
     * Whether or not the API is in draft.
     * @type {boolean}
     * @memberof Api
     */
    draft?: boolean;
    /**
     * Whether or not the API is public.
     * @type {boolean}
     * @memberof Api
     */
    _public?: boolean;
    /**
     * Whether or not the API is running.
     * @type {boolean}
     * @memberof Api
     */
    running?: boolean;
    /**
     * List of all the avaible endpoints to call the API.
     * @type {Array<string>}
     * @memberof Api
     */
    entrypoints?: Array<string>;
    /**
     * List of labels linked to this API.
     * @type {Array<string>}
     * @memberof Api
     */
    labels?: Array<string>;
    /**
     * 
     * @type {User}
     * @memberof Api
     */
    owner: User;
    /**
     * create date and time.
     * @type {Date}
     * @memberof Api
     */
    created_at?: Date;
    /**
     * Last update date and time.
     * @type {Date}
     * @memberof Api
     */
    updated_at?: Date;
    /**
     * List of categories this API belongs to.
     * @type {Array<string>}
     * @memberof Api
     */
    categories?: Array<string>;
    /**
     * 
     * @type {RatingSummary}
     * @memberof Api
     */
    rating_summary?: RatingSummary;
    /**
     * 
     * @type {ApiLinks}
     * @memberof Api
     */
    _links?: ApiLinks;
    /**
     * Only returned with (*)/apis/{apiId}*.
     * Need *include* query param to contain 'pages'.
     * 
     * The documentation pages of this API. Same as (*)/apis/{apiId}/pages*.
     * @type {Array<Page>}
     * @memberof Api
     */
    pages?: Array<Page>;
    /**
     * Only returned with (*)/apis/{apiId}*.
     * Need *include* query param to contain 'plans'.
     * 
     * The plans of this API. Same as (*)/apis/{apiId}/plans*.
     * @type {Array<Plan>}
     * @memberof Api
     */
    plans?: Array<Plan>;
}

export function ApiFromJSON(json: any): Api {
    return ApiFromJSONTyped(json, false);
}

export function ApiFromJSONTyped(json: any, ignoreDiscriminator: boolean): Api {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'version': json['version'],
        'description': json['description'],
        'draft': !exists(json, 'draft') ? undefined : json['draft'],
        '_public': !exists(json, 'public') ? undefined : json['public'],
        'running': !exists(json, 'running') ? undefined : json['running'],
        'entrypoints': !exists(json, 'entrypoints') ? undefined : json['entrypoints'],
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'owner': UserFromJSON(json['owner']),
        'created_at': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updated_at': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
        'categories': !exists(json, 'categories') ? undefined : json['categories'],
        'rating_summary': !exists(json, 'rating_summary') ? undefined : RatingSummaryFromJSON(json['rating_summary']),
        '_links': !exists(json, '_links') ? undefined : ApiLinksFromJSON(json['_links']),
        'pages': !exists(json, 'pages') ? undefined : ((json['pages'] as Array<any>).map(PageFromJSON)),
        'plans': !exists(json, 'plans') ? undefined : ((json['plans'] as Array<any>).map(PlanFromJSON)),
    };
}

export function ApiToJSON(value?: Api | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'version': value.version,
        'description': value.description,
        'draft': value.draft,
        'public': value._public,
        'running': value.running,
        'entrypoints': value.entrypoints,
        'labels': value.labels,
        'owner': UserToJSON(value.owner),
        'created_at': value.created_at === undefined ? undefined : (value.created_at.toISOString()),
        'updated_at': value.updated_at === undefined ? undefined : (value.updated_at.toISOString()),
        'categories': value.categories,
        'rating_summary': RatingSummaryToJSON(value.rating_summary),
        '_links': ApiLinksToJSON(value._links),
        'pages': value.pages === undefined ? undefined : ((value.pages as Array<any>).map(PageToJSON)),
        'plans': value.plans === undefined ? undefined : ((value.plans as Array<any>).map(PlanToJSON)),
    };
}


