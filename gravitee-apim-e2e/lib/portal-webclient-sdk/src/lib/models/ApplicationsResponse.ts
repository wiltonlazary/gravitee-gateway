/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io Portal Rest API
 * API dedicated to the devportal part of Gravitee
 *
 * Contact: contact@graviteesource.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Application,
    ApplicationFromJSON,
    ApplicationFromJSONTyped,
    ApplicationToJSON,
    Links,
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './';

/**
 * 
 * @export
 * @interface ApplicationsResponse
 */
export interface ApplicationsResponse {
    /**
     * List of applications.
     * @type {Array<Application>}
     * @memberof ApplicationsResponse
     */
    data?: Array<Application>;
    /**
     * Map of Map of Object
     * @type {{ [key: string]: { [key: string]: any; }; }}
     * @memberof ApplicationsResponse
     */
    metadata?: { [key: string]: { [key: string]: any; }; };
    /**
     * 
     * @type {Links}
     * @memberof ApplicationsResponse
     */
    links?: Links;
}

export function ApplicationsResponseFromJSON(json: any): ApplicationsResponse {
    return ApplicationsResponseFromJSONTyped(json, false);
}

export function ApplicationsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationsResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'data': !exists(json, 'data') ? undefined : ((json['data'] as Array<any>).map(ApplicationFromJSON)),
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
    };
}

export function ApplicationsResponseToJSON(value?: ApplicationsResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'data': value.data === undefined ? undefined : ((value.data as Array<any>).map(ApplicationToJSON)),
        'metadata': value.metadata,
        'links': LinksToJSON(value.links),
    };
}


