/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io Portal Rest API
 * API dedicated to the devportal part of Gravitee
 *
 * Contact: contact@graviteesource.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ApiKeyModeEnum,
    ApiKeyModeEnumFromJSON,
    ApiKeyModeEnumFromJSONTyped,
    ApiKeyModeEnumToJSON,
    ApplicationLinks,
    ApplicationLinksFromJSON,
    ApplicationLinksFromJSONTyped,
    ApplicationLinksToJSON,
    ApplicationSettings,
    ApplicationSettingsFromJSON,
    ApplicationSettingsFromJSONTyped,
    ApplicationSettingsToJSON,
    Group,
    GroupFromJSON,
    GroupFromJSONTyped,
    GroupToJSON,
    User,
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './';

/**
 * 
 * @export
 * @interface Application
 */
export interface Application {
    /**
     * Unique identifier of an application.
     * @type {string}
     * @memberof Application
     */
    id?: string;
    /**
     * Name of the application.
     * @type {string}
     * @memberof Application
     */
    name?: string;
    /**
     * Description of the application.
     * @type {string}
     * @memberof Application
     */
    description?: string;
    /**
     * Domain used by the application.
     * @type {string}
     * @memberof Application
     */
    domain?: string;
    /**
     * Type of the application (Web, Mobile, ...).
     * @type {string}
     * @memberof Application
     */
    applicationType?: string;
    /**
     * True if the application has client id.
     * @type {boolean}
     * @memberof Application
     */
    hasClientId?: boolean;
    /**
     * 
     * @type {User}
     * @memberof Application
     */
    owner?: User;
    /**
     * Creation date and time of the application.
     * @type {Date}
     * @memberof Application
     */
    created_at?: Date;
    /**
     * Last update date and time of the application.
     * @type {Date}
     * @memberof Application
     */
    updated_at?: Date;
    /**
     * Array of groups associated to the application.
     * @type {Array<Group>}
     * @memberof Application
     */
    groups?: Array<Group>;
    /**
     * Picture of the application. This attribute is only used to update a picture.\
     * To get the application picture, use /application/{applicationId}/picture.
     * @type {string}
     * @memberof Application
     */
    picture?: string;
    /**
     * Background of the application. This attribute is only used to update a picture.\
     * To get the application picture, use /application/{applicationId}/background.
     * @type {string}
     * @memberof Application
     */
    background?: string;
    /**
     * 
     * @type {ApiKeyModeEnum}
     * @memberof Application
     */
    api_key_mode?: ApiKeyModeEnum;
    /**
     * 
     * @type {ApplicationSettings}
     * @memberof Application
     */
    settings?: ApplicationSettings;
    /**
     * 
     * @type {ApplicationLinks}
     * @memberof Application
     */
    _links?: ApplicationLinks;
}

export function ApplicationFromJSON(json: any): Application {
    return ApplicationFromJSONTyped(json, false);
}

export function ApplicationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Application {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'domain': !exists(json, 'domain') ? undefined : json['domain'],
        'applicationType': !exists(json, 'applicationType') ? undefined : json['applicationType'],
        'hasClientId': !exists(json, 'hasClientId') ? undefined : json['hasClientId'],
        'owner': !exists(json, 'owner') ? undefined : UserFromJSON(json['owner']),
        'created_at': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updated_at': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
        'groups': !exists(json, 'groups') ? undefined : ((json['groups'] as Array<any>).map(GroupFromJSON)),
        'picture': !exists(json, 'picture') ? undefined : json['picture'],
        'background': !exists(json, 'background') ? undefined : json['background'],
        'api_key_mode': !exists(json, 'api_key_mode') ? undefined : ApiKeyModeEnumFromJSON(json['api_key_mode']),
        'settings': !exists(json, 'settings') ? undefined : ApplicationSettingsFromJSON(json['settings']),
        '_links': !exists(json, '_links') ? undefined : ApplicationLinksFromJSON(json['_links']),
    };
}

export function ApplicationToJSON(value?: Application | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'domain': value.domain,
        'applicationType': value.applicationType,
        'hasClientId': value.hasClientId,
        'owner': UserToJSON(value.owner),
        'created_at': value.created_at === undefined ? undefined : (value.created_at.toISOString()),
        'updated_at': value.updated_at === undefined ? undefined : (value.updated_at.toISOString()),
        'groups': value.groups === undefined ? undefined : ((value.groups as Array<any>).map(GroupToJSON)),
        'picture': value.picture,
        'background': value.background,
        'api_key_mode': ApiKeyModeEnumToJSON(value.api_key_mode),
        'settings': ApplicationSettingsToJSON(value.settings),
        '_links': ApplicationLinksToJSON(value._links),
    };
}


