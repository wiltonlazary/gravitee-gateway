/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io Portal Rest API
 * API dedicated to the devportal part of Gravitee
 *
 * Contact: contact@graviteesource.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    RatingAnswer,
    RatingAnswerFromJSON,
    RatingAnswerFromJSONTyped,
    RatingAnswerToJSON,
    User,
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './';

/**
 * 
 * @export
 * @interface Rating
 */
export interface Rating {
    /**
     * Unique identifier of a rating.
     * @type {string}
     * @memberof Rating
     */
    id: string;
    /**
     * Title of a rating.
     * @type {string}
     * @memberof Rating
     */
    title: string;
    /**
     * Value of the rating. Integer between 1 and 5.
     * @type {number}
     * @memberof Rating
     */
    value: number;
    /**
     * 
     * @type {User}
     * @memberof Rating
     */
    author?: User;
    /**
     * Date and time of the rating.
     * @type {Date}
     * @memberof Rating
     */
    date?: Date;
    /**
     * Comment left by the author to explain the rating.
     * @type {string}
     * @memberof Rating
     */
    comment: string;
    /**
     * Array of answers.
     * @type {Array<RatingAnswer>}
     * @memberof Rating
     */
    answers?: Array<RatingAnswer>;
}

export function RatingFromJSON(json: any): Rating {
    return RatingFromJSONTyped(json, false);
}

export function RatingFromJSONTyped(json: any, ignoreDiscriminator: boolean): Rating {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'value': json['value'],
        'author': !exists(json, 'author') ? undefined : UserFromJSON(json['author']),
        'date': !exists(json, 'date') ? undefined : (new Date(json['date'])),
        'comment': json['comment'],
        'answers': !exists(json, 'answers') ? undefined : ((json['answers'] as Array<any>).map(RatingAnswerFromJSON)),
    };
}

export function RatingToJSON(value?: Rating | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'title': value.title,
        'value': value.value,
        'author': UserToJSON(value.author),
        'date': value.date === undefined ? undefined : (value.date.toISOString()),
        'comment': value.comment,
        'answers': value.answers === undefined ? undefined : ((value.answers as Array<any>).map(RatingAnswerToJSON)),
    };
}


