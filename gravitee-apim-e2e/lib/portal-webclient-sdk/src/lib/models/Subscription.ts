/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io Portal Rest API
 * API dedicated to the devportal part of Gravitee
 *
 * Contact: contact@graviteesource.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Key,
    KeyFromJSON,
    KeyFromJSONTyped,
    KeyToJSON,
} from './';

/**
 * 
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     * Unique identifier of a subscription.
     * @type {string}
     * @memberof Subscription
     */
    id: string;
    /**
     * Subscribed API.
     * @type {string}
     * @memberof Subscription
     */
    api: string;
    /**
     * Subscribing application.
     * @type {string}
     * @memberof Subscription
     */
    application: string;
    /**
     * Subscribed plan.
     * @type {string}
     * @memberof Subscription
     */
    plan: string;
    /**
     * Comment of the user when asking for a subscription.
     * @type {string}
     * @memberof Subscription
     */
    request?: string;
    /**
     * Reason of the user when processing (accepting/rejecting) a subscription.
     * @type {string}
     * @memberof Subscription
     */
    reason?: string;
    /**
     * Creation date and time of the subscription.
     * @type {Date}
     * @memberof Subscription
     */
    created_at?: Date;
    /**
     * Date and time when the subscription request was processed.
     * @type {Date}
     * @memberof Subscription
     */
    processed_at?: Date;
    /**
     * Start date and time of the subscription.
     * @type {Date}
     * @memberof Subscription
     */
    start_at?: Date;
    /**
     * Expiration date and time of the subscription.
     * @type {Date}
     * @memberof Subscription
     */
    end_at?: Date;
    /**
     * Paused date and time of the subscription.
     * @type {Date}
     * @memberof Subscription
     */
    paused_at?: Date;
    /**
     * Closed date and time of the subscription.
     * @type {Date}
     * @memberof Subscription
     */
    closed_at?: Date;
    /**
     * The user who subscribed.
     * @type {string}
     * @memberof Subscription
     */
    subscribed_by?: string;
    /**
     * Status of the subscription.
     * @type {string}
     * @memberof Subscription
     */
    status: SubscriptionStatusEnum;
    /**
     * Only returned with (*)/subscriptions/{subscriptionId}*.
     * Need *include* query param to contain 'keys'.
     * 
     * List of APIKeys of the subscription.
     * @type {Array<Key>}
     * @memberof Subscription
     */
    keys?: Array<Key>;
}

export function SubscriptionFromJSON(json: any): Subscription {
    return SubscriptionFromJSONTyped(json, false);
}

export function SubscriptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Subscription {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'api': json['api'],
        'application': json['application'],
        'plan': json['plan'],
        'request': !exists(json, 'request') ? undefined : json['request'],
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
        'created_at': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'processed_at': !exists(json, 'processed_at') ? undefined : (new Date(json['processed_at'])),
        'start_at': !exists(json, 'start_at') ? undefined : (new Date(json['start_at'])),
        'end_at': !exists(json, 'end_at') ? undefined : (new Date(json['end_at'])),
        'paused_at': !exists(json, 'paused_at') ? undefined : (new Date(json['paused_at'])),
        'closed_at': !exists(json, 'closed_at') ? undefined : (new Date(json['closed_at'])),
        'subscribed_by': !exists(json, 'subscribed_by') ? undefined : json['subscribed_by'],
        'status': json['status'],
        'keys': !exists(json, 'keys') ? undefined : ((json['keys'] as Array<any>).map(KeyFromJSON)),
    };
}

export function SubscriptionToJSON(value?: Subscription | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'api': value.api,
        'application': value.application,
        'plan': value.plan,
        'request': value.request,
        'reason': value.reason,
        'created_at': value.created_at === undefined ? undefined : (value.created_at.toISOString()),
        'processed_at': value.processed_at === undefined ? undefined : (value.processed_at.toISOString()),
        'start_at': value.start_at === undefined ? undefined : (value.start_at.toISOString()),
        'end_at': value.end_at === undefined ? undefined : (value.end_at.toISOString()),
        'paused_at': value.paused_at === undefined ? undefined : (value.paused_at.toISOString()),
        'closed_at': value.closed_at === undefined ? undefined : (value.closed_at.toISOString()),
        'subscribed_by': value.subscribed_by,
        'status': value.status,
        'keys': value.keys === undefined ? undefined : ((value.keys as Array<any>).map(KeyToJSON)),
    };
}

/**
* @export
* @enum {string}
*/
export enum SubscriptionStatusEnum {
    PENDING = 'PENDING',
    ACCEPTED = 'ACCEPTED',
    CLOSED = 'CLOSED',
    REJECTED = 'REJECTED',
    PAUSED = 'PAUSED'
}


