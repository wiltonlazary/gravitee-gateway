/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io Portal Rest API
 * API dedicated to the devportal part of Gravitee
 *
 * Contact: contact@graviteesource.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Token,
    TokenFromJSON,
    TokenToJSON,
} from '../models';

export interface ExchangeAuthorizationCodeRequest {
    identity: string;
    clientId?: string;
    redirectUri?: string;
    code?: string;
    grantType?: string;
    codeVerifier?: string;
    state?: string;
}

export interface LoginRequest {
    authorization: string;
}

export interface TokenExchangeRequest {
    identity: string;
    token: string;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Used to get a gravitee token from an Authorization code (PayloadInput.code). Portal API authenticates the user with the specified IDP ({identity} path param). 
     */
    async exchangeAuthorizationCodeRaw(requestParameters: ExchangeAuthorizationCodeRequest): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.identity === null || requestParameters.identity === undefined) {
            throw new runtime.RequiredError('identity','Required parameter requestParameters.identity was null or undefined when calling exchangeAuthorizationCode.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.clientId !== undefined) {
            formParams.append('client_id', requestParameters.clientId as any);
        }

        if (requestParameters.redirectUri !== undefined) {
            formParams.append('redirect_uri', requestParameters.redirectUri as any);
        }

        if (requestParameters.code !== undefined) {
            formParams.append('code', requestParameters.code as any);
        }

        if (requestParameters.grantType !== undefined) {
            formParams.append('grant_type', requestParameters.grantType as any);
        }

        if (requestParameters.codeVerifier !== undefined) {
            formParams.append('code_verifier', requestParameters.codeVerifier as any);
        }

        if (requestParameters.state !== undefined) {
            formParams.append('state', requestParameters.state as any);
        }

        const response = await this.request({
            path: `/auth/oauth2/{identity}`.replace(`{${"identity"}}`, encodeURIComponent(String(requestParameters.identity))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * Used to get a gravitee token from an Authorization code (PayloadInput.code). Portal API authenticates the user with the specified IDP ({identity} path param). 
     */
    async exchangeAuthorizationCode(requestParameters: ExchangeAuthorizationCodeRequest): Promise<Token> {
        const response = await this.exchangeAuthorizationCodeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Used to get a Gravitee token. This token is mandatory for all the secured resources of the Portal API. 
     */
    async loginRaw(requestParameters: LoginRequest): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling login.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * Used to get a Gravitee token. This token is mandatory for all the secured resources of the Portal API. 
     */
    async login(requestParameters: LoginRequest): Promise<Token> {
        const response = await this.loginRaw(requestParameters);
        return await response.value();
    }

    /**
     * User need to be authenticated to logout. 
     */
    async logoutRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/auth/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User need to be authenticated to logout. 
     */
    async logout(): Promise<void> {
        await this.logoutRaw();
    }

    /**
     * Used to get a gravitee token from a IdentityProvider token. Portal API authenticates the user with the specified IDP ({identity} path param). 
     */
    async tokenExchangeRaw(requestParameters: TokenExchangeRequest): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.identity === null || requestParameters.identity === undefined) {
            throw new runtime.RequiredError('identity','Required parameter requestParameters.identity was null or undefined when calling tokenExchange.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling tokenExchange.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/auth/oauth2/{identity}/_exchange`.replace(`{${"identity"}}`, encodeURIComponent(String(requestParameters.identity))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * Used to get a gravitee token from a IdentityProvider token. Portal API authenticates the user with the specified IDP ({identity} path param). 
     */
    async tokenExchange(requestParameters: TokenExchangeRequest): Promise<Token> {
        const response = await this.tokenExchangeRaw(requestParameters);
        return await response.value();
    }

}
