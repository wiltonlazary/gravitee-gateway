/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io Portal Rest API
 * API dedicated to the devportal part of Gravitee
 *
 * Contact: contact@graviteesource.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GroupsResponse,
    GroupsResponseFromJSON,
    GroupsResponseToJSON,
    MembersResponse,
    MembersResponseFromJSON,
    MembersResponseToJSON,
} from '../models';

export interface GetGroupsRequest {
    page?: number;
    size?: number;
}

export interface GetMembersByGroupIdRequest {
    groupId: string;
    page?: number;
    size?: number;
}

/**
 * 
 */
export class GroupApi extends runtime.BaseAPI {

    /**
     * List all groups  User must have the MANAGEMENT_GROUP[READ] permission. 
     * List groups
     */
    async getGroupsRaw(requestParameters: GetGroupsRequest): Promise<runtime.ApiResponse<GroupsResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupsResponseFromJSON(jsonValue));
    }

    /**
     * List all groups  User must have the MANAGEMENT_GROUP[READ] permission. 
     * List groups
     */
    async getGroups(requestParameters: GetGroupsRequest): Promise<GroupsResponse> {
        const response = await this.getGroupsRaw(requestParameters);
        return await response.value();
    }

    /**
     * List group members that have a Application role.  User must have the MANAGEMENT_GROUP[READ] permission. 
     * List group members
     */
    async getMembersByGroupIdRaw(requestParameters: GetMembersByGroupIdRequest): Promise<runtime.ApiResponse<MembersResponse>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling getMembersByGroupId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/groups/{groupId}/members`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MembersResponseFromJSON(jsonValue));
    }

    /**
     * List group members that have a Application role.  User must have the MANAGEMENT_GROUP[READ] permission. 
     * List group members
     */
    async getMembersByGroupId(requestParameters: GetMembersByGroupIdRequest): Promise<MembersResponse> {
        const response = await this.getMembersByGroupIdRaw(requestParameters);
        return await response.value();
    }

}
