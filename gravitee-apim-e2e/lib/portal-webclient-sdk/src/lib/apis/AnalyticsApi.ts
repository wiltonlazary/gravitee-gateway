/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io Portal Rest API
 * API dedicated to the devportal part of Gravitee
 *
 * Contact: contact@graviteesource.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CountAnalytics, DateHistoAnalytics, GroupByAnalytics,
    GroupByAnalyticsFromJSON, CountAnalyticsFromJSON,
    GroupByAnalyticsToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Log,
    LogFromJSON,
    LogToJSON,
    LogsResponse,
    LogsResponseFromJSON,
    LogsResponseToJSON,
} from '../models';

export interface ExportApplicationLogsByApplicationIdRequest {
    applicationId: string;
    page?: number;
    size?: number;
    from?: number;
    to?: number;
    query?: string;
    field?: string;
    order?: ExportApplicationLogsByApplicationIdOrderEnum;
}

export interface GetApplicationAnalyticsRequest {
    applicationId: string;
    page?: number;
    size?: number;
    from?: number;
    to?: number;
    interval?: number;
    query?: string;
    field?: string;
    type?: GetApplicationAnalyticsTypeEnum;
    ranges?: string;
    aggs?: string;
    order?: string;
}

export interface GetApplicationLogByApplicationIdAndLogIdRequest {
    applicationId: string;
    logId: string;
    timestamp?: number;
}

export interface GetApplicationLogsRequest {
    applicationId: string;
    page?: number;
    size?: number;
    from?: number;
    to?: number;
    query?: string;
    field?: string;
    order?: GetApplicationLogsOrderEnum;
}

/**
 * 
 */
export class AnalyticsApi extends runtime.BaseAPI {

    /**
     * Export application logs as CSV.  User must have the APPLICATION_LOG[READ] permission. 
     * Export application logs as CSV
     */
    async exportApplicationLogsByApplicationIdRaw(requestParameters: ExportApplicationLogsByApplicationIdRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling exportApplicationLogsByApplicationId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.field !== undefined) {
            queryParameters['field'] = requestParameters.field;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/applications/{applicationId}/logs/_export`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Export application logs as CSV.  User must have the APPLICATION_LOG[READ] permission. 
     * Export application logs as CSV
     */
    async exportApplicationLogsByApplicationId(requestParameters: ExportApplicationLogsByApplicationIdRequest): Promise<string> {
        const response = await this.exportApplicationLogsByApplicationIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the application analytics.  User must have the APPLICATION_ANALYTICS[READ] permission. 
     * Get Application analytics
     */
    async getApplicationAnalyticsRaw(requestParameters: GetApplicationAnalyticsRequest): Promise<runtime.ApiResponse<DateHistoAnalytics | GroupByAnalytics | CountAnalytics>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling getApplicationAnalytics.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.interval !== undefined) {
            queryParameters['interval'] = requestParameters.interval;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.field !== undefined) {
            queryParameters['field'] = requestParameters.field;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.ranges !== undefined) {
            queryParameters['ranges'] = requestParameters.ranges;
        }

        if (requestParameters.aggs !== undefined) {
            queryParameters['aggs'] = requestParameters.aggs;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/applications/{applicationId}/analytics`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CountAnalyticsFromJSON(jsonValue));
    }

    /**
     * Get the application analytics.  User must have the APPLICATION_ANALYTICS[READ] permission. 
     * Get Application analytics
     */
    async getApplicationAnalytics(requestParameters: GetApplicationAnalyticsRequest): Promise<DateHistoAnalytics | GroupByAnalytics | CountAnalytics> {
        const response = await this.getApplicationAnalyticsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a specific log of an application.  User must have the APPLICATION_LOG[READ] permission. 
     * Get a specific log of an application
     */
    async getApplicationLogByApplicationIdAndLogIdRaw(requestParameters: GetApplicationLogByApplicationIdAndLogIdRequest): Promise<runtime.ApiResponse<Log>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling getApplicationLogByApplicationIdAndLogId.');
        }

        if (requestParameters.logId === null || requestParameters.logId === undefined) {
            throw new runtime.RequiredError('logId','Required parameter requestParameters.logId was null or undefined when calling getApplicationLogByApplicationIdAndLogId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.timestamp !== undefined) {
            queryParameters['timestamp'] = requestParameters.timestamp;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/applications/{applicationId}/logs/{logId}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))).replace(`{${"logId"}}`, encodeURIComponent(String(requestParameters.logId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LogFromJSON(jsonValue));
    }

    /**
     * Get a specific log of an application.  User must have the APPLICATION_LOG[READ] permission. 
     * Get a specific log of an application
     */
    async getApplicationLogByApplicationIdAndLogId(requestParameters: GetApplicationLogByApplicationIdAndLogIdRequest): Promise<Log> {
        const response = await this.getApplicationLogByApplicationIdAndLogIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the application logs.  User must have the APPLICATION_LOG[READ] permission. 
     * Get Application logs
     */
    async getApplicationLogsRaw(requestParameters: GetApplicationLogsRequest): Promise<runtime.ApiResponse<LogsResponse>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling getApplicationLogs.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.field !== undefined) {
            queryParameters['field'] = requestParameters.field;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/applications/{applicationId}/logs`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LogsResponseFromJSON(jsonValue));
    }

    /**
     * Get the application logs.  User must have the APPLICATION_LOG[READ] permission. 
     * Get Application logs
     */
    async getApplicationLogs(requestParameters: GetApplicationLogsRequest): Promise<LogsResponse> {
        const response = await this.getApplicationLogsRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ExportApplicationLogsByApplicationIdOrderEnum {
    ASC = 'ASC',
    DESC = 'DESC'
}
/**
    * @export
    * @enum {string}
    */
export enum GetApplicationAnalyticsTypeEnum {
    GROUPBY = 'GROUP_BY',
    DATEHISTO = 'DATE_HISTO',
    COUNT = 'COUNT',
    STATS = 'STATS'
}
/**
    * @export
    * @enum {string}
    */
export enum GetApplicationLogsOrderEnum {
    ASC = 'ASC',
    DESC = 'DESC'
}
