/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io Portal Rest API
 * API dedicated to the devportal part of Gravitee
 *
 * Contact: contact@graviteesource.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PortalNotificationsResponse,
    PortalNotificationsResponseFromJSON,
    PortalNotificationsResponseToJSON,
    User,
    UserFromJSON,
    UserToJSON,
    UserInput,
    UserInputFromJSON,
    UserInputToJSON,
} from '../models';

export interface DeleteCurrentUserNotificationByNotificationIdRequest {
    notificationId: string;
}

export interface GetCurrentUserNotificationsRequest {
    page?: number;
    size?: number;
}

export interface UpdateCurrentUserRequest {
    userInput?: UserInput;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Delete all notifications of the current user. 
     * Delete all notifications of the current user
     */
    async deleteAllCurrentUserNotificationsRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user/notifications`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete all notifications of the current user. 
     * Delete all notifications of the current user
     */
    async deleteAllCurrentUserNotifications(): Promise<void> {
        await this.deleteAllCurrentUserNotificationsRaw();
    }

    /**
     * Delete a specific notification of the current user. 
     * Delete a specific notification of the current user
     */
    async deleteCurrentUserNotificationByNotificationIdRaw(requestParameters: DeleteCurrentUserNotificationByNotificationIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.notificationId === null || requestParameters.notificationId === undefined) {
            throw new runtime.RequiredError('notificationId','Required parameter requestParameters.notificationId was null or undefined when calling deleteCurrentUserNotificationByNotificationId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user/notifications/{notificationId}`.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters.notificationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific notification of the current user. 
     * Delete a specific notification of the current user
     */
    async deleteCurrentUserNotificationByNotificationId(requestParameters: DeleteCurrentUserNotificationByNotificationIdRequest): Promise<void> {
        await this.deleteCurrentUserNotificationByNotificationIdRaw(requestParameters);
    }

    /**
     * Get information about the authenticated user. 
     * Get the authenticated user
     */
    async getCurrentUserRaw(): Promise<runtime.ApiResponse<User>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Get information about the authenticated user. 
     * Get the authenticated user
     */
    async getCurrentUser(): Promise<User> {
        const response = await this.getCurrentUserRaw();
        return await response.value();
    }

    /**
     * Retrieve user\'s avatar. 
     * Retrieve user\'s avatar
     */
    async getCurrentUserAvatarRaw(): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user/avatar`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Retrieve user\'s avatar. 
     * Retrieve user\'s avatar
     */
    async getCurrentUserAvatar(): Promise<Blob> {
        const response = await this.getCurrentUserAvatarRaw();
        return await response.value();
    }

    /**
     * Retrieve current user\'s notifications. 
     * Retrieve user\'s notifications
     */
    async getCurrentUserNotificationsRaw(requestParameters: GetCurrentUserNotificationsRequest): Promise<runtime.ApiResponse<PortalNotificationsResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user/notifications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PortalNotificationsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve current user\'s notifications. 
     * Retrieve user\'s notifications
     */
    async getCurrentUserNotifications(requestParameters: GetCurrentUserNotificationsRequest): Promise<PortalNotificationsResponse> {
        const response = await this.getCurrentUserNotificationsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Modify current user information.  Only the current user can modify his/her information. 
     * Modify current user information.
     */
    async updateCurrentUserRaw(requestParameters: UpdateCurrentUserRequest): Promise<runtime.ApiResponse<User>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/user`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserInputToJSON(requestParameters.userInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Modify current user information.  Only the current user can modify his/her information. 
     * Modify current user information.
     */
    async updateCurrentUser(requestParameters: UpdateCurrentUserRequest): Promise<User> {
        const response = await this.updateCurrentUserRaw(requestParameters);
        return await response.value();
    }

}
