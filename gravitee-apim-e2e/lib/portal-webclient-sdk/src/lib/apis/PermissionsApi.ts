/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io Portal Rest API
 * API dedicated to the devportal part of Gravitee
 *
 * Contact: contact@graviteesource.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PermissionsResponse,
    PermissionsResponseFromJSON,
    PermissionsResponseToJSON,
} from '../models';

export interface GetCurrentUserPermissionsRequest {
    apiId?: string;
    applicationId?: string;
}

/**
 * 
 */
export class PermissionsApi extends runtime.BaseAPI {

    /**
     * Retrieve user\'s permissions. 
     * Retrieve user\'s permissions
     */
    async getCurrentUserPermissionsRaw(requestParameters: GetCurrentUserPermissionsRequest): Promise<runtime.ApiResponse<PermissionsResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiId !== undefined) {
            queryParameters['apiId'] = requestParameters.apiId;
        }

        if (requestParameters.applicationId !== undefined) {
            queryParameters['applicationId'] = requestParameters.applicationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/permissions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve user\'s permissions. 
     * Retrieve user\'s permissions
     */
    async getCurrentUserPermissions(requestParameters: GetCurrentUserPermissionsRequest): Promise<PermissionsResponse> {
        const response = await this.getCurrentUserPermissionsRaw(requestParameters);
        return await response.value();
    }

}
